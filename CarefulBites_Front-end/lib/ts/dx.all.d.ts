/*!
* DevExtreme (dx.all.d.ts)
* Version: 22.1.6
* Build date: Tue Oct 18 2022
*
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
*/

  interface JQuery<TElement = HTMLElement> {}
  interface JQuery<TElement = HTMLElement> {
    dxAccordion(): JQuery;
    dxAccordion(options: 'instance'): DevExpress.ui.dxAccordion;
    dxAccordion(options: DevExpress.ui.dxAccordion.Properties): JQuery;
    dxAccordion(options: string): any;
    dxAccordion(options: string, ...params: any[]): any;

    dxActionSheet(): JQuery;
    dxActionSheet(options: 'instance'): DevExpress.ui.dxActionSheet;
    dxActionSheet(options: DevExpress.ui.dxActionSheet.Properties): JQuery;
    dxActionSheet(options: string): any;
    dxActionSheet(options: string, ...params: any[]): any;

    dxAutocomplete(): JQuery;
    dxAutocomplete(options: 'instance'): DevExpress.ui.dxAutocomplete;
    dxAutocomplete(options: DevExpress.ui.dxAutocomplete.Properties): JQuery;
    dxAutocomplete(options: string): any;
    dxAutocomplete(options: string, ...params: any[]): any;

    dxBarGauge(): JQuery;
    dxBarGauge(options: 'instance'): DevExpress.viz.dxBarGauge;
    dxBarGauge(options: DevExpress.viz.dxBarGauge.Properties): JQuery;
    dxBarGauge(options: string): any;
    dxBarGauge(options: string, ...params: any[]): any;

    dxBox(): JQuery;
    dxBox(options: 'instance'): DevExpress.ui.dxBox;
    dxBox(options: DevExpress.ui.dxBox.Properties): JQuery;
    dxBox(options: string): any;
    dxBox(options: string, ...params: any[]): any;

    dxBullet(): JQuery;
    dxBullet(options: 'instance'): DevExpress.viz.dxBullet;
    dxBullet(options: DevExpress.viz.dxBullet.Properties): JQuery;
    dxBullet(options: string): any;
    dxBullet(options: string, ...params: any[]): any;

    dxButton(): JQuery;
    dxButton(options: 'instance'): DevExpress.ui.dxButton;
    dxButton(options: DevExpress.ui.dxButton.Properties): JQuery;
    dxButton(options: string): any;
    dxButton(options: string, ...params: any[]): any;

    dxButtonGroup(): JQuery;
    dxButtonGroup(options: 'instance'): DevExpress.ui.dxButtonGroup;
    dxButtonGroup(options: DevExpress.ui.dxButtonGroup.Properties): JQuery;
    dxButtonGroup(options: string): any;
    dxButtonGroup(options: string, ...params: any[]): any;

    dxCalendar(): JQuery;
    dxCalendar(options: 'instance'): DevExpress.ui.dxCalendar;
    dxCalendar(options: DevExpress.ui.dxCalendar.Properties): JQuery;
    dxCalendar(options: string): any;
    dxCalendar(options: string, ...params: any[]): any;

    dxChart(): JQuery;
    dxChart(options: 'instance'): DevExpress.viz.dxChart;
    dxChart(options: DevExpress.viz.dxChart.Properties): JQuery;
    dxChart(options: string): any;
    dxChart(options: string, ...params: any[]): any;

    dxCheckBox(): JQuery;
    dxCheckBox(options: 'instance'): DevExpress.ui.dxCheckBox;
    dxCheckBox(options: DevExpress.ui.dxCheckBox.Properties): JQuery;
    dxCheckBox(options: string): any;
    dxCheckBox(options: string, ...params: any[]): any;

    dxCircularGauge(): JQuery;
    dxCircularGauge(options: 'instance'): DevExpress.viz.dxCircularGauge;
    dxCircularGauge(options: DevExpress.viz.dxCircularGauge.Properties): JQuery;
    dxCircularGauge(options: string): any;
    dxCircularGauge(options: string, ...params: any[]): any;

    dxColorBox(): JQuery;
    dxColorBox(options: 'instance'): DevExpress.ui.dxColorBox;
    dxColorBox(options: DevExpress.ui.dxColorBox.Properties): JQuery;
    dxColorBox(options: string): any;
    dxColorBox(options: string, ...params: any[]): any;

    dxContextMenu(): JQuery;
    dxContextMenu(options: 'instance'): DevExpress.ui.dxContextMenu;
    dxContextMenu(options: DevExpress.ui.dxContextMenu.Properties): JQuery;
    dxContextMenu(options: string): any;
    dxContextMenu(options: string, ...params: any[]): any;

    dxDataGrid(): JQuery;
    dxDataGrid(options: 'instance'): DevExpress.ui.dxDataGrid;
    dxDataGrid(options: DevExpress.ui.dxDataGrid.Properties): JQuery;
    dxDataGrid(options: string): any;
    dxDataGrid(options: string, ...params: any[]): any;

    dxDateBox(): JQuery;
    dxDateBox(options: 'instance'): DevExpress.ui.dxDateBox;
    dxDateBox(options: DevExpress.ui.dxDateBox.Properties): JQuery;
    dxDateBox(options: string): any;
    dxDateBox(options: string, ...params: any[]): any;

    dxDeferRendering(): JQuery;
    dxDeferRendering(options: 'instance'): DevExpress.ui.dxDeferRendering;
    dxDeferRendering(
      options: DevExpress.ui.dxDeferRendering.Properties
    ): JQuery;
    dxDeferRendering(options: string): any;
    dxDeferRendering(options: string, ...params: any[]): any;

    dxDiagram(): JQuery;
    dxDiagram(options: 'instance'): DevExpress.ui.dxDiagram;
    dxDiagram(options: DevExpress.ui.dxDiagram.Properties): JQuery;
    dxDiagram(options: string): any;
    dxDiagram(options: string, ...params: any[]): any;

    dxDraggable(): JQuery;
    dxDraggable(options: 'instance'): DevExpress.ui.dxDraggable;
    dxDraggable(options: DevExpress.ui.dxDraggable.Properties): JQuery;
    dxDraggable(options: string): any;
    dxDraggable(options: string, ...params: any[]): any;

    dxDrawer(): JQuery;
    dxDrawer(options: 'instance'): DevExpress.ui.dxDrawer;
    dxDrawer(options: DevExpress.ui.dxDrawer.Properties): JQuery;
    dxDrawer(options: string): any;
    dxDrawer(options: string, ...params: any[]): any;

    dxDropDownBox(): JQuery;
    dxDropDownBox(options: 'instance'): DevExpress.ui.dxDropDownBox;
    dxDropDownBox(options: DevExpress.ui.dxDropDownBox.Properties): JQuery;
    dxDropDownBox(options: string): any;
    dxDropDownBox(options: string, ...params: any[]): any;

    dxDropDownButton(): JQuery;
    dxDropDownButton(options: 'instance'): DevExpress.ui.dxDropDownButton;
    dxDropDownButton(
      options: DevExpress.ui.dxDropDownButton.Properties
    ): JQuery;
    dxDropDownButton(options: string): any;
    dxDropDownButton(options: string, ...params: any[]): any;

    dxFileManager(): JQuery;
    dxFileManager(options: 'instance'): DevExpress.ui.dxFileManager;
    dxFileManager(options: DevExpress.ui.dxFileManager.Properties): JQuery;
    dxFileManager(options: string): any;
    dxFileManager(options: string, ...params: any[]): any;

    dxFileUploader(): JQuery;
    dxFileUploader(options: 'instance'): DevExpress.ui.dxFileUploader;
    dxFileUploader(options: DevExpress.ui.dxFileUploader.Properties): JQuery;
    dxFileUploader(options: string): any;
    dxFileUploader(options: string, ...params: any[]): any;

    dxFilterBuilder(): JQuery;
    dxFilterBuilder(options: 'instance'): DevExpress.ui.dxFilterBuilder;
    dxFilterBuilder(options: DevExpress.ui.dxFilterBuilder.Properties): JQuery;
    dxFilterBuilder(options: string): any;
    dxFilterBuilder(options: string, ...params: any[]): any;

    dxForm(): JQuery;
    dxForm(options: 'instance'): DevExpress.ui.dxForm;
    dxForm(options: DevExpress.ui.dxForm.Properties): JQuery;
    dxForm(options: string): any;
    dxForm(options: string, ...params: any[]): any;

    dxFunnel(): JQuery;
    dxFunnel(options: 'instance'): DevExpress.viz.dxFunnel;
    dxFunnel(options: DevExpress.viz.dxFunnel.Properties): JQuery;
    dxFunnel(options: string): any;
    dxFunnel(options: string, ...params: any[]): any;

    dxGallery(): JQuery;
    dxGallery(options: 'instance'): DevExpress.ui.dxGallery;
    dxGallery(options: DevExpress.ui.dxGallery.Properties): JQuery;
    dxGallery(options: string): any;
    dxGallery(options: string, ...params: any[]): any;

    dxGantt(): JQuery;
    dxGantt(options: 'instance'): DevExpress.ui.dxGantt;
    dxGantt(options: DevExpress.ui.dxGantt.Properties): JQuery;
    dxGantt(options: string): any;
    dxGantt(options: string, ...params: any[]): any;

    dxHtmlEditor(): JQuery;
    dxHtmlEditor(options: 'instance'): DevExpress.ui.dxHtmlEditor;
    dxHtmlEditor(options: DevExpress.ui.dxHtmlEditor.Properties): JQuery;
    dxHtmlEditor(options: string): any;
    dxHtmlEditor(options: string, ...params: any[]): any;

    dxLinearGauge(): JQuery;
    dxLinearGauge(options: 'instance'): DevExpress.viz.dxLinearGauge;
    dxLinearGauge(options: DevExpress.viz.dxLinearGauge.Properties): JQuery;
    dxLinearGauge(options: string): any;
    dxLinearGauge(options: string, ...params: any[]): any;

    dxList(): JQuery;
    dxList(options: 'instance'): DevExpress.ui.dxList;
    dxList(options: DevExpress.ui.dxList.Properties): JQuery;
    dxList(options: string): any;
    dxList(options: string, ...params: any[]): any;

    dxLoadIndicator(): JQuery;
    dxLoadIndicator(options: 'instance'): DevExpress.ui.dxLoadIndicator;
    dxLoadIndicator(options: DevExpress.ui.dxLoadIndicator.Properties): JQuery;
    dxLoadIndicator(options: string): any;
    dxLoadIndicator(options: string, ...params: any[]): any;

    dxLoadPanel(): JQuery;
    dxLoadPanel(options: 'instance'): DevExpress.ui.dxLoadPanel;
    dxLoadPanel(options: DevExpress.ui.dxLoadPanel.Properties): JQuery;
    dxLoadPanel(options: string): any;
    dxLoadPanel(options: string, ...params: any[]): any;

    dxLookup(): JQuery;
    dxLookup(options: 'instance'): DevExpress.ui.dxLookup;
    dxLookup(options: DevExpress.ui.dxLookup.Properties): JQuery;
    dxLookup(options: string): any;
    dxLookup(options: string, ...params: any[]): any;

    dxMap(): JQuery;
    dxMap(options: 'instance'): DevExpress.ui.dxMap;
    dxMap(options: DevExpress.ui.dxMap.Properties): JQuery;
    dxMap(options: string): any;
    dxMap(options: string, ...params: any[]): any;

    dxMenu(): JQuery;
    dxMenu(options: 'instance'): DevExpress.ui.dxMenu;
    dxMenu(options: DevExpress.ui.dxMenu.Properties): JQuery;
    dxMenu(options: string): any;
    dxMenu(options: string, ...params: any[]): any;

    dxMultiView(): JQuery;
    dxMultiView(options: 'instance'): DevExpress.ui.dxMultiView;
    dxMultiView(options: DevExpress.ui.dxMultiView.Properties): JQuery;
    dxMultiView(options: string): any;
    dxMultiView(options: string, ...params: any[]): any;

    dxNavBar(): JQuery;
    dxNavBar(options: 'instance'): DevExpress.ui.dxNavBar;
    dxNavBar(options: DevExpress.ui.dxNavBar.Properties): JQuery;
    dxNavBar(options: string): any;
    dxNavBar(options: string, ...params: any[]): any;

    dxNumberBox(): JQuery;
    dxNumberBox(options: 'instance'): DevExpress.ui.dxNumberBox;
    dxNumberBox(options: DevExpress.ui.dxNumberBox.Properties): JQuery;
    dxNumberBox(options: string): any;
    dxNumberBox(options: string, ...params: any[]): any;

    dxPieChart(): JQuery;
    dxPieChart(options: 'instance'): DevExpress.viz.dxPieChart;
    dxPieChart(options: DevExpress.viz.dxPieChart.Properties): JQuery;
    dxPieChart(options: string): any;
    dxPieChart(options: string, ...params: any[]): any;

    dxPivotGrid(): JQuery;
    dxPivotGrid(options: 'instance'): DevExpress.ui.dxPivotGrid;
    dxPivotGrid(options: DevExpress.ui.dxPivotGrid.Properties): JQuery;
    dxPivotGrid(options: string): any;
    dxPivotGrid(options: string, ...params: any[]): any;

    dxPivotGridFieldChooser(): JQuery;
    dxPivotGridFieldChooser(
      options: 'instance'
    ): DevExpress.ui.dxPivotGridFieldChooser;
    dxPivotGridFieldChooser(
      options: DevExpress.ui.dxPivotGridFieldChooser.Properties
    ): JQuery;
    dxPivotGridFieldChooser(options: string): any;
    dxPivotGridFieldChooser(options: string, ...params: any[]): any;

    dxPolarChart(): JQuery;
    dxPolarChart(options: 'instance'): DevExpress.viz.dxPolarChart;
    dxPolarChart(options: DevExpress.viz.dxPolarChart.Properties): JQuery;
    dxPolarChart(options: string): any;
    dxPolarChart(options: string, ...params: any[]): any;

    dxPopover(): JQuery;
    dxPopover(options: 'instance'): DevExpress.ui.dxPopover;
    dxPopover(options: DevExpress.ui.dxPopover.Properties): JQuery;
    dxPopover(options: string): any;
    dxPopover(options: string, ...params: any[]): any;

    dxPopup(): JQuery;
    dxPopup(options: 'instance'): DevExpress.ui.dxPopup;
    dxPopup(options: DevExpress.ui.dxPopup.Properties): JQuery;
    dxPopup(options: string): any;
    dxPopup(options: string, ...params: any[]): any;

    dxProgressBar(): JQuery;
    dxProgressBar(options: 'instance'): DevExpress.ui.dxProgressBar;
    dxProgressBar(options: DevExpress.ui.dxProgressBar.Properties): JQuery;
    dxProgressBar(options: string): any;
    dxProgressBar(options: string, ...params: any[]): any;

    dxRadioGroup(): JQuery;
    dxRadioGroup(options: 'instance'): DevExpress.ui.dxRadioGroup;
    dxRadioGroup(options: DevExpress.ui.dxRadioGroup.Properties): JQuery;
    dxRadioGroup(options: string): any;
    dxRadioGroup(options: string, ...params: any[]): any;

    dxRangeSelector(): JQuery;
    dxRangeSelector(options: 'instance'): DevExpress.viz.dxRangeSelector;
    dxRangeSelector(options: DevExpress.viz.dxRangeSelector.Properties): JQuery;
    dxRangeSelector(options: string): any;
    dxRangeSelector(options: string, ...params: any[]): any;

    dxRangeSlider(): JQuery;
    dxRangeSlider(options: 'instance'): DevExpress.ui.dxRangeSlider;
    dxRangeSlider(options: DevExpress.ui.dxRangeSlider.Properties): JQuery;
    dxRangeSlider(options: string): any;
    dxRangeSlider(options: string, ...params: any[]): any;

    dxRecurrenceEditor(): JQuery;
    dxRecurrenceEditor(options: 'instance'): DevExpress.ui.dxRecurrenceEditor;
    dxRecurrenceEditor(
      options: DevExpress.ui.dxRecurrenceEditor.Properties
    ): JQuery;
    dxRecurrenceEditor(options: string): any;
    dxRecurrenceEditor(options: string, ...params: any[]): any;

    dxResizable(): JQuery;
    dxResizable(options: 'instance'): DevExpress.ui.dxResizable;
    dxResizable(options: DevExpress.ui.dxResizable.Properties): JQuery;
    dxResizable(options: string): any;
    dxResizable(options: string, ...params: any[]): any;

    dxResponsiveBox(): JQuery;
    dxResponsiveBox(options: 'instance'): DevExpress.ui.dxResponsiveBox;
    dxResponsiveBox(options: DevExpress.ui.dxResponsiveBox.Properties): JQuery;
    dxResponsiveBox(options: string): any;
    dxResponsiveBox(options: string, ...params: any[]): any;

    dxSankey(): JQuery;
    dxSankey(options: 'instance'): DevExpress.viz.dxSankey;
    dxSankey(options: DevExpress.viz.dxSankey.Properties): JQuery;
    dxSankey(options: string): any;
    dxSankey(options: string, ...params: any[]): any;

    dxScheduler(): JQuery;
    dxScheduler(options: 'instance'): DevExpress.ui.dxScheduler;
    dxScheduler(options: DevExpress.ui.dxScheduler.Properties): JQuery;
    dxScheduler(options: string): any;
    dxScheduler(options: string, ...params: any[]): any;

    dxScrollView(): JQuery;
    dxScrollView(options: 'instance'): DevExpress.ui.dxScrollView;
    dxScrollView(options: DevExpress.ui.dxScrollView.Properties): JQuery;
    dxScrollView(options: string): any;
    dxScrollView(options: string, ...params: any[]): any;

    dxSelectBox(): JQuery;
    dxSelectBox(options: 'instance'): DevExpress.ui.dxSelectBox;
    dxSelectBox(options: DevExpress.ui.dxSelectBox.Properties): JQuery;
    dxSelectBox(options: string): any;
    dxSelectBox(options: string, ...params: any[]): any;

    dxSlideOut(): JQuery;
    dxSlideOut(options: 'instance'): DevExpress.ui.dxSlideOut;
    dxSlideOut(options: DevExpress.ui.dxSlideOut.Properties): JQuery;
    dxSlideOut(options: string): any;
    dxSlideOut(options: string, ...params: any[]): any;

    dxSlideOutView(): JQuery;
    dxSlideOutView(options: 'instance'): DevExpress.ui.dxSlideOutView;
    dxSlideOutView(options: DevExpress.ui.dxSlideOutView.Properties): JQuery;
    dxSlideOutView(options: string): any;
    dxSlideOutView(options: string, ...params: any[]): any;

    dxSlider(): JQuery;
    dxSlider(options: 'instance'): DevExpress.ui.dxSlider;
    dxSlider(options: DevExpress.ui.dxSlider.Properties): JQuery;
    dxSlider(options: string): any;
    dxSlider(options: string, ...params: any[]): any;

    dxSortable(): JQuery;
    dxSortable(options: 'instance'): DevExpress.ui.dxSortable;
    dxSortable(options: DevExpress.ui.dxSortable.Properties): JQuery;
    dxSortable(options: string): any;
    dxSortable(options: string, ...params: any[]): any;

    dxSparkline(): JQuery;
    dxSparkline(options: 'instance'): DevExpress.viz.dxSparkline;
    dxSparkline(options: DevExpress.viz.dxSparkline.Properties): JQuery;
    dxSparkline(options: string): any;
    dxSparkline(options: string, ...params: any[]): any;

    dxSpeedDialAction(): JQuery;
    dxSpeedDialAction(options: 'instance'): DevExpress.ui.dxSpeedDialAction;
    dxSpeedDialAction(
      options: DevExpress.ui.dxSpeedDialAction.Properties
    ): JQuery;
    dxSpeedDialAction(options: string): any;
    dxSpeedDialAction(options: string, ...params: any[]): any;

    dxSwitch(): JQuery;
    dxSwitch(options: 'instance'): DevExpress.ui.dxSwitch;
    dxSwitch(options: DevExpress.ui.dxSwitch.Properties): JQuery;
    dxSwitch(options: string): any;
    dxSwitch(options: string, ...params: any[]): any;

    dxTabPanel(): JQuery;
    dxTabPanel(options: 'instance'): DevExpress.ui.dxTabPanel;
    dxTabPanel(options: DevExpress.ui.dxTabPanel.Properties): JQuery;
    dxTabPanel(options: string): any;
    dxTabPanel(options: string, ...params: any[]): any;

    dxTabs(): JQuery;
    dxTabs(options: 'instance'): DevExpress.ui.dxTabs;
    dxTabs(options: DevExpress.ui.dxTabs.Properties): JQuery;
    dxTabs(options: string): any;
    dxTabs(options: string, ...params: any[]): any;

    dxTagBox(): JQuery;
    dxTagBox(options: 'instance'): DevExpress.ui.dxTagBox;
    dxTagBox(options: DevExpress.ui.dxTagBox.Properties): JQuery;
    dxTagBox(options: string): any;
    dxTagBox(options: string, ...params: any[]): any;

    dxTextArea(): JQuery;
    dxTextArea(options: 'instance'): DevExpress.ui.dxTextArea;
    dxTextArea(options: DevExpress.ui.dxTextArea.Properties): JQuery;
    dxTextArea(options: string): any;
    dxTextArea(options: string, ...params: any[]): any;

    dxTextBox(): JQuery;
    dxTextBox(options: 'instance'): DevExpress.ui.dxTextBox;
    dxTextBox(options: DevExpress.ui.dxTextBox.Properties): JQuery;
    dxTextBox(options: string): any;
    dxTextBox(options: string, ...params: any[]): any;

    dxTileView(): JQuery;
    dxTileView(options: 'instance'): DevExpress.ui.dxTileView;
    dxTileView(options: DevExpress.ui.dxTileView.Properties): JQuery;
    dxTileView(options: string): any;
    dxTileView(options: string, ...params: any[]): any;

    dxToast(): JQuery;
    dxToast(options: 'instance'): DevExpress.ui.dxToast;
    dxToast(options: DevExpress.ui.dxToast.Properties): JQuery;
    dxToast(options: string): any;
    dxToast(options: string, ...params: any[]): any;

    dxToolbar(): JQuery;
    dxToolbar(options: 'instance'): DevExpress.ui.dxToolbar;
    dxToolbar(options: DevExpress.ui.dxToolbar.Properties): JQuery;
    dxToolbar(options: string): any;
    dxToolbar(options: string, ...params: any[]): any;

    dxTooltip(): JQuery;
    dxTooltip(options: 'instance'): DevExpress.ui.dxTooltip;
    dxTooltip(options: DevExpress.ui.dxTooltip.Properties): JQuery;
    dxTooltip(options: string): any;
    dxTooltip(options: string, ...params: any[]): any;

    dxTreeList(): JQuery;
    dxTreeList(options: 'instance'): DevExpress.ui.dxTreeList;
    dxTreeList(options: DevExpress.ui.dxTreeList.Properties): JQuery;
    dxTreeList(options: string): any;
    dxTreeList(options: string, ...params: any[]): any;

    dxTreeMap(): JQuery;
    dxTreeMap(options: 'instance'): DevExpress.viz.dxTreeMap;
    dxTreeMap(options: DevExpress.viz.dxTreeMap.Properties): JQuery;
    dxTreeMap(options: string): any;
    dxTreeMap(options: string, ...params: any[]): any;

    dxTreeView(): JQuery;
    dxTreeView(options: 'instance'): DevExpress.ui.dxTreeView;
    dxTreeView(options: DevExpress.ui.dxTreeView.Properties): JQuery;
    dxTreeView(options: string): any;
    dxTreeView(options: string, ...params: any[]): any;

    dxValidationGroup(): JQuery;
    dxValidationGroup(options: 'instance'): DevExpress.ui.dxValidationGroup;
    dxValidationGroup(
      options: DevExpress.ui.dxValidationGroup.Properties
    ): JQuery;
    dxValidationGroup(options: string): any;
    dxValidationGroup(options: string, ...params: any[]): any;

    dxValidationMessage(): JQuery;
    dxValidationMessage(options: 'instance'): DevExpress.ui.dxValidationMessage;
    dxValidationMessage(
      options: DevExpress.ui.dxValidationMessage.Properties
    ): JQuery;
    dxValidationMessage(options: string): any;
    dxValidationMessage(options: string, ...params: any[]): any;

    dxValidationSummary(): JQuery;
    dxValidationSummary(options: 'instance'): DevExpress.ui.dxValidationSummary;
    dxValidationSummary(
      options: DevExpress.ui.dxValidationSummary.Properties
    ): JQuery;
    dxValidationSummary(options: string): any;
    dxValidationSummary(options: string, ...params: any[]): any;

    dxValidator(): JQuery;
    dxValidator(options: 'instance'): DevExpress.ui.dxValidator;
    dxValidator(options: DevExpress.ui.dxValidator.Properties): JQuery;
    dxValidator(options: string): any;
    dxValidator(options: string, ...params: any[]): any;

    dxVectorMap(): JQuery;
    dxVectorMap(options: 'instance'): DevExpress.viz.dxVectorMap;
    dxVectorMap(options: DevExpress.viz.dxVectorMap.Properties): JQuery;
    dxVectorMap(options: string): any;
    dxVectorMap(options: string, ...params: any[]): any;
  }
  interface JQueryEventObject {}
  interface JQueryPromise<T> {}

declare module DevExpress {
  /**
   * Defines animation properties.
   */
  export type AnimationConfig = {
    /**
     * A function called after animation is completed.
     */
    complete?: (
      $element: DevExpress.core.DxElement,
      config: AnimationConfig
    ) => void;
    /**
     * A number specifying wait time before animation execution.
     */
    delay?: number;
    /**
     * Specifies the animation direction for the &apos;slideIn&apos; and &apos;slideOut&apos; animation types.
     */
    direction?: DevExpress.common.Direction;
    /**
     * A number specifying the time in milliseconds spent on animation.
     */
    duration?: number;
    /**
     * A string specifying the easing function for animation.
     */
    easing?: string;
    /**
     * Specifies an initial animation state. Use the to property to specify the final state.
     */
    from?: DevExpress.animation.AnimationState;
    /**
     * A number specifying the time period to wait before the animation of the next stagger item starts.
     */
    staggerDelay?: number;
    /**
     * A function called before animation is started.
     */
    start?: (
      $element: DevExpress.core.DxElement,
      config: AnimationConfig
    ) => void;
    /**
     * Specifies a final animation state. Use the from property to specify an initial state.
     */
    to?: DevExpress.animation.AnimationState;
    /**
     * A string value specifying the animation type.
     */
    type?: DevExpress.animation.AnimationType;
  };
  /**
   * A repository of animations.
   */
  export const animationPresets: {
    /**
     * Applies the changes made in the animation repository.
     */
    applyChanges(): void;
    /**
     * Removes all animations from the repository.
     */
    clear(): void;
    /**
     * Deletes an animation with a specific name.
     */
    clear(name: string): void;
    /**
     * Gets the configuration of an animation with a specific name.
     */
    getPreset(name: string): AnimationConfig;
    /**
     * Registers predefined animations in the animation repository.
     */
    registerDefaultPresets(): void;
    /**
     * Adds an animation with a specific name to the animation repository.
     */
    registerPreset(
      name: string,
      config: { animation: AnimationConfig; device?: Device }
    ): void;
    /**
     * Deletes all custom animations.
     */
    resetToDefaults(): void;
  };
  /**
   * A base class for all components and UI components.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export class Component<TProperties> {
    constructor(options?: TProperties);
    /**
     * Prevents the UI component from refreshing until the endUpdate() method is called.
     */
    beginUpdate(): void;
    /**
     * Refreshes the UI component after a call of the beginUpdate() method.
     */
    endUpdate(): void;
    /**
     * Gets the UI component&apos;s instance. Use it to access other methods of the UI component.
     */
    instance(): this;
    /**
     * Detaches all event handlers from a single event.
     */
    off(eventName: string): this;
    /**
     * Detaches a particular event handler from a single event.
     */
    off(eventName: string, eventHandler: Function): this;
    /**
     * Subscribes to an event.
     */
    on(eventName: string, eventHandler: Function): this;
    /**
     * Subscribes to events.
     */
    on(events: { [key: string]: Function }): this;
    /**
     * Gets all UI component properties.
     */
    option(): TProperties;
    /**
     * Gets the value of a single property.
     */
    option<TPropertyName extends string>(
      optionName: TPropertyName
    ): TPropertyName extends keyof TProperties
      ? TProperties[TPropertyName]
      : unknown;
    /**
     * Updates the value of a single property.
     */
    option<TPropertyName extends string>(
      optionName: TPropertyName,
      optionValue: TPropertyName extends keyof TProperties
        ? TProperties[TPropertyName]
        : unknown
    ): void;
    /**
     * Updates the values of several properties.
     */
    option(options: Partial<TProperties>): void;
    /**
     * Resets a property to its default value.
     */
    resetOption(optionName: string): void;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface ComponentOptions<
    TDisposingEvent,
    TInitializedEvent,
    TOptionChangedEvent
  > {
    /**
     * A function that is executed before the UI component is disposed of.
     */
    onDisposing?: (e: TDisposingEvent) => void;
    /**
     * A function used in JavaScript frameworks to save the UI component instance.
     */
    onInitialized?: (e: TInitializedEvent) => void;
    /**
     * A function that is executed after a UI component property is changed.
     */
    onOptionChanged?: (e: TOptionChangedEvent) => void;
  }
  /**
   * Gets the current global configuration.
   */
  export function config(): globalConfig;
  /**
   * Configures your application before its launch.
   */
  export function config(config: globalConfig): void;
  /**
   * 
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export class DataHelperMixin {
    /**
     * Gets the DataSource instance.
     */
    getDataSource(): DevExpress.data.DataSource;
  }
  /**
   * The device object defines the device on which the application is running.
   */
  export type Device = {
    /**
     * Indicates whether or not the device platform is Android.
     */
    android?: boolean;
    /**
     * Specifies the type of the device on which the application is running.
     */
    deviceType?: 'phone' | 'tablet' | 'desktop';
    /**
     * Indicates whether or not the device platform is generic, which means that the application will look and behave according to a generic &apos;light&apos; or &apos;dark&apos; theme.
     */
    generic?: boolean;
    /**
     * Specifies a performance grade of the current device.
     */
    grade?: 'A' | 'B' | 'C';
    /**
     * Indicates whether or not the device platform is iOS.
     */
    ios?: boolean;
    /**
     * Indicates whether or not the device type is &apos;phone&apos;.
     */
    phone?: boolean;
    /**
     * Specifies the platform of the device on which the application is running.
     */
    platform?: 'android' | 'ios' | 'generic';
    /**
     * Indicates whether or not the device type is &apos;tablet&apos;.
     */
    tablet?: boolean;
    /**
     * Specifies an array with the major and minor versions of the device platform.
     */
    version?: Array<number>;
  };
  /**
    * 
    */
   export const devices: DevicesObject;
  /**
   * An object that serves as a namespace for the methods and events specifying information on the current device.
   */
  export class DevicesObject {
    constructor(options?: { window?: Window });
    /**
     * Gets information on the current device.
     */
    current(): Device;
    /**
     * Overrides actual device information to force the application to operate as if it was running on a specified device.
     */
    current(deviceName: string | Device): void;
    /**
     * Detaches all event handlers from a single event.
     */
    off(eventName: DevExpress.core.EventName): this;
    /**
     * Detaches a particular event handler from a single event.
     */
    off(eventName: DevExpress.core.EventName, eventHandler: Function): this;
    /**
     * Subscribes to an event.
     */
    on(eventName: DevExpress.core.EventName, eventHandler: Function): this;
    /**
     * Subscribes to events.
     */
    on(events: { [key in DevExpress.core.EventName]?: Function }): this;
    /**
     * Returns the current device orientation.
     */
    orientation(): 'portrait' | 'landscape' | undefined;
    /**
     * Returns real information about the current device regardless of the value passed to the DevExpress.devices.current(deviceName) method.
     */
    real(): Device;
    isSimulator(): boolean;
  }
  /**
   * A base class for all components.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export class DOMComponent<
    TProperties = DevExpress.DOMComponent.Properties
  > extends Component<TProperties> {
    _templateManager: DevExpress.core.TemplateManager;

    _cancelOptionChange?: string;

    constructor(
      element: DevExpress.core.UserDefinedElement,
      options?: TProperties
    );

    /**
     * Gets the instance of a UI component found using its DOM node.
     */
    static getInstance(
      element: DevExpress.core.UserDefinedElement
    ): DOMComponent<DevExpress.DOMComponent.Properties>;

    /**
     * Specifies the device-dependent default configuration properties for this component.
     */
    static defaultOptions<TProperties = DevExpress.DOMComponent.Properties>(
      rule: DevExpress.core.DefaultOptionsRule<TProperties>
    ): void;

    /**
     * Disposes of all the resources allocated to the widget instance.
     */
    dispose(): void;
    /**
     * Gets the root UI component element.
     */
    element(): DevExpress.core.DxElement;

    $element(): DevExpress.core.UserDefinedElement;
    _getTemplate(template: unknown): DevExpress.core.FunctionTemplate;
    _invalidate(): void;
    _refresh(): void;
    _notifyOptionChanged(
      fullName: string,
      value: unknown,
      previousValue: unknown
    ): void;
    _createElement(element: HTMLElement): void;
  }
  module DOMComponent {
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    interface DOMComponentInstance extends DOMComponent<Properties> {}
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    type OptionChangedEventInfo<TComponent> =
      DevExpress.events.EventInfo<TComponent> &
        DevExpress.events.ChangedOptionInfo;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    type Properties = DOMComponentOptions<DOMComponentInstance>;
  }

  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface DOMComponentOptions<TComponent>
    extends ComponentOptions<
      DevExpress.events.EventInfo<TComponent>,
      DevExpress.events.InitializedEventInfo<TComponent>,
      DevExpress.DOMComponent.OptionChangedEventInfo<TComponent>
    > {
    /**
     * 
     */
    bindingOptions?: { [key: string]: any };
    /**
     * Specifies the global attributes to be attached to the UI component&apos;s container element.
     */
    elementAttr?: { [key: string]: any };
    /**
     * Specifies the UI component&apos;s height.
     */
    height?: number | string | (() => number | string);
    /**
     * A function that is executed before the UI component is disposed of.
     */
    onDisposing?: (e: DevExpress.events.EventInfo<TComponent>) => void;
    /**
     * A function that is executed after a UI component property is changed.
     */
    onOptionChanged?: (
      e: DevExpress.DOMComponent.OptionChangedEventInfo<TComponent>
    ) => void;
    /**
     * Switches the UI component to a right-to-left representation.
     */
    rtlEnabled?: boolean;
    /**
     * Specifies the UI component&apos;s width.
     */
    width?: number | string | (() => number | string);
  }
  /**
   * A time zone object.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxSchedulerTimeZone {
    /**
     * A time zone text string from the IANA database.
     */
    id: string;
    /**
     * A GMT offset.
     */
    offset: number;
    /**
     * A time zone in the following format: `(GMT ±[hh]:[mm]) [id]`.
     */
    title: string;
  }
  /**
   * The EndpointSelector is an object for managing OData endpoints in your application.
   */
  export class EndpointSelector {
    constructor(options: any);
    /**
     * Gets an endpoint with a specific key.
     */
    urlFor(key: string): string;
  }
  /**
   * Configures the load panel.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface ExportLoadPanel {
    /**
     * Specifies whether the load panel is enabled.
     */
    enabled?: boolean;
    /**
     * Specifies text displayed on the load panel.
     */
    text?: string;
    /**
     * Specifies the width of the load panel in pixels.
     */
    width?: number;
    /**
     * Specifies the height of the load panel in pixels.
     */
    height?: number;
    /**
     * Specifies whether to show the loading indicator.
     */
    showIndicator?: boolean;
    /**
     * Specifies a URL pointing to an image to be used as a loading indicator.
     */
    indicatorSrc?: string;
    /**
     * Specifies whether to show the pane of the load panel.
     */
    showPane?: boolean;
    /**
     * Specifies whether to shade the UI component when the load panel is shown.
     */
    shading?: boolean;
    /**
     * Specifies the shading color. Applies only if shading is true.
     */
    shadingColor?: string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  type ExternalFormat = never;
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface FormatObject {
    /**
     * Specifies a 3-letter ISO 4217 code for currency. Applies only if the type is &apos;currency&apos;.
     */
    currency?: string;
    /**
     * 
     */
    useCurrencyAccountingStyle?: boolean;
    /**
     * A function that converts numeric or date-time values to a string.
     */
    formatter?: (value: number | Date) => string;
    /**
     * Parses string values into numeric or date-time values. Should be used with formatter or one of the predefined formats.
     */
    parser?: (value: string) => number | Date;
    /**
     * Specifies a precision for values of numeric or currency format types.
     */
    precision?: number;
    /**
     * Specifies a predefined format. Does not apply if you have specified the formatter function.
     */
    type?: DevExpress.common.Format | string;
  }
  /**
   * An object that serves as a namespace for the methods that are used to animate UI elements.
   */
  export const fx: {
    /**
     * Animates an element.
     */
    animate(
      element: Element,
      config: AnimationConfig
    ): DevExpress.core.utils.DxPromise<void>;

    /**
     * Checks whether an element is being animated.
     */
    isAnimating(element: Element): boolean;

    /**
     * Stops an element&apos;s animation.
     */
    stop(element: Element, jumpToEnd: boolean): void;
  };
  /**
   * Specifies settings that affect all DevExtreme UI components.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface globalConfig {
    /**
     * A decimal separator. No longer applies.
     * @deprecated 
     */
    decimalSeparator?: string;
    /**
     * The default currency. Accepts a 3-letter ISO 4217 code.
     */
    defaultCurrency?: string;
    /**
     * 
     */
    defaultUseCurrencyAccountingStyle?: boolean;
    /**
     * Specifies how editors&apos; text fields are styled in your application.
     */
    editorStylingMode?: DevExpress.common.EditorStyle;
    /**
     * Configures a Floating Action Button (FAB) that emits a stack of related actions (speed dial).
     */
    floatingActionButtonConfig?: {
      /**
       * Specifies the icon the FAB displays when the speed dial is opened.
       */
      closeIcon?: string;
      /**
       * Specifies the direction in which to open the speed dial menu.
       */
      direction?: DevExpress.core.FloatingActionButtonDirection;
      /**
       * Specifies the icon the FAB displays when the speed dial is closed.
       */
      icon?: string;
      /**
       * Specifies the text label displayed inside the FAB.
       */
      label?: string;
      /**
       * Limits the number of speed dial actions.
       */
      maxSpeedDialActionCount?: number;
      /**
       * Positions the FAB on the screen.
       */
      position?:
        | DevExpress.common.PositionAlignment
        | PositionConfig
        | Function;
      /**
       * If true, the background should be shaded when the speed dial menu is open.
       */
      shading?: boolean;
    };
    /**
     * Specifies whether dates are parsed and serialized according to the ISO 8601 standard in all browsers.
     */
    forceIsoDateParsing?: boolean;
    /**
     * Specifies whether to convert string values to lowercase in filter and search requests to OData services. Applies to the following operations: &apos;startswith&apos;, &apos;endswith&apos;, &apos;contains&apos;, and &apos;notcontains&apos;.
     */
    oDataFilterToLower?: boolean;
    /**
     * Specifies whether the UI components support a right-to-left representation. Available for individual UI components as well.
     */
    rtlEnabled?: boolean;
    /**
     * The decimal separator that is used when submitting a value to the server.
     */
    serverDecimalSeparator?: string;
    /**
     * A group separator. No longer applies.
     * @deprecated 
     */
    thousandsSeparator?: string;
    /**
     * 
     */
    useLegacyStoreResult?: boolean;
    /**
     * 
     */
    useLegacyVisibleIndex?: boolean;
  }
  /**
   * Hides the last displayed overlay UI component.
   */
  export function hideTopOverlay(): boolean;
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface PdfExportGanttFont {
    /**
     * 
     */
    fontObject: object;
    /**
     * 
     */
    name: string;
    /**
     * 
     */
    style?: string;
    /**
     * 
     */
    weight?: string | number;
  }
  /**
   * Configures the position of an overlay element.
   */
  export interface PositionConfig {
    /**
     * Specifies the target element&apos;s side or corner where the overlay element should be positioned.
     */
    at?:
      | DevExpress.common.PositionAlignment
      | {
          /**
           * Specifies a position in the horizontal direction (for left, right, or center alignment).
           */
          x?: DevExpress.common.HorizontalAlignment;
          /**
           * Specifies a position in the vertical direction (for top, bottom, or center alignment).
           */
          y?: DevExpress.common.VerticalAlignment;
        };
    /**
     * A boundary element in which the overlay element must be positioned.
     */
    boundary?: string | DevExpress.core.UserDefinedElement | Window;
    /**
     * Specifies the offset of boundaries from the boundary element.
     */
    boundaryOffset?:
      | string
      | {
          /**
           * Specifies a horizontal offset.
           */
          x?: number;
          /**
           * Specifies a vertical offset.
           */
          y?: number;
        };
    /**
     * Specifies how to resolve collisions - when the overlay element exceeds the boundary element.
     */
    collision?:
      | DevExpress.animation.CollisionResolutionCombination
      | {
          /**
           * Specifies how to resolve horizontal collisions.
           */
          x?: DevExpress.animation.CollisionResolution;
          /**
           * Specifies how to resolve vertical collisions.
           */
          y?: DevExpress.animation.CollisionResolution;
        };
    /**
     * Specifies the overlay element&apos;s side or corner to align with a target element.
     */
    my?:
      | DevExpress.common.PositionAlignment
      | {
          /**
           * Specifies a position in the horizontal direction (for left, right, or center alignment).
           */
          x?: DevExpress.common.HorizontalAlignment;
          /**
           * Specifies a position in the vertical direction (for top, bottom, or center alignment).
           */
          y?: DevExpress.common.VerticalAlignment;
        };
    /**
     * The target element relative to which the overlay element should be positioned.
     */
    of?: string | DevExpress.core.UserDefinedElement | Window;
    /**
     * Specifies the overlay element&apos;s offset from a specified position.
     */
    offset?:
      | string
      | {
          /**
           * Specifies a horizontal offset.
           */
          x?: number;
          /**
           * Specifies a vertical offset.
           */
          y?: number;
        };
  }
  /**
   * Registers a new component in the DevExpress.ui namespace.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export function registerComponent<TComponent>(
    name: string,
    componentClass: DevExpress.core.ComponentFactory<TComponent>
  ): void;
  /**
   * Registers a new component in the specified namespace.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export function registerComponent<TComponent>(
    name: string,
    namespace: {
      [key: string]: DevExpress.core.ComponentFactory<DOMComponent>;
    },
    componentClass: DevExpress.core.ComponentFactory<TComponent>
  ): void;
  /**
   * Sets a supported template engine to use when using jQuery.
   */
  export function setTemplateEngine(templateEngineName: string): void;
  /**
   * Sets custom functions that compile and render templates.
   */
  export function setTemplateEngine(templateEngineOptions: {
    compile?: Function;
    render?: Function;
  }): void;
  /**
   * The manager that performs several specified animations at a time.
   */
  export class TransitionExecutor {
    /**
     * Registers the set of elements that should be animated as &apos;entering&apos; using the specified animation configuration.
     */
    enter(
      elements: DevExpress.core.UserDefinedElementsArray,
      animation: AnimationConfig | string
    ): void;
    /**
     * Registers a set of elements that should be animated as &apos;leaving&apos; using the specified animation configuration.
     */
    leave(
      elements: DevExpress.core.UserDefinedElementsArray,
      animation: AnimationConfig | string
    ): void;
    /**
     * Deletes all the animations registered in the Transition Executor by using the enter(elements, animation) and leave(elements, animation) methods.
     */
    reset(): void;
    /**
     * Starts all the animations registered using the enter(elements, animation) and leave(elements, animation) methods beforehand.
     */
    start(): DevExpress.core.utils.DxPromise<void>;
    /**
     * Stops all started animations.
     */
    stop(): void;
  }
  /**
   * An object that serves as a namespace for the methods required to perform validation.
   */
  export class validationEngine {
    /**
     * Gets the default validation group.
     */
    static getGroupConfig(): any;
    /**
     * Gets a validation group with a specific key.
     */
    static getGroupConfig(group: string | any): any;
    /**
     * Registers all the Validator objects extending fields of the specified ViewModel.
     */
    static registerModelForValidation(model: any): void;
    /**
     * Resets the values and validation result of the editors that belong to the default validation group.
     */
    static resetGroup(): void;
    /**
     * Resets the values and validation result of the editors that belong to the specified validation group.
     */
    static resetGroup(group: string | any): void;
    /**
     * Unregisters all the Validator objects extending fields of the specified ViewModel.
     */
    static unregisterModelForValidation(model: any): void;
    /**
     * Validates editors from the default validation group.
     */
    static validateGroup(): DevExpress.ui.dxValidationGroup.ValidationResult;
    /**
     * Validates editors from a specific validation group.
     */
    static validateGroup(
      group: string | any
    ): DevExpress.ui.dxValidationGroup.ValidationResult;
    /**
     * Validates a view model.
     */
    static validateModel(model: any): any;
  }
}
declare module DevExpress.animation {
  /**
   * @deprecated Use the AnimationConfig type instead
   */
  export type animationConfig = AnimationConfig;
  /**
   * Describes an animation state.
   */
  export type AnimationState =
    | string
    | number
    | {
        /**
         * Element opacity.
         */
        opacity: number;
      }
    | {
        /**
         * A value that controls element size.
         */
        scale: number;
      }
    | {
        /**
         * Element position.
         */
        position: PositionConfig;
      }
    | {
        /**
         * A shortcut that positions the element&apos;s left side relative to the parent element.
         */
        left: number;
      }
    | {
        /**
         * A shortcut that positions the element&apos;s top side relative to the parent element.
         */
        top: number;
      };
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export type AnimationType =
    | 'css'
    | 'fade'
    | 'fadeIn'
    | 'fadeOut'
    | 'pop'
    | 'slide'
    | 'slideIn'
    | 'slideOut';
  export type CollisionResolution = 'fit' | 'flip' | 'flipfit' | 'none';
  export type CollisionResolutionCombination =
    | 'fit'
    | 'fit flip'
    | 'fit flipfit'
    | 'fit none'
    | 'flip'
    | 'flip fit'
    | 'flip none'
    | 'flipfit'
    | 'flipfit fit'
    | 'flipfit none'
    | 'none'
    | 'none fit'
    | 'none flip'
    | 'none flipfit';
  /**
   * @deprecated Use the PositionConfig type instead
   */
  export interface positionConfig extends PositionConfig {}
}
declare module DevExpress.common {
  export type ApplyValueMode = 'instantly' | 'useButtons';
  export type ButtonStyle = 'text' | 'outlined' | 'contained';
  export type ButtonType = 'back' | 'danger' | 'default' | 'normal' | 'success';
  export type DataStructure = 'plain' | 'tree';
  export type DataType =
    | 'string'
    | 'number'
    | 'date'
    | 'boolean'
    | 'object'
    | 'datetime';
  export type Direction = 'bottom' | 'left' | 'right' | 'top';
  export type DragDirection = 'both' | 'horizontal' | 'vertical';
  export type DragHighlight = 'push' | 'indicate';
  export type EditorStyle = 'outlined' | 'underlined' | 'filled';
  export type ExportFormat = 'GIF' | 'JPEG' | 'PDF' | 'PNG' | 'SVG';
  export type FieldChooserLayout = 0 | 1 | 2;
  export type FirstDayOfWeek = 0 | 1 | 2 | 3 | 4 | 5 | 6;
  export type Format =
    | 'billions'
    | 'currency'
    | 'day'
    | 'decimal'
    | 'exponential'
    | 'fixedPoint'
    | 'largeNumber'
    | 'longDate'
    | 'longTime'
    | 'millions'
    | 'millisecond'
    | 'month'
    | 'monthAndDay'
    | 'monthAndYear'
    | 'percent'
    | 'quarter'
    | 'quarterAndYear'
    | 'shortDate'
    | 'shortTime'
    | 'thousands'
    | 'trillions'
    | 'year'
    | 'dayOfWeek'
    | 'hour'
    | 'longDateLongTime'
    | 'minute'
    | 'second'
    | 'shortDateShortTime';
  export type HorizontalAlignment = 'center' | 'left' | 'right';
  export type HorizontalEdge = 'left' | 'right';
  export type LabelMode = 'static' | 'floating' | 'hidden';
  export type MaskMode = 'always' | 'onFocus';
  export type Mode = 'auto';

  export type Orientation = 'horizontal' | 'vertical';
  export type PageLoadMode = 'nextButton' | 'scrollBottom';
  export type PageOrientation = 'portrait' | 'landscape';
  export type Position = 'bottom' | 'left' | 'right' | 'top';
  export type PositionAlignment =
    | 'bottom'
    | 'center'
    | 'left'
    | 'left bottom'
    | 'left top'
    | 'right'
    | 'right bottom'
    | 'right top'
    | 'top';
  export type ScrollbarMode = 'always' | 'never' | 'onHover' | 'onScroll';
  export type ScrollDirection = 'both' | 'horizontal' | 'vertical';
  export type ScrollMode = 'standard' | 'virtual';
  export type SearchMode = 'contains' | 'startswith' | 'equals';
  export type SelectAllMode = 'allPages' | 'page';
  export type SimplifiedSearchMode = 'contains' | 'startswith';
  export type SingleMultipleAllOrNone = 'single' | 'multiple' | 'all' | 'none';
  export type SingleMultipleOrNone = 'single' | 'multiple' | 'none';
  export type SingleOrMultiple = 'single' | 'multiple';
  export type SingleOrNone = 'single' | 'none';
  export type SlideOutMenuPosition = 'inverted' | 'normal';
  export type SortOrder = 'asc' | 'desc';
  export type StoreType = 'array' | 'local' | 'odata';
  export type SubmenuShowMode = 'onClick' | 'onHover';
  export type TextBoxPredefinedButton = 'clear';

  export type TextEditorButtonLocation = 'after' | 'before';
  export type ToolbarItemComponent =
    | 'dxAutocomplete'
    | 'dxButton'
    | 'dxCheckBox'
    | 'dxDateBox'
    | 'dxMenu'
    | 'dxSelectBox'
    | 'dxTabs'
    | 'dxTextBox'
    | 'dxButtonGroup'
    | 'dxDropDownButton';
  export type ToolbarItemLocation = 'after' | 'before' | 'center';
  export type TooltipShowMode = 'always' | 'onHover';
  export type ValidationMessageMode = 'always' | 'auto';
  export type ValidationStatus = 'valid' | 'invalid' | 'pending';
  export type VerticalAlignment = 'bottom' | 'center' | 'top';
  export type VerticalEdge = 'bottom' | 'top';
}
declare module DevExpress.common.charts {
  export type AnimationEaseMode = 'easeOutCubic' | 'linear';
  export type AnnotationType = 'text' | 'image' | 'custom';
  export type ApplyChangesMode = 'instantly' | 'onDemand';
  export type ApplyFilterMode = 'auto' | 'onClick';
  export type ArgumentAxisHoverMode = 'allArgumentPoints' | 'none';
  export type AxisScaleType = 'continuous' | 'discrete' | 'logarithmic';
  export type ChartsAxisLabelOverlap = 'rotate' | 'stagger' | 'none' | 'hide';
  export type ChartsDataType = 'datetime' | 'numeric' | 'string';
  export type ChartsLabelOverlap = 'hide' | 'none' | 'stack';
  export type ColumnChooserMode = 'dragAndDrop' | 'select';
  export type DashStyle = 'dash' | 'dot' | 'longDash' | 'solid';
  export type DataChangeType = 'insert' | 'update' | 'remove';
  export type DataRenderMode = 'standard' | 'virtual';
  export type DiscreteAxisDivisionMode = 'betweenLabels' | 'crossLabels';
  export type EnterKeyAction = 'startEdit' | 'moveFocus';
  export type EnterKeyDirection = 'none' | 'column' | 'row';
  export type FilterOperation =
    | '='
    | '<>'
    | '<'
    | '<='
    | '>'
    | '>='
    | 'contains'
    | 'endswith'
    | 'isblank'
    | 'isnotblank'
    | 'notcontains'
    | 'startswith'
    | 'between'
    | 'anyof'
    | 'noneof';
  export type FilterType = 'exclude' | 'include';
  export type GridsEditMode = 'batch' | 'cell' | 'row' | 'form' | 'popup';
  export type GridsEditRefreshMode = 'full' | 'reshape' | 'repaint';
  export type GroupExpandMode = 'buttonClick' | 'rowClick';
  export type HatchDirection = 'left' | 'none' | 'right';
  export type LabelOverlap = 'hide' | 'none';
  export type LabelPosition = 'columns' | 'inside' | 'outside';
  export type LegendHoverMode = 'excludePoints' | 'includePoints' | 'none';
  export type LegendMarkerState = 'normal' | 'hovered' | 'selected';
  export type NewRowPosition =
    | 'first'
    | 'last'
    | 'pageBottom'
    | 'pageTop'
    | 'viewportBottom'
    | 'viewportTop';
  export type PagerDisplayMode = 'adaptive' | 'compact' | 'full';
  export type PagerPageSize = 'all' | 'auto';
  export type Palette =
    | 'Bright'
    | 'Harmony Light'
    | 'Ocean'
    | 'Pastel'
    | 'Soft'
    | 'Soft Pastel'
    | 'Vintage'
    | 'Violet'
    | 'Carmine'
    | 'Dark Moon'
    | 'Dark Violet'
    | 'Green Mist'
    | 'Soft Blue'
    | 'Material'
    | 'Office';
  export type PaletteColorSet = 'simpleSet' | 'indicatingSet' | 'gradientSet';
  export type PaletteExtensionMode = 'alternate' | 'blend' | 'extrapolate';
  export type PointInteractionMode =
    | 'allArgumentPoints'
    | 'allSeriesPoints'
    | 'none'
    | 'onlyPoint';
  export type PointSymbol =
    | 'circle'
    | 'cross'
    | 'polygon'
    | 'square'
    | 'triangle'
    | 'triangleDown'
    | 'triangleUp';
  export type RelativePosition = 'inside' | 'outside';
  export type ScaleBreakLineStyle = 'straight' | 'waved';
  export type SelectedFilterOperation =
    | '<'
    | '<='
    | '<>'
    | '='
    | '>'
    | '>='
    | 'between'
    | 'contains'
    | 'endswith'
    | 'notcontains'
    | 'startswith';
  export type SelectionColumnDisplayMode =
    | 'always'
    | 'none'
    | 'onClick'
    | 'onLongTap';
  export type SeriesHoverMode =
    | 'allArgumentPoints'
    | 'allSeriesPoints'
    | 'excludePoints'
    | 'includePoints'
    | 'nearestPoint'
    | 'none'
    | 'onlyPoint';
  export type SeriesSelectionMode =
    | 'allArgumentPoints'
    | 'allSeriesPoints'
    | 'excludePoints'
    | 'includePoints'
    | 'none'
    | 'onlyPoint';
  export type StartEditAction = 'click' | 'dblClick';
  export type StateStoreType = 'custom' | 'localStorage' | 'sessionStorage';
  export type SummaryType = 'avg' | 'count' | 'custom' | 'max' | 'min' | 'sum';
  export type TextOverflow = 'ellipsis' | 'hide' | 'none';
  export type Theme =
    | 'generic.dark'
    | 'generic.light'
    | 'generic.contrast'
    | 'generic.carmine'
    | 'generic.darkmoon'
    | 'generic.darkviolet'
    | 'generic.greenmist'
    | 'generic.softblue'
    | 'material.blue.light'
    | 'material.lime.light'
    | 'material.orange.light'
    | 'material.purple.light'
    | 'material.teal.light';
  export type TimeInterval =
    | 'day'
    | 'hour'
    | 'millisecond'
    | 'minute'
    | 'month'
    | 'quarter'
    | 'second'
    | 'week'
    | 'year';
  export type ValueErrorBarDisplayMode = 'auto' | 'high' | 'low' | 'none';
  export type ValueErrorBarType =
    | 'fixed'
    | 'percent'
    | 'stdDeviation'
    | 'stdError'
    | 'variance';
  export type VisualRangeUpdateMode = 'auto' | 'keep' | 'reset' | 'shift';
  export type WordWrap = 'normal' | 'breakWord' | 'none';
  export type ZoomPanAction = 'zoom' | 'pan';
}
declare module DevExpress.common.grids {
  export interface ColumnChooser {
    /**
     * Specifies whether searching is enabled in the column chooser.
     */
    allowSearch?: boolean;
    /**
     * Specifies text displayed by the column chooser when it is empty.
     */
    emptyPanelText?: string;
    /**
     * Specifies whether a user can open the column chooser.
     */
    enabled?: boolean;
    /**
     * Specifies the height of the column chooser.
     */
    height?: number;
    /**
     * Specifies how a user manages columns using the column chooser.
     */
    mode?: DevExpress.common.charts.ColumnChooserMode;
    /**
     * Specifies a delay in milliseconds between when a user finishes typing in the column chooser&apos;s search panel, and when the search is executed.
     */
    searchTimeout?: number;
    /**
     * Specifies the title of the column chooser.
     */
    title?: string;
    /**
     * Specifies the width of the column chooser.
     */
    width?: number;
    /**
     * Specifies the sort order of column headers.
     */
    sortOrder?: SortOrder;
  }
  export interface ColumnCustomizeTextArg {
    value?: string | number | Date;
    valueText?: string;
    target?: string;
    groupInterval?: string | number;
  }
  export interface ColumnFixing {
    /**
     * Enables column fixing.
     */
    enabled?: boolean;
    /**
     * Contains properties that specify texts for column fixing commands in the context menu of a column header.
     */
    texts?: ColumnFixingTexts;
  }
  export interface ColumnFixingTexts {
    /**
     * Specifies text for the context menu item that fixes a column.
     */
    fix?: string;
    /**
     * Specifies text for the context menu subitem that fixes a column to the left edge of the UI component.
     */
    leftPosition?: string;
    /**
     * Specifies text for the context menu subitem that fixes a column to the right edge of the UI component.
     */
    rightPosition?: string;
    /**
     * Specifies text for the context menu item that unfixes a column.
     */
    unfix?: string;
  }
  export interface ColumnHeaderFilter {
    /**
     * Specifies whether searching is enabled in the header filter.
     */
    allowSearch?: boolean;
    /**
     * Specifies the header filter&apos;s data source.
     */
    dataSource?:
      | DevExpress.ui.dxFilterBuilder.FilterLookupDataSource<any>
      | ((options: {
          component?: any;
          dataSource?: DevExpress.data.DataSource.Options | null;
        }) => void);
    /**
     * Specifies how the header filter combines values into groups. Does not apply if you specify a custom header filter data source.
     */
    groupInterval?: DevExpress.ui.dxDataGrid.HeaderFilterGroupInterval | number;
    /**
     * Specifies the height of the popup menu containing filtering values.
     */
    height?: number;
    /**
     * Specifies a comparison operation used to search header filter values.
     */
    searchMode?: SearchMode;
    /**
     * Specifies the width of the popup menu containing filtering values.
     */
    width?: number;
  }
  export interface ColumnLookup {
    /**
     * Specifies whether to display the Clear button in lookup column cells while they are being edited.
     */
    allowClearing?: boolean;
    /**
     * Specifies the data source for the lookup column.
     */
    dataSource?:
      | DevExpress.ui.dxFilterBuilder.FilterLookupDataSource<any>
      | ((options: {
          data?: any;
          key?: any;
        }) => DevExpress.ui.dxFilterBuilder.FilterLookupDataSource<any>)
      | null;
    /**
     * Specifies the data source field whose values must be displayed.
     */
    displayExpr?: string | ((data: any) => string);
    /**
     * Specifies the data field whose values should be replaced with values from the displayExpr field.
     */
    valueExpr?: string;
    /**
     * 
     */
    calculateCellValue?: (rowData: any) => any;
  }
  /**
   * 
   */
  export interface DataChange<TRowData = any, TKey = any> {
    /**
     * The key of the row being updated or removed.
     */
    key: TKey;
    /**
     * Data change type.
     */
    type: DevExpress.common.charts.DataChangeType;
    /**
     * An object with updated row fields.
     */
    data: DevExpress.core.DeepPartial<TRowData>;
    /**
     * A key that identifies a record after which a new record should be inserted. Applies only if the type is &apos;insert&apos;.
     */
    insertAfterKey?: TKey;
    /**
     * A key that identifies the record before which a new record should be inserted. Applies only if the type is &apos;insert&apos;.
     */
    insertBeforeKey?: TKey;
  }
  export interface FilterPanelTexts {
    /**
     * The text of the &apos;Clear&apos; link.
     */
    clearFilter?: string;
    /**
     * The text of the &apos;Create Filter&apos; link.
     */
    createFilter?: string;
    /**
     * The hint of the checkbox that applies the filter.
     */
    filterEnabledHint?: string;
  }
  export interface FilterRow {
    /**
     * Specifies when to apply a filter.
     */
    applyFilter?: DevExpress.common.charts.ApplyFilterMode;
    /**
     * Specifies text for a hint that appears when a user pauses on a button that applies the filter.
     */
    applyFilterText?: string;
    /**
     * Specifies a placeholder for the editor that specifies the end of a range when a user selects the &apos;between&apos; filter operation.
     */
    betweenEndText?: string;
    /**
     * Specifies a placeholder for the editor that specifies the start of a range when a user selects the &apos;between&apos; filter operation.
     */
    betweenStartText?: string;
    /**
     * Specifies descriptions for filter operations on the filter list.
     */
    operationDescriptions?: FilterRowOperationDescriptions;
    /**
     * Specifies text for the reset operation on the filter list.
     */
    resetOperationText?: string;
    /**
     * Specifies text for the item that clears the applied filter. Used only when a cell of the filter row contains a select box.
     */
    showAllText?: string;
    /**
     * Specifies whether icons that open the filter lists are visible.
     */
    showOperationChooser?: boolean;
    /**
     * Specifies whether the filter row is visible.
     */
    visible?: boolean;
  }
  export interface FilterRowOperationDescriptions {
    /**
     * A description for the &apos;between&apos; operation.
     */
    between?: string;
    /**
     * A description for the &apos;contains&apos; operation.
     */
    contains?: string;
    /**
     * A description for the &apos;endswith&apos; operation.
     */
    endsWith?: string;
    /**
     * A description for the &apos;=&apos; operation.
     */
    equal?: string;
    /**
     * A description for the &apos;&gt;&apos; operation.
     */
    greaterThan?: string;
    /**
     * A description for the &apos;&gt;=&apos; operation.
     */
    greaterThanOrEqual?: string;
    /**
     * A description for the &apos;&lt;&apos; operation.
     */
    lessThan?: string;
    /**
     * A description for the &apos;&lt;=&apos; operation.
     */
    lessThanOrEqual?: string;
    /**
     * A description for the &apos;notcontains&apos; operation.
     */
    notContains?: string;
    /**
     * A description for the &apos;&lt;&gt;&apos; operation.
     */
    notEqual?: string;
    /**
     * A description for the &apos;startswith&apos; operation.
     */
    startsWith?: string;
  }
  export interface HeaderFilter {
    /**
     * Specifies whether searching is enabled in the header filter.
     */
    allowSearch?: boolean;
    /**
     * Specifies the height of the popup menu that contains values for filtering.
     */
    height?: number;
    /**
     * Specifies a delay in milliseconds between when a user finishes typing in the header filter&apos;s search panel, and when the search is executed.
     */
    searchTimeout?: number;
    /**
     * Contains properties that specify text for various elements of the popup menu.
     */
    texts?: HeaderFilterTexts;
    /**
     * Specifies whether header filter icons are visible.
     */
    visible?: boolean;
    /**
     * Specifies the width of the popup menu that contains values for filtering.
     */
    width?: number;
  }
  export interface HeaderFilterTexts {
    /**
     * Specifies text for the button that closes the popup menu without applying a filter.
     */
    cancel?: string;
    /**
     * Specifies a name for the item that represents empty values in the popup menu.
     */
    emptyValue?: string;
    /**
     * Specifies text for the button that applies the specified filter.
     */
    ok?: string;
  }
  export interface KeyboardNavigation {
    /**
     * Specifies whether users can enter a new cell value on a key press. Applies if editing.mode is &apos;cell&apos; or &apos;batch&apos;.
     */
    editOnKeyPress?: boolean;
    /**
     * Enables keyboard navigation.
     */
    enabled?: boolean;
    /**
     * Specifies whether the Enter key switches the cell or row to the edit state or moves focus in the enterKeyDirection. Applies for all edit modes, except &apos;popup&apos;.
     */
    enterKeyAction?: DevExpress.common.charts.EnterKeyAction;
    /**
     * Specifies the direction in which to move focus when a user presses Enter. Applies if editing.mode is &apos;cell&apos; or &apos;batch&apos;.
     */
    enterKeyDirection?: DevExpress.common.charts.EnterKeyDirection;
  }
  export interface LoadPanel {
    /**
     * Enables displaying the load panel automatically.
     */
    enabled?: boolean | Mode;
    /**
     * Specifies the height of the load panel in pixels.
     */
    height?: number;
    /**
     * Specifies a URL pointing to an image to be used as a loading indicator.
     */
    indicatorSrc?: string;
    /**
     * Specifies whether to shade the UI component when the load panel is shown.
     */
    shading?: boolean;
    /**
     * Specifies the shading color. Applies only if shading is true.
     */
    shadingColor?: string;
    /**
     * Specifies whether to show the loading indicator.
     */
    showIndicator?: boolean;
    /**
     * Specifies whether to show the pane of the load panel.
     */
    showPane?: boolean;
    /**
     * Specifies text displayed on the load panel.
     */
    text?: string;
    /**
     * Specifies the width of the load panel in pixels.
     */
    width?: number;
  }
  export interface Pager {
    /**
     * Specifies the available page sizes in the page size selector.
     */
    allowedPageSizes?:
      | Array<number | DevExpress.common.charts.PagerPageSize>
      | Mode;
    /**
     * Specifies the pager&apos;s display mode.
     */
    displayMode?: DevExpress.common.charts.PagerDisplayMode;
    /**
     * Specifies the page information text.
     */
    infoText?: string;
    /**
     * Specifies whether to show the page information.
     */
    showInfo?: boolean;
    /**
     * Specifies whether to show navigation buttons.
     */
    showNavigationButtons?: boolean;
    /**
     * Specifies whether to show the page size selector.
     */
    showPageSizeSelector?: boolean;
    /**
     * Specifies whether the pager is visible.
     */
    visible?: boolean | Mode;
    /**
     * 
     */
    label?: string;
  }
  export interface SearchPanel {
    /**
     * Notifies the UI component whether search is case-sensitive to ensure that search results are highlighted correctly. Applies only if highlightSearchText is true.
     */
    highlightCaseSensitive?: boolean;
    /**
     * Specifies whether found substrings should be highlighted.
     */
    highlightSearchText?: boolean;
    /**
     * Specifies a placeholder for the search panel.
     */
    placeholder?: string;
    /**
     * Specifies whether the UI component should search against all columns or only visible ones.
     */
    searchVisibleColumnsOnly?: boolean;
    /**
     * Sets a search string for the search panel.
     */
    text?: string;
    /**
     * Specifies whether the search panel is visible or not.
     */
    visible?: boolean;
    /**
     * Specifies the width of the search panel in pixels.
     */
    width?: number;
  }
  export interface Sorting {
    /**
     * Specifies text for the context menu item that sets an ascending sort order in a column.
     */
    ascendingText?: string;
    /**
     * Specifies text for the context menu item that clears sorting settings for a column.
     */
    clearText?: string;
    /**
     * Specifies text for the context menu item that sets a descending sort order in a column.
     */
    descendingText?: string;
    /**
     * Specifies the sorting mode.
     */
    mode?: SingleMultipleOrNone;
    /**
     * Specifies whether to display sort indexes in column headers. Applies only when sorting.mode is &apos;multiple&apos; and data is sorted by two or more columns.
     */
    showSortIndexes?: boolean;
  }
  export interface StateStoring {
    /**
     * Specifies a function that is executed on state loading. Applies only if the type is &apos;custom&apos;.
     */
    customLoad?: () => PromiseLike<any>;
    /**
     * Specifies a function that is executed on state saving. Applies only if the type is &apos;custom&apos;.
     */
    customSave?: (gridState: any) => any;
    /**
     * Enables state storing.
     */
    enabled?: boolean;
    /**
     * Specifies the delay in milliseconds between when a user makes a change and when this change is saved.
     */
    savingTimeout?: number;
    /**
     * Specifies the key for storing the UI component state.
     */
    storageKey?: string;
    /**
     * Specifies the type of storage where the state is saved.
     */
    type?: DevExpress.common.charts.StateStoreType;
  }
}
declare module DevExpress.core {
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  type ComponentFactory<TComponent> = {
    new (
      element: UserDefinedElement,
      options?: Record<string, unknown>
    ): TComponent;
    getInstance(element: UserDefinedElement): TComponent;
  };
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface Condition {}
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  interface Condition extends JQueryEventObject {}
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export type DeepPartial<T> = T extends Scalar
    ? T
    : {
        [P in keyof T]?: DeepPartial<T[P]>;
      };
  export type DefaultOptionsRule<T> = {
    device?: Device | Device[] | ((device: Device) => boolean);
    options: DeepPartial<T>;
  };
  /**
   * 
   * @deprecated 
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export type dxElement = DxElement<HTMLElement>;
  /**
   * 
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export type DxElement<T extends Element = HTMLElement> = {} extends Condition
    ? T
    : ElementWrapper<T>;
  /**
   * 
   * @deprecated 
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export type dxSVGElement = DxElement<SVGElement>;
  /**
   * A custom template&apos;s markup.
   */
  export type dxTemplate = Template;
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxTemplateOptions {
    /**
     * Specifies the name of the template.
     */
    name?: string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface ElementsArrayWrapper<T extends Element> {}
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  interface ElementsArrayWrapper<T extends Element> extends JQuery<T> {}
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface ElementWrapper<T extends Element> {}
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  interface ElementWrapper<T extends Element> extends JQuery<T> {}
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  type EventName = 'orientationChanged';
  export type FloatingActionButtonDirection = 'auto' | 'up' | 'down';
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export class FunctionTemplate {
    render(template: {
      container: unknown;
      model?: object;
      transclude?: boolean;
    }): DxElement;
  }

  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface PromiseType<T> {}
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  interface PromiseType<T> extends JQueryPromise<T> {}
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export type Scalar =
    | undefined
    | null
    | string
    | String
    | number
    | Number
    | bigint
    | BigInteger
    | boolean
    | Boolean
    | Date
    | Function
    | Symbol
    | Array<unknown>;

  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export type Skip<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;
  /**
   * A template notation used to specify templates for UI component elements.
   */
  export type template = string | Function | UserDefinedElement;

  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export class Template {
    constructor(options?: dxTemplateOptions);
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export class TemplateManager {
    anonymousTemplateName: string;
    addDefaultTemplates(templates: Record<string, unknown>): void;
  }
  /**
   * 
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export type UserDefinedElement<T extends Element = Element> =
    {} extends Condition ? T : ElementWrapper<T> | T;
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export type UserDefinedElementsArray = {} extends Condition
    ? Array<Element>
    : ElementsArrayWrapper<Element>;
}
declare module DevExpress.core.utils {
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export type DxExtendedPromise<T> = DxPromise<T> & {
    then<TResult1 = T, TResult2 = never>(
      onFulfilled?:
        | ((
            value: T,
            extraParameters?: any
          ) => TResult1 | PromiseLike<TResult1>)
        | undefined
        | null,
      onRejected?:
        | ((reason: any) => TResult2 | PromiseLike<TResult2>)
        | undefined
        | null
    ): PromiseLike<TResult1 | TResult2>;
  };
  /**
   * 
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export type DxPromise<T = void> = {} extends PromiseType<T>
    ? Promise<T>
    : PromiseType<T>;
}
declare module DevExpress.data {
  /**
   * Applies an array of changes to a source data array.
   */
  export function applyChanges(
    data: Array<any>,
    changes: Array<any>,
    options?: { keyExpr?: string | Array<string>; immutable?: boolean }
  ): Array<any>;
  /**
   * The ArrayStore is a store that provides an interface for loading and editing an in-memory array and handling related events.
   */
  export class ArrayStore<TItem = any, TKey = any> extends Store<TItem, TKey> {
    constructor(options?: DevExpress.data.ArrayStore.Options<TItem, TKey>);
    /**
     * Clears all the ArrayStore&apos;s associated data.
     */
    clear(): void;
    /**
     * Creates a Query for the underlying array.
     */
    createQuery(): Query;
  }
  module ArrayStore {
    export type Options<TItem = any, TKey = any> = ArrayStoreOptions<
      TItem,
      TKey
    >;
  }
  /**
   * @deprecated Use Options instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface ArrayStoreOptions<TItem = any, TKey = any>
    extends DevExpress.data.Store.Options<TItem, TKey> {
    /**
     * Specifies the store&apos;s associated array.
     */
    data?: Array<TItem>;
  }
  /**
   * Encodes a string or array of bytes in Base64.
   */
  export function base64_encode(input: string | Array<number>): string;
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  type BaseGroupDescriptor<T> = {
    selector: KeySelector<T>;
  };
  /**
   * The CustomStore enables you to implement custom data access logic for consuming data from any source.
   */
  export class CustomStore<TItem = any, TKey = any> extends Store<TItem, TKey> {
    constructor(options?: DevExpress.data.CustomStore.Options<TItem, TKey>);
    /**
     * Deletes data from the cache. Takes effect only if the cacheRawData property is true.
     */
    clearRawDataCache(): void;
  }
  module CustomStore {
    export type GroupItem<TItem = any> = {
      key: any | string | number;
      items: Array<TItem> | Array<GroupItem> | null;
      count?: number;
      summary?: Array<any>;
    };
    export type Options<TItem = any, TKey = any> = CustomStoreOptions<
      TItem,
      TKey
    >;
    export type ResolvedData<TItem = any> =
      | Object
      | Array<TItem>
      | Array<GroupItem>
      | {
          data: Array<TItem> | Array<GroupItem>;
          totalCount?: number;
          summary?: Array<any>;
          groupCount?: number;
        };
  }
  /**
   * @deprecated Use Options instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface CustomStoreOptions<TItem = any, TKey = any>
    extends DevExpress.data.Store.Options<TItem, TKey> {
    /**
     * Specifies a custom implementation of the byKey(key) method.
     */
    byKey?: (key: TKey) => PromiseLike<TItem>;
    /**
     * Specifies whether raw data should be saved in the cache. Applies only if loadMode is &apos;raw&apos;.
     */
    cacheRawData?: boolean;
    /**
     * Specifies a custom implementation of the insert(values) method.
     */
    insert?: (values: TItem) => PromiseLike<TItem>;
    /**
     * Specifies a custom implementation of the load(options) method.
     */
    load: (
      options: LoadOptions<TItem>
    ) =>
      | DevExpress.core.utils.DxPromise<
          DevExpress.data.CustomStore.ResolvedData<TItem>
        >
      | PromiseLike<DevExpress.data.CustomStore.ResolvedData<TItem>>
      | Array<DevExpress.data.CustomStore.GroupItem>
      | Array<TItem>;
    /**
     * Specifies how data returned by the load function is treated.
     */
    loadMode?: 'processed' | 'raw';
    /**
     * Specifies a custom implementation of the remove(key) method.
     */
    remove?: (key: TKey) => PromiseLike<void>;
    /**
     * Specifies a custom implementation of the totalCount(options) method.
     */
    totalCount?: (loadOptions: {
      filter?: FilterDescriptor | Array<FilterDescriptor>;
      group?: GroupDescriptor<TItem> | Array<GroupDescriptor<TItem>>;
    }) => PromiseLike<number>;
    /**
     * Specifies a custom implementation of the update(key, values) method.
     */
    update?: (key: TKey, values: TItem) => PromiseLike<any>;
    /**
     * Specifies whether the store combines the search and filter expressions. Defaults to true if the loadMode is &apos;raw&apos; and false if it is &apos;processed&apos;.
     */
    useDefaultSearch?: boolean;
  }
  /**
   * The DataSource is an object that provides an API for processing data from an underlying store.
   */
  export class DataSource<TItem = any, TKey = any> {
    constructor(data: Array<TItem>);
    constructor(
      options:
        | DevExpress.data.CustomStore.Options<TItem, TKey>
        | DevExpress.data.DataSource.Options<any, any, TItem, TKey>
    );
    constructor(store: DevExpress.data.utils.Store<TItem, TKey>);
    constructor(url: string);
    /**
     * Cancels the load operation with a specific identifier.
     */
    cancel(operationId: number): boolean;
    /**
     * Disposes of all the resources allocated to the DataSource instance.
     */
    dispose(): void;
    /**
     * Gets the filter property&apos;s value.
     */
    filter(): FilterDescriptor | Array<FilterDescriptor>;
    /**
     * Sets the filter property&apos;s value.
     */
    filter(filterExpr: FilterDescriptor | Array<FilterDescriptor>): void;
    /**
     * Gets the group property&apos;s value.
     */
    group(): GroupDescriptor<TItem> | Array<GroupDescriptor<TItem>>;
    /**
     * Sets the group property&apos;s value.
     */
    group(
      groupExpr: GroupDescriptor<TItem> | Array<GroupDescriptor<TItem>>
    ): void;
    /**
     * Checks whether the count of items on the current page is less than the pageSize. Takes effect only with enabled paging.
     */
    isLastPage(): boolean;
    /**
     * Checks whether data is loaded in the DataSource.
     */
    isLoaded(): boolean;
    /**
     * Checks whether data is being loaded in the DataSource.
     */
    isLoading(): boolean;
    /**
     * Gets an array of data items on the current page.
     */
    items(): Array<any>;
    /**
     * Gets the value of the underlying store&apos;s key property.
     */
    key(): string | Array<string>;
    /**
     * Starts loading data.
     */
    load(): DevExpress.core.utils.DxExtendedPromise<any>;
    /**
     * Gets an object with current data processing settings.
     */
    loadOptions(): LoadOptions<TItem>;
    /**
     * Detaches all event handlers from a single event.
     */
    off(eventName: DevExpress.data.DataSource.EventName): this;
    /**
     * Detaches a particular event handler from a single event.
     */
    off(
      eventName: DevExpress.data.DataSource.EventName,
      eventHandler: Function
    ): this;
    /**
     * Subscribes to an event.
     */
    on(
      eventName: DevExpress.data.DataSource.EventName,
      eventHandler: Function
    ): this;
    /**
     * Subscribes to events.
     */
    on(
      events: { [key in DevExpress.data.DataSource.EventName]?: Function }
    ): this;
    /**
     * Gets the current page index.
     */
    pageIndex(): number;
    /**
     * Sets the index of the page that should be loaded on the next load() method call.
     */
    pageIndex(newIndex: number): void;
    /**
     * Gets the page size.
     */
    pageSize(): number;
    /**
     * Sets the page size.
     */
    pageSize(value: number): void;
    /**
     * Gets the paginate property&apos;s value.
     */
    paginate(): boolean;
    /**
     * Sets the paginate property&apos;s value.
     */
    paginate(value: boolean): void;
    /**
     * Clears currently loaded DataSource items and calls the load() method.
     */
    reload(): DevExpress.core.utils.DxExtendedPromise<any>;
    /**
     * Gets the requireTotalCount property&apos;s value.
     */
    requireTotalCount(): boolean;
    /**
     * Sets the requireTotalCount property&apos;s value.
     */
    requireTotalCount(value: boolean): void;
    /**
     * Gets the searchExpr property&apos;s value.
     */
    searchExpr(): string & Function & Array<string | Function>;
    /**
     * Sets the searchExpr property&apos;s value.
     */
    searchExpr(expr: string | Function | Array<string | Function>): void;
    /**
     * Gets the searchOperation property&apos;s value.
     */
    searchOperation(): string;
    /**
     * Sets the searchOperation property&apos;s value.
     */
    searchOperation(op: string): void;
    /**
     * Gets the searchValue property&apos;s value.
     */
    searchValue(): any;
    /**
     * Sets the searchValue property&apos;s value.
     */
    searchValue(value: any): void;
    /**
     * Gets the select property&apos;s value.
     */
    select(): SelectDescriptor<TItem>;
    /**
     * Sets the select property&apos;s value.
     */
    select(expr: SelectDescriptor<TItem>): void;
    /**
     * Gets the sort property&apos;s value.
     */
    sort(): SortDescriptor<TItem> | Array<SortDescriptor<TItem>>;
    /**
     * Sets the sort property&apos;s value.
     */
    sort(sortExpr: SortDescriptor<TItem> | Array<SortDescriptor<TItem>>): void;
    /**
     * Gets the instance of the store underlying the DataSource.
     */
    store(): DevExpress.data.utils.Store<TItem, TKey>;
    /**
     * Gets the number of data items in the store after the last load() operation without paging. Takes effect only if requireTotalCount is true
     */
    totalCount(): number;
  }
  module DataSource {
    /**
     * 
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export type DataSourceLike<TItem, TKey = any> =
      | string
      | Array<TItem>
      | DevExpress.data.utils.Store<TItem, TKey>
      | DataSourceOptionsStub<any, any, TItem>
      | DataSource<TItem, TKey>;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    interface DataSourceOptionsStub<
      TStoreItem = any,
      TMappedItem = TStoreItem,
      TItem = TMappedItem
    > {
      customQueryParams?: any;
      expand?: Array<string> | string;
      filter?: FilterDescriptor | Array<FilterDescriptor>;
      group?: GroupDescriptor<TItem> | Array<GroupDescriptor<TItem>>;
      map?: (dataItem: TStoreItem) => TMappedItem;
      onChanged?: (e: { readonly changes?: Array<TMappedItem> }) => void;
      onLoadError?: (error: { readonly message?: string }) => void;
      onLoadingChanged?: (isLoading: boolean) => void;
      pageSize?: number;
      paginate?: boolean;
      postProcess?: (data: Array<TMappedItem>) => Array<TItem>;
      pushAggregationTimeout?: number;
      requireTotalCount?: boolean;
      reshapeOnPush?: boolean;
      searchExpr?: string | Function | Array<string | Function>;
      searchOperation?: SearchOperation;
      searchValue?: any;
      select?: SelectDescriptor<TItem>;
      sort?: SortDescriptor<TItem> | Array<SortDescriptor<TItem>>;
      store?:
        | Array<TStoreItem>
        | DevExpress.data.utils.Store<TStoreItem, any>
        | DevExpress.data.utils.StoreOptions<TStoreItem, any>;
    }
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    type EventName = 'changed' | 'loadError' | 'loadingChanged';
    export type Options<
      TStoreItem = any,
      TMappedItem = TStoreItem,
      TItem = TMappedItem,
      TKey = any
    > = DataSourceOptions<TStoreItem, TItem, TMappedItem, TKey>;
  }
  /**
   * @deprecated Use Options instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface DataSourceOptions<
    TStoreItem = any,
    TMappedItem = TStoreItem,
    TItem = TMappedItem,
    TKey = any
  > {
    /**
     * Custom parameters that should be passed to an OData service with the load query. Available only for the ODataStore.
     */
    customQueryParams?: any;
    /**
     * Specifies the navigation properties to be loaded with the OData entity. Available only for the ODataStore.
     */
    expand?: Array<string> | string;
    /**
     * Specifies data filtering conditions.
     */
    filter?: FilterDescriptor | Array<FilterDescriptor>;
    /**
     * Specifies data grouping properties.
     */
    group?: GroupDescriptor<TItem> | Array<GroupDescriptor<TItem>>;
    /**
     * Specifies an item mapping function.
     */
    map?: (dataItem: TStoreItem) => TMappedItem;
    /**
     * A function that is executed after data is loaded.
     */
    onChanged?: (e: { readonly changes?: Array<TMappedItem> }) => void;
    /**
     * A function that is executed when data loading fails.
     */
    onLoadError?: (error: { readonly message?: string }) => void;
    /**
     * A function that is executed when the data loading status changes.
     */
    onLoadingChanged?: (isLoading: boolean) => void;
    /**
     * Specifies the maximum number of data items per page. Applies only if paginate is true.
     */
    pageSize?: number;
    /**
     * Specifies whether the DataSource loads data items by pages or all at once. Defaults to false if group is set; otherwise, true.
     */
    paginate?: boolean;
    /**
     * Specifies a post processing function.
     */
    postProcess?: (data: Array<TMappedItem>) => Array<TItem>;
    /**
     * Specifies the period (in milliseconds) when changes are aggregated before pushing them to the DataSource.
     */
    pushAggregationTimeout?: number;
    /**
     * Specifies whether the DataSource requests the total count of data items in the storage.
     */
    requireTotalCount?: boolean;
    /**
     * Specifies whether to reapply sorting, filtering, grouping, and other data processing operations after receiving a push.
     */
    reshapeOnPush?: boolean;
    /**
     * Specifies the fields to search.
     */
    searchExpr?: string | Function | Array<string | Function>;
    /**
     * Specifies the comparison operation used in searching.
     */
    searchOperation?: SearchOperation;
    /**
     * Specifies the value to which the search expression is compared.
     */
    searchValue?: any;
    /**
     * Specifies the fields to select from data objects.
     */
    select?: SelectDescriptor<TItem>;
    /**
     * Specifies data sorting properties.
     */
    sort?: SortDescriptor<TItem> | Array<SortDescriptor<TItem>>;
    /**
     * Configures the store underlying the DataSource.
     */
    store?:
      | Array<TStoreItem>
      | DevExpress.data.utils.Store<TStoreItem, TKey>
      | DevExpress.data.utils.StoreOptions<TStoreItem, TKey>;
  }
  /**
   * The EdmLiteral is an object for working with primitive data types from the OData&apos;s Abstract Type System that are not supported in JavaScript.
   */
  export class EdmLiteral {
    constructor(value: string);
    /**
     * Gets the EdmLiteral&apos;s value converted to a string.
     */
    valueOf(): string;
  }
  /**
   * Specifies the function that is executed when a data layer object throws an error.
   * @deprecated Use setErrorHandler instead.
   */
  export function errorHandler(e: Error): void;
  /**
   * 
   */
  export type FilterDescriptor = any;
  /**
   * 
   */
  export type GroupDescriptor<T> =
    | KeySelector<T>
    | (BaseGroupDescriptor<T> & {
        desc?: boolean;
      });
  /**
   * The Guid is an object used to generate and contain a GUID.
   */
  export class Guid {
    constructor();
    constructor(value: string);
    /**
     * Gets the GUID. Works identically to the valueOf() method.
     */
    toString(): string;
    /**
     * Gets the GUID. Works identically to the toString() method.
     */
    valueOf(): string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  type KeySelector<T> =
    | string
    | ((source: T) => string | number | Date | Object);
  /**
   * 
   */
  export interface LoadOptions<T = any> {
    /**
     * An object for storing additional settings that should be sent to the server. Relevant to the ODataStore only.
     */
    customQueryParams?: any;
    /**
     * An array of strings that represent the names of navigation properties to be loaded simultaneously with the ODataStore.
     */
    expand?: Array<string>;
    /**
     * A filter expression.
     */
    filter?: FilterDescriptor | Array<FilterDescriptor>;
    /**
     * A group expression.
     */
    group?: GroupDescriptor<T> | Array<GroupDescriptor<T>>;
    /**
     * A group summary expression. Used with the group setting.
     */
    groupSummary?: SummaryDescriptor<T> | Array<SummaryDescriptor<T>>;
    /**
     * The IDs of the rows being expanded. Relevant only when the CustomStore is used in the TreeList UI component.
     */
    parentIds?: Array<any>;
    /**
     * Indicates whether a top-level group count is required. Used in conjunction with the filter, take, skip, requireTotalCount, and group settings.
     */
    requireGroupCount?: boolean;
    /**
     * Indicates whether the total count of data objects is needed.
     */
    requireTotalCount?: boolean;
    /**
     * A data field or expression whose value is compared to the search value.
     */
    searchExpr?: string | Function | Array<string | Function>;
    /**
     * A comparison operation.
     */
    searchOperation?: SearchOperation;
    /**
     * The current search value.
     */
    searchValue?: any;
    /**
     * A select expression.
     */
    select?: SelectDescriptor<T>;
    /**
     * The number of data objects to be skipped from the result set&apos;s start. In conjunction with take, used to implement paging.
     */
    skip?: number;
    /**
     * A sort expression.
     */
    sort?: SortDescriptor<T> | Array<SortDescriptor<T>>;
    /**
     * The number of data objects to be loaded. In conjunction with skip, used to implement paging.
     */
    take?: number;
    /**
     * A total summary expression.
     */
    totalSummary?: SummaryDescriptor<T> | Array<SummaryDescriptor<T>>;
    /**
     * An object for storing additional settings that should be sent to the server.
     */
    userData?: any;
  }
  /**
   * The LocalStore is a store that provides an interface for loading and editing data from HTML Web Storage (also known as window.localStorage) and handling related events.
   */
  export class LocalStore<TItem = any, TKey = any> extends ArrayStore<
    TItem,
    TKey
  > {
    constructor(options?: DevExpress.data.LocalStore.Options<TItem, TKey>);
    /**
     * Removes data from the local storage.
     */
    clear(): void;
  }
  module LocalStore {
    export type Options<TItem = any, TKey = any> = LocalStoreOptions<
      TItem,
      TKey
    >;
  }
  /**
   * @deprecated Use Options instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface LocalStoreOptions<TItem = any, TKey = any>
    extends ArrayStoreOptions<TItem, TKey> {
    /**
     * Specifies a delay in milliseconds between when data changes and the moment these changes are saved in the local storage. Applies only if immediate is false.
     */
    flushInterval?: number;
    /**
     * Specifies whether the LocalStore saves changes in the local storage immediately.
     */
    immediate?: boolean;
    /**
     * Specifies the name under which data should be saved in the local storage. The `dx-data-localStore-` prefix will be added to the name.
     */
    name?: string;
  }
  /**
   * The ODataContent is an object that provides access to an entire OData service.
   */
  export class ODataContext {
    constructor(options?: ODataContextOptions);
    /**
     * Invokes an OData operation that returns a value.
     */
    get(
      operationName: string,
      params: any
    ): DevExpress.core.utils.DxPromise<any>;
    /**
     * Invokes an OData operation that returns nothing.
     */
    invoke(
      operationName: string,
      params: any,
      httpMethod: DevExpress.data.ODataContext.HttpMethod
    ): DevExpress.core.utils.DxPromise<void>;
    /**
     * Gets a link to an entity with a specific key.
     */
    objectLink(entityAlias: string, key: any | string | number): any;
  }
  module ODataContext {
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    type HttpMethod = 'GET' | 'POST' | 'PATCH' | 'MERGE';
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export interface ODataRequestOptions {
      accepts: any;
      async: boolean;
      contentType: string | boolean;
      data: any;
      dataType: string;
      headers: any;
      jsonp?: boolean;
      method: string;
      timeout: number;
      url: string;
      xhrFields: any;
    }
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface ODataContextOptions {
    /**
     * Specifies a function that customizes the request before it is sent to the server.
     */
    beforeSend?: (options: {
      url: string;
      async: boolean;
      method: string;
      timeout: number;
      params: any;
      payload: any;
      headers: any;
    }) => void;
    /**
     * Specifies whether stores in the ODataContext serialize/parse date-time values.
     */
    deserializeDates?: boolean;
    /**
     * Specifies entity collections to be accessed.
     */
    entities?: any;
    /**
     * Specifies a function that is executed when the ODataContext throws an error.
     */
    errorHandler?: (e: {
      httpStatus: number;
      errorDetails: any;
      requestOptions: DevExpress.data.ODataContext.ODataRequestOptions;
    }) => void;
    /**
     * Specifies whether to convert string values to lowercase in filter and search requests. Applies to the following operations: &apos;startswith&apos;, &apos;endswith&apos;, &apos;contains&apos;, and &apos;notcontains&apos;.
     */
    filterToLower?: boolean;
    /**
     * Specifies whether data should be sent using JSONP.
     */
    jsonp?: boolean;
    /**
     * Specifies the URL of an OData service.
     */
    url?: string;
    /**
     * Specifies the OData version.
     */
    version?: number;
    /**
     * Specifies whether to send cookies, authorization headers, and client certificates in a cross-origin request.
     */
    withCredentials?: boolean;
  }
  /**
   * The ODataStore is a store that provides an interface for loading and editing data from an individual OData entity collection and handling related events.
   */
  export class ODataStore<TItem = any, TKey = any> extends Store<TItem, TKey> {
    constructor(options?: DevExpress.data.ODataStore.Options<TItem, TKey>);
    byKey(key: TKey): DevExpress.core.utils.DxPromise<TItem>;
    /**
     * Gets an entity with a specific key.
     */
    byKey(
      key: TKey,
      extraOptions: {
        expand?: string | Array<string>;
        select?: string | Array<string>;
      }
    ): DevExpress.core.utils.DxPromise<TItem>;
    /**
     * Creates a Query for the OData endpoint.
     */
    createQuery(loadOptions?: {
      expand?: string | Array<string>;
      requireTotalCount?: boolean;
      customQueryParams?: any;
    }): Query;
  }
  module ODataStore {
    export type Options<TItem = any, TKey = any> = ODataStoreOptions<
      TItem,
      TKey
    >;
  }
  /**
   * @deprecated Use Options instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface ODataStoreOptions<TItem = any, TKey = any>
    extends DevExpress.data.Store.Options<TItem, TKey> {
    /**
     * Specifies a function that customizes the request before it is sent to the server.
     */
    beforeSend?: (options: {
      url: string;
      async: boolean;
      method: string;
      timeout: number;
      params: any;
      payload: any;
      headers: any;
    }) => void;
    /**
     * Specifies whether the store serializes/parses date-time values.
     */
    deserializeDates?: boolean;
    /**
     * Specifies a function that is executed when the ODataStore throws an error.
     */
    errorHandler?: (e: {
      httpStatus: number;
      errorDetails: any;
      requestOptions: DevExpress.data.ODataContext.ODataRequestOptions;
    }) => void;
    /**
     * Specifies the data field types. Accepts the following types: &apos;String&apos;, &apos;Int32&apos;, &apos;Int64&apos;, &apos;Boolean&apos;, &apos;Single&apos;, &apos;Decimal&apos; and &apos;Guid&apos;.
     */
    fieldTypes?: any;
    /**
     * Specifies whether to convert string values to lowercase in filter and search requests. Applies to the following operations: &apos;startswith&apos;, &apos;endswith&apos;, &apos;contains&apos;, and &apos;notcontains&apos;.
     */
    filterToLower?: boolean;
    /**
     * Specifies whether data should be sent using JSONP.
     */
    jsonp?: boolean;
    /**
     * Specifies the type of the key property or properties.
     */
    keyType?:
      | 'String'
      | 'Int32'
      | 'Int64'
      | 'Guid'
      | 'Boolean'
      | 'Single'
      | 'Decimal'
      | any;
    /**
     * A function that is executed before data is loaded to the store.
     */
    onLoading?: (loadOptions: LoadOptions<TItem>) => void;
    /**
     * Specifies the URL of an OData entity collection.
     */
    url?: string;
    /**
     * Specifies the OData version.
     */
    version?: number;
    /**
     * Specifies whether to send cookies, authorization headers, and client certificates in a cross-origin request.
     */
    withCredentials?: boolean;
  }
  /**
   * The PivotGridDataSource is an object that provides an API for processing data from an underlying store. This object is used in the PivotGrid UI component.
   */
  export class PivotGridDataSource {
    constructor(options?: DevExpress.data.PivotGridDataSource.Options);
    /**
     * Collapses all header items of a field with the specified identifier.
     */
    collapseAll(id: number | string): void;
    /**
     * Collapses a specific header item.
     */
    collapseHeaderItem(area: string, path: Array<string | number | Date>): void;
    /**
     * Provides access to the facts that were used to calculate a specific summary value.
     */
    createDrillDownDataSource(options: {
      columnPath?: Array<string | number | Date>;
      rowPath?: Array<string | number | Date>;
      dataIndex?: number;
      maxRowCount?: number;
      customColumns?: Array<string>;
    }): DataSource;
    /**
     * Disposes of all the resources allocated to the PivotGridDataSource instance.
     */
    dispose(): void;
    /**
     * Expands all the header items of a field with the specified identifier.
     */
    expandAll(id: number | string): void;
    /**
     * Expands a specific header item.
     */
    expandHeaderItem(area: string, path: Array<any>): void;
    /**
     * Gets all the properties of a field with the specified identifier.
     */
    field(id: number | string): any;
    /**
     * Updates field options&apos; values.
     */
    field(id: number | string, options: any): void;
    /**
     * Gets all the fields including those generated automatically.
     */
    fields(): Array<DevExpress.data.PivotGridDataSource.Field>;
    /**
     * Specifies a new fields collection.
     */
    fields(fields: Array<DevExpress.data.PivotGridDataSource.Field>): void;
    /**
     * Gets the filter property&apos;s value. Does not affect an XmlaStore.
     */
    filter(): any;
    /**
     * Sets the filter property&apos;s value. Does not affect an XmlaStore.
     */
    filter(filterExpr: any): void;
    /**
     * Gets all the fields within an area.
     */
    getAreaFields(
      area: string,
      collectGroups: boolean
    ): Array<DevExpress.data.PivotGridDataSource.Field>;
    /**
     * Gets the loaded data. Another data portion is loaded every time a header item is expanded.
     */
    getData(): any;
    /**
     * Checks whether the PivotGridDataSource is loading data.
     */
    isLoading(): boolean;
    /**
     * Starts loading data.
     */
    load(): DevExpress.core.utils.DxPromise<any>;
    /**
     * Detaches all event handlers from a single event.
     */
    off(eventName: DevExpress.data.PivotGridDataSource.EventName): this;
    /**
     * Detaches a particular event handler from a single event.
     */
    off(
      eventName: DevExpress.data.PivotGridDataSource.EventName,
      eventHandler: Function
    ): this;
    /**
     * Subscribes to an event.
     */
    on(
      eventName: DevExpress.data.PivotGridDataSource.EventName,
      eventHandler: Function
    ): this;
    /**
     * Subscribes to events.
     */
    on(
      events: {
        [key in DevExpress.data.PivotGridDataSource.EventName]?: Function;
      }
    ): this;
    /**
     * Clears the loaded PivotGridDataSource data and calls the load() method.
     */
    reload(): DevExpress.core.utils.DxPromise<any>;
    /**
     * Gets the current PivotGridDataSource state. Part of the PivotGrid UI component&apos;s state storing feature.
     */
    state(): any;
    /**
     * Sets the PivotGridDataSource state. Part of the PivotGrid UI component&apos;s state storing feature.
     */
    state(state: any): void;
  }
  module PivotGridDataSource {
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    type EventName =
      | 'changed'
      | 'fieldsPrepared'
      | 'loadError'
      | 'loadingChanged';
    export type Options = PivotGridDataSourceOptions;
    export type PivotGridArea = 'column' | 'data' | 'filter' | 'row';
    export type PivotGridDataType = 'date' | 'number' | 'string';
    export type PivotGridGroupInterval =
      | 'day'
      | 'dayOfWeek'
      | 'month'
      | 'quarter'
      | 'year';
    export type PivotGridRunningTotalMode = 'column' | 'row';
    export type PivotGridSortBy = 'displayText' | 'value' | 'none';
    export type PivotGridStoreType = 'array' | 'local' | 'odata' | 'xmla';
    export type PivotGridSummaryDisplayMode =
      | 'absoluteVariation'
      | 'percentOfColumnGrandTotal'
      | 'percentOfColumnTotal'
      | 'percentOfGrandTotal'
      | 'percentOfRowGrandTotal'
      | 'percentOfRowTotal'
      | 'percentVariation';
  }
  /**
   * @deprecated Use Field instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface PivotGridDataSourceField {
    /**
     * Specifies whether to take neighboring groups&apos; summary values into account when calculating a running total and absolute or percent variation.
     */
    allowCrossGroupCalculation?: boolean;
    /**
     * Allows users to expand/collapse all header items within the same header level. Ignored if the PivotGridDataSource&apos;s paginate property is true.
     */
    allowExpandAll?: boolean;
    /**
     * Specifies whether a user can filter the field&apos;s values.
     */
    allowFiltering?: boolean;
    /**
     * Specifies whether a user can change the field&apos;s sorting.
     */
    allowSorting?: boolean;
    /**
     * Allows users to sort the pivot grid by summary values instead of field values. Ignored if the PivotGridDataSource&apos;s paginate property is true.
     */
    allowSortingBySummary?: boolean;
    /**
     * Specifies the field&apos;s area.
     */
    area?: DevExpress.data.PivotGridDataSource.PivotGridArea | undefined;
    /**
     * Specifies the field&apos;s order among the other fields in the same area. Corresponds to the field&apos;s order in the fields array by default.
     */
    areaIndex?: number;
    /**
     * Specifies a custom aggregate function. Applies only if the summaryType is &apos;custom&apos; and the remoteOperations is false. Cannot be used with an XmlaStore.
     */
    calculateCustomSummary?: (options: {
      summaryProcess?: string;
      value?: any;
      totalValue?: any;
    }) => void;
    /**
     * Specifies a custom post-processing function for summary values.
     */
    calculateSummaryValue?: (e: DevExpress.ui.dxPivotGridSummaryCell) => number;
    /**
     * Specifies the field&apos;s caption to be displayed in the field chooser and on the field panel.
     */
    caption?: string;
    /**
     * Customizes the text displayed in summary cells.
     */
    customizeText?: (cellInfo: {
      value?: string | number | Date;
      valueText?: string;
    }) => string;
    /**
     * Specifies which data source field provides data for the pivot grid field.
     */
    dataField?: string;
    /**
     * Casts field values to a specific data type.
     */
    dataType?: DevExpress.data.PivotGridDataSource.PivotGridDataType;
    /**
     * Specifies the name of the directory in which the field is located when displayed in the field chooser.
     */
    displayFolder?: string;
    /**
     * Specifies whether to expand all items within the field&apos;s header level.
     */
    expanded?: boolean;
    /**
     * Specifies whether a user changes the current filter by including (selecting) or excluding (clearing the selection of) values.
     */
    filterType?: DevExpress.common.charts.FilterType;
    /**
     * Specifies the values by which the field is filtered.
     */
    filterValues?: Array<any>;
    /**
     * Formats field values before they are displayed.
     */
    format?: DevExpress.ui.Format;
    /**
     * Specifies the field&apos;s index within its group.
     */
    groupIndex?: number;
    /**
     * Specifies how the field&apos;s values are combined into groups for the headers. Cannot be used with an XmlaStore.
     */
    groupInterval?:
      | DevExpress.data.PivotGridDataSource.PivotGridGroupInterval
      | number;
    /**
     * Specifies the name of the field&apos;s group.
     */
    groupName?: string;
    /**
     * Configures the field&apos;s header filter.
     */
    headerFilter?: { allowSearch?: boolean; height?: number; width?: number };
    /**
     * Specifies whether the field should be treated as a measure (a field providing data for calculation).
     */
    isMeasure?: boolean;
    /**
     * Specifies the field&apos;s identifier.
     */
    name?: string;
    /**
     * Specifies whether to calculate the running total by rows or by columns.
     */
    runningTotal?: DevExpress.data.PivotGridDataSource.PivotGridRunningTotalMode;
    /**
     * Specifies a function that combines the field&apos;s values into groups for the headers. Cannot be used with an XmlaStore or remote operations.
     */
    selector?: Function;
    /**
     * Specifies whether to display the field&apos;s grand totals. Applies only if the field is in the data area.
     */
    showGrandTotals?: boolean;
    /**
     * Specifies whether to display the field&apos;s totals.
     */
    showTotals?: boolean;
    /**
     * Specifies whether to display the field&apos;s summary values. Applies only if the field is in the data area. Inherits the showTotals&apos; value by default.
     */
    showValues?: boolean;
    /**
     * Specifies how the field&apos;s values in the headers should be sorted.
     */
    sortBy?: DevExpress.data.PivotGridDataSource.PivotGridSortBy;
    /**
     * Sorts the field&apos;s values in the headers by the specified measure&apos;s summary values. Accepts the measure&apos;s name, caption, dataField, or index in the fields array.
     */
    sortBySummaryField?: string;
    /**
     * Specifies a path to the column or row whose summary values should be used to sort the field&apos;s values in the headers.
     */
    sortBySummaryPath?: Array<number | string>;
    /**
     * Specifies the field values&apos; sorting order.
     */
    sortOrder?: DevExpress.common.SortOrder;
    /**
     * Specifies a custom comparison function that sorts the field&apos;s values in the headers.
     */
    sortingMethod?: (
      a: { value?: string | number; children?: Array<any> },
      b: { value?: string | number; children?: Array<any> }
    ) => number;
    /**
     * Specifies a predefined post-processing function. Does not apply when the calculateSummaryValue property is set.
     */
    summaryDisplayMode?: DevExpress.data.PivotGridDataSource.PivotGridSummaryDisplayMode;
    /**
     * Specifies how to aggregate the field&apos;s data. Cannot be used with an XmlaStore.
     */
    summaryType?: DevExpress.common.charts.SummaryType | string;
    /**
     * Specifies whether the field is visible in the pivot grid and field chooser.
     */
    visible?: boolean;
    /**
     * Specifies the field&apos;s width in pixels when the field is displayed in the pivot grid.
     */
    width?: number;
    /**
     * Specifies whether text that does not fit into a header item should be wrapped.
     */
    wordWrapEnabled?: boolean;
  }
  /**
   * @deprecated Use Options instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface PivotGridDataSourceOptions {
    /**
     * Configures pivot grid fields.
     */
    fields?: Array<DevExpress.data.PivotGridDataSource.Field>;
    /**
     * Specifies data filtering conditions. Cannot be used with an XmlaStore.
     */
    filter?: string | Array<any> | Function;
    /**
     * A function that is executed after data is successfully loaded.
     */
    onChanged?: Function;
    /**
     * A function that is executed when all fields are loaded from the store and they are ready to be displayed in the PivotGrid.
     */
    onFieldsPrepared?: (
      fields: Array<DevExpress.data.PivotGridDataSource.Field>
    ) => void;
    /**
     * A function that is executed when data loading fails.
     */
    onLoadError?: (error: any) => void;
    /**
     * A function that is executed when the data loading status changes.
     */
    onLoadingChanged?: (isLoading: boolean) => void;
    /**
     * Specifies whether the PivotGridDataSource should load data in portions. Can be used only with an XmlaStore.
     */
    paginate?: boolean;
    /**
     * Specifies whether the data processing operations (filtering, grouping, summary calculation) should be performed on the server.
     */
    remoteOperations?: boolean;
    /**
     * Specifies whether to auto-generate pivot grid fields from the store&apos;s data.
     */
    retrieveFields?: boolean;
    /**
     * Configures the DataSource&apos;s underlying store.
     */
    store?:
      | DevExpress.data.utils.Store
      | DevExpress.data.utils.StoreOptions
      | XmlaStore
      | (XmlaStoreOptions & { type: 'xmla' })
      | Array<{
          /**
           * Specifies the PivotGridDataSource&apos;s storage type.
           */
          type?: DevExpress.data.PivotGridDataSource.PivotGridStoreType;
        }>
      | {
          /**
           * Specifies the PivotGridDataSource&apos;s storage type.
           */
          type?: DevExpress.data.PivotGridDataSource.PivotGridStoreType;
        };
  }
  /**
   * Creates a Query instance.
   */
  export function query(array: Array<any>): Query;
  /**
   * Creates a Query instance that accesses a remote data service using its URL.
   */
  export function query(url: string, queryOptions: any): Query;
  /**
   * The Query is an object that provides a chainable interface for making data queries.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface Query {
    /**
     * Calculates a custom summary for all data items.
     */
    aggregate(
      seed: any,
      step: Function,
      finalize: Function
    ): DevExpress.core.utils.DxPromise<any>;
    /**
     * Calculates a custom summary for all data items.
     */
    aggregate(step: Function): DevExpress.core.utils.DxPromise<any>;
    /**
     * Calculates the average of all values. Applies only to numeric arrays.
     */
    avg(): DevExpress.core.utils.DxPromise<number>;
    /**
     * Calculates the average of all values found using a getter.
     */
    avg(getter: any): DevExpress.core.utils.DxPromise<number>;
    /**
     * Calculates the number of data items.
     */
    count(): DevExpress.core.utils.DxPromise<number>;
    /**
     * Executes the Query. This is an asynchronous alternative to the toArray() method.
     */
    enumerate(): DevExpress.core.utils.DxPromise<any>;
    /**
     * Filters data items using a filter expression.
     */
    filter(criteria: Array<any>): Query;
    /**
     * Filters data items using a custom function.
     */
    filter(predicate: Function): Query;
    /**
     * Groups data items by the specified getter.
     */
    groupBy(getter: any): Query;
    /**
     * Calculates the maximum value. Applies only to numeric arrays.
     */
    max(): DevExpress.core.utils.DxPromise<number | Date>;
    /**
     * Calculates the maximum of all values found using a getter.
     */
    max(getter: any): DevExpress.core.utils.DxPromise<number | Date>;
    /**
     * Calculates the minimum value. Applies only to numeric arrays.
     */
    min(): DevExpress.core.utils.DxPromise<number | Date>;
    /**
     * Calculates the minumum of all values found using a getter.
     */
    min(getter: any): DevExpress.core.utils.DxPromise<number | Date>;
    /**
     * Selects individual fields from data objects.
     */
    select(...getters: any[]): Query;
    /**
     * Gets a specified number of data items starting from a given index.
     */
    slice(skip: number, take?: number): Query;
    /**
     * Sorts data items by the specified getter in ascending order.
     */
    sortBy(getter: any): Query;
    /**
     * Sorts data items by the specified getter in the specified sorting order.
     */
    sortBy(getter: any, desc: boolean): Query;
    /**
     * Calculates the sum of all values.
     */
    sum(): DevExpress.core.utils.DxPromise<number>;
    /**
     * Calculates the sum of all values found using a getter.
     */
    sum(getter: any): DevExpress.core.utils.DxPromise<number>;
    /**
     * Sorts data items by one more getter in ascending order.
     */
    thenBy(getter: any): Query;
    /**
     * Sorts data items by one more getter in the specified sorting order.
     */
    thenBy(getter: any, desc: boolean): Query;
    /**
     * Gets data items associated with the Query. This is a synchronous alternative to the enumerate() method.
     */
    toArray(): Array<any>;
  }
  /**
   * 
   */
  export type SearchOperation =
    | '='
    | '<>'
    | '>'
    | '>='
    | '<'
    | '<='
    | 'startswith'
    | 'endswith'
    | 'contains'
    | 'notcontains';
  /**
   * 
   */
  export type SelectDescriptor<T> =
    | string
    | Array<string>
    | ((source: T) => any);
  /**
   * A method that specifies a function to be executed when a Data Layer component throws an error.
   */
  export function setErrorHandler(handler: (e: Error) => void): void;
  /**
   * 
   */
  export type SortDescriptor<T> = GroupDescriptor<T>;
  /**
   * The base class for all Stores.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export class Store<TItem = any, TKey = any> {
    constructor(options?: DevExpress.data.Store.Options<TItem, TKey>);
    /**
     * Gets a data item with a specific key.
     */
    byKey(
      key: TKey,
      extraOptions?: LoadOptions<TItem>
    ): DevExpress.core.utils.DxPromise<TItem>;
    /**
     * Adds a data item to the store.
     */
    insert(values: TItem): DevExpress.core.utils.DxExtendedPromise<TItem>;
    /**
     * Gets the key property (or properties) as specified in the key property.
     */
    key(): string | Array<string>;
    /**
     * Gets a data item&apos;s key value.
     */
    keyOf(obj: TItem): TKey;
    /**
     * Starts loading data.
     */
    load(): DevExpress.core.utils.DxExtendedPromise<Array<TItem>>;
    /**
     * Starts loading data.
     */
    load(
      options: LoadOptions<TItem>
    ): DevExpress.core.utils.DxExtendedPromise<Array<TItem>>;
    /**
     * Detaches all event handlers from a single event.
     */
    off(eventName: DevExpress.data.Store.EventName): this;
    /**
     * Detaches a particular event handler from a single event.
     */
    off(
      eventName: DevExpress.data.Store.EventName,
      eventHandler: Function
    ): this;
    /**
     * Subscribes to an event.
     */
    on(
      eventName: DevExpress.data.Store.EventName,
      eventHandler: Function
    ): this;
    /**
     * Subscribes to events.
     */
    on(events: { [key in DevExpress.data.Store.EventName]?: Function }): this;
    /**
     * Pushes data changes to the store and notifies the DataSource.
     */
    push(
      changes: Array<{
        type: 'insert' | 'update' | 'remove';
        data?: DevExpress.core.DeepPartial<TItem>;
        key?: TKey;
        index?: number;
      }>
    ): void;
    /**
     * Removes a data item with a specific key from the store.
     */
    remove(key: TKey): DevExpress.core.utils.DxPromise<void>;
    /**
     * Gets the total count of items the load() function returns.
     */
    totalCount(obj: {
      filter?: FilterDescriptor | Array<FilterDescriptor>;
      group?: GroupDescriptor<TItem> | Array<GroupDescriptor<TItem>>;
    }): DevExpress.core.utils.DxPromise<number>;
    /**
     * Updates a data item with a specific key.
     */
    update(
      key: TKey,
      values: DevExpress.core.DeepPartial<TItem>
    ): DevExpress.core.utils.DxExtendedPromise<TItem>;
  }
  module Store {
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    type EventName =
      | 'loaded'
      | 'loading'
      | 'inserted'
      | 'inserting'
      | 'updated'
      | 'updating'
      | 'push'
      | 'removed'
      | 'removing'
      | 'modified'
      | 'modifying';
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export type Options<TItem = any, TKey = any> = StoreOptions<TItem, TKey>;
  }
  /**
   * @deprecated Use Options instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface StoreOptions<TItem = any, TKey = any> {
    /**
     * Specifies the function that is executed when the store throws an error.
     */
    errorHandler?: Function;
    /**
     * Specifies the key property (or properties) that provide(s) key values to access data items. Each key value must be unique.
     */
    key?: string | Array<string>;
    /**
     * A function that is executed after a data item is added to the store.
     */
    onInserted?: (values: TItem, key: TKey) => void;
    /**
     * A function that is executed before a data item is added to the store.
     */
    onInserting?: (values: TItem) => void;
    /**
     * A function that is executed after data is loaded to the store.
     */
    onLoaded?: (result: Array<TItem>, loadOptions: LoadOptions<TItem>) => void;
    /**
     * A function that is executed before data is loaded to the store.
     */
    onLoading?: (loadOptions: LoadOptions<TItem>) => void;
    /**
     * A function that is executed after a data item is added, updated, or removed from the store.
     */
    onModified?: Function;
    /**
     * A function that is executed before a data item is added, updated, or removed from the store.
     */
    onModifying?: Function;
    /**
     * The function executed before changes are pushed to the store.
     */
    onPush?: (changes: Array<TItem>) => void;
    /**
     * A function that is executed after a data item is removed from the store.
     */
    onRemoved?: (key: TKey) => void;
    /**
     * A function that is executed before a data item is removed from the store.
     */
    onRemoving?: (key: TKey) => void;
    /**
     * A function that is executed after a data item is updated in the store.
     */
    onUpdated?: (key: TKey, values: TItem) => void;
    /**
     * A function that is executed before a data item is updated in the store.
     */
    onUpdating?: (key: TKey, values: TItem) => void;
  }
  /**
   * 
   */
  export type SummaryDescriptor<T> =
    | KeySelector<T>
    | (BaseGroupDescriptor<T> & {
        summaryType?: 'sum' | 'avg' | 'min' | 'max' | 'count';
      });
  /**
   * The XmlaStore is a store that provides an interface for accessing an OLAP cube according to the XMLA standard.
   */
  export class XmlaStore {
    constructor(options?: XmlaStoreOptions);
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface XmlaStoreOptions {
    /**
     * Specifies a function that customizes the request before it is sent to the server.
     */
    beforeSend?: (options: {
      url?: string;
      method?: string;
      headers?: any;
      xhrFields?: any;
      data?: string;
      dataType?: string;
    }) => void;
    /**
     * Specifies the database (or initial catalog) that contains the OLAP cube to use.
     */
    catalog?: string;
    /**
     * Specifies the name of the OLAP cube to use from the catalog.
     */
    cube?: string;
    /**
     * Specifies the OLAP server&apos;s URL.
     */
    url?: string;
  }
}
declare module DevExpress.data.PivotGridDataSource {
  export type Field = PivotGridDataSourceField;
}
declare module DevExpress.data.utils {
  /**
   * Compiles a getter function from a getter expression.
   */
  export function compileGetter(expr: string | Array<string>): Function;
  /**
   * Compiles a setter function from a setter expression.
   */
  export function compileSetter(expr: string | Array<string>): Function;
  export type Store<TItem = any, TKey = any> =
    | CustomStore<TItem, TKey>
    | ArrayStore<TItem, TKey>
    | LocalStore<TItem, TKey>
    | ODataStore<TItem, TKey>;
  export type StoreOptions<TItem = any, TKey = any> =
    | DevExpress.data.CustomStore.Options<TItem, TKey>
    | (DevExpress.data.ArrayStore.Options<TItem, TKey> & { type: 'array' })
    | (DevExpress.data.LocalStore.Options<TItem, TKey> & { type: 'local' })
    | (DevExpress.data.ODataStore.Options<TItem, TKey> & { type: 'odata' });
}
declare module DevExpress.data.utils.odata {
  /**
   * Contains built-in OData type converters (for String, Int32, Int64, Boolean, Single, Decimal, and Guid) and allows you to register a custom type converter.
   */
  export var keyConverters: any;
}
declare module DevExpress.events {
  export interface Cancelable {
    cancel?: boolean;
  }
  export interface ChangedOptionInfo {
    readonly name: string;
    readonly fullName: string;
    readonly value?: any;
    readonly previousValue?: any;
  }

  /**
   * 
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export type DxEvent<TNativeEvent = Event> = {} extends EventType
    ? EventObject & TNativeEvent
    : EventType;
  /**
   * 
   * @deprecated 
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export type event = DxEvent;
  export interface EventInfo<TComponent> {
    readonly component: TComponent;
    readonly element: DevExpress.core.DxElement;
    readonly model?: any;
  }
  /**
   * Describes EventObject, a counterpart of the jQuery.Event to be used without jQuery.
   */
  export type EventObject = {
    /**
     * The DOM element within the current event propagation stage.
     */
    currentTarget: Element;

    /**
     * Data passed to the event handler.
     */
    data: any;

    /**
     * The DOM element to which the currently-called event handler was attached.
     */
    delegateTarget: Element;

    /**
     * The DOM element that initiated the event.
     */
    target: Element;
    /**
     * Checks if the preventDefault() method was called on this event object.
     */
    isDefaultPrevented(): boolean;
    /**
     * Checks if the stopImmediatePropagation() method was called on this event object.
     */
    isImmediatePropagationStopped(): boolean;
    /**
     * Checks if the stopPropagation() method was called on this event object.
     */
    isPropagationStopped(): boolean;
    /**
     * Prevents the event&apos;s default action from triggering.
     */
    preventDefault(): void;
    /**
     * Stops the event&apos;s propagation up the DOM tree, preventing the rest of the handlers from being executed.
     */
    stopImmediatePropagation(): void;
    /**
     * Stops the event&apos;s propagation up the DOM tree, keeping parent handlers unnotified of the event.
     */
    stopPropagation(): void;
  };
  /**
   * 
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export function eventsHandler(event: DxEvent, extraParameters: any): boolean;
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface EventType {}
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  interface EventType extends JQueryEventObject {
    cancel?: boolean;
  }
  export interface InitializedEventInfo<TComponent> {
    readonly component?: TComponent;
    readonly element?: DevExpress.core.DxElement;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface ItemInfo<TItemData = any> {
    readonly itemData?: TItemData;
    readonly itemElement: DevExpress.core.DxElement;
    readonly itemIndex: number;
  }
  export interface NativeEventInfo<TComponent, TNativeEvent = Event> {
    readonly component: TComponent;
    readonly element: DevExpress.core.DxElement;
    readonly model?: any;
    readonly event?: DxEvent<TNativeEvent>;
  }
  /**
   * Detaches all handlers from the specified elements.
   */
  export function off(element: Element | Array<Element>): void;
  /**
   * Detaches all handlers of the specified event from the specified elements.
   */
  export function off(
    element: Element | Array<Element>,
    eventName: string
  ): void;
  /**
   * Detaches an event handler from the specified elements.
   */
  export function off(
    element: Element | Array<Element>,
    eventName: string,
    handler: Function
  ): void;
  /**
   * Detaches all event handlers of the specified type attached using the on(element, eventName, selector, data, handler) or on(element, eventName, selector, handler) method.
   */
  export function off(
    element: Element | Array<Element>,
    eventName: string,
    selector: string
  ): void;
  /**
   * Detaches the specified event handler attached using the on(element, eventName, selector, data, handler) or on(element, eventName, selector, handler) method.
   */
  export function off(
    element: Element | Array<Element>,
    eventName: string,
    selector: string,
    handler: Function
  ): void;
  /**
   * Attaches an event handler to the specified elements. Allows you to pass custom data to the handler.
   */
  export function on(
    element: Element | Array<Element>,
    eventName: string,
    data: any,
    handler: Function
  ): void;
  /**
   * Attaches an event handler to the specified elements.
   */
  export function on(
    element: Element | Array<Element>,
    eventName: string,
    handler: Function
  ): void;
  /**
   * Attaches an event handler to the specified elements&apos; descendants. Allows you to pass custom data to the handler.
   */
  export function on(
    element: Element | Array<Element>,
    eventName: string,
    selector: string,
    data: any,
    handler: Function
  ): void;
  /**
   * Attaches an event handler to the specified elements&apos; descendants.
   */
  export function on(
    element: Element | Array<Element>,
    eventName: string,
    selector: string,
    handler: Function
  ): void;
  /**
   * Attaches an event handler that is executed only once to the specified elements. Allows you to pass custom data to the handler.
   */
  export function one(
    element: Element | Array<Element>,
    eventName: string,
    data: any,
    handler: Function
  ): void;
  /**
   * Attaches an event handler that is executed only once to the specified elements.
   */
  export function one(
    element: Element | Array<Element>,
    eventName: string,
    handler: Function
  ): void;
  /**
   * Attaches an event handler that is executed only once to the specified elements&apos; descendants. Allows you to pass custom data to the handler.
   */
  export function one(
    element: Element | Array<Element>,
    eventName: string,
    selector: string,
    data: any,
    handler: Function
  ): void;
  /**
   * Attaches an event handler that is executed only once to the specified elements&apos; descendants.
   */
  export function one(
    element: Element | Array<Element>,
    eventName: string,
    selector: string,
    handler: Function
  ): void;
  /**
   * Triggers an event for the specified elements.
   */
  export function trigger(
    element: Element | Array<Element>,
    event: string | DxEvent
  ): void;
  /**
   * Triggers an event for the specified elements. Allows you to pass custom parameters to event handlers.
   */
  export function trigger(
    element: Element | Array<Element>,
    event: string | DxEvent,
    extraParameters: any
  ): void;
  /**
   * 
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export function triggerHandler(
    element: Element | Array<Element>,
    event: string | DxEvent
  ): void;
  /**
   * 
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export function triggerHandler(
    element: Element | Array<Element>,
    event: string | DxEvent,
    extraParameters: any
  ): void;
}
declare module DevExpress.excelExporter {
  /**
   * 
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface CellAddress {
    /**
     * The index of a row that contains the cell.
     */
    row?: number;
    /**
     * The index of a column that contains the cell.
     */
    column?: number;
  }
  /**
   * The coordinates of the exported DataGrid in the Excel file.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface CellRange {
    /**
     * Coordinates of the top left cell.
     */
    from?: CellAddress;
    /**
     * Coordinates of the bottom right cell.
     */
    to?: CellAddress;
  }
  export type DataGridCell = ExcelDataGridCell;
  /**
   * @deprecated Use DataGridCell instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface ExcelDataGridCell {
    /**
     * The configuration of the cell&apos;s column.
     */
    column?: DevExpress.ui.dxDataGrid.Column;
    /**
     * The data object of the cell&apos;s row.
     */
    data?: any;
    /**
     * The group index of the cell&apos;s row. Available when the rowType is &apos;group&apos;.
     */
    groupIndex?: number;
    /**
     * Information about group summary items the cell represents.
     */
    groupSummaryItems?: Array<{
      /**
       * The group summary item&apos;s identifier.
       */
      name?: string;
      /**
       * The group summary item&apos;s raw value.
       */
      value?: any;
    }>;
    /**
     * The type of the cell&apos;s row.
     */
    rowType?: string;
    /**
     * The identifier of the total summary item that the cell represents.
     */
    totalSummaryItemName?: string;
    /**
     * The cell&apos;s raw value.
     */
    value?: any;
  }
  /**
   * 
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface ExcelExportBaseProps {
    /**
     * An Excel worksheet to which the grid should be exported.
     */
    worksheet?: object;
    /**
     * A cell used as a start position for export.
     */
    topLeftCell?: CellAddress | string;
    /**
     * Specifies whether Excel columns should have the same width as their source UI component&apos;s columns.
     */
    keepColumnWidths?: boolean;
    /**
     * Configures the load panel.
     */
    loadPanel?: ExportLoadPanel;
  }
  /**
   * Properties that can be passed to the exportDataGrid(options) method from the excelExporter module.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface ExcelExportDataGridProps extends ExcelExportBaseProps {
    /**
     * A DataGrid instance. This setting is required.
     */
    component?: DevExpress.ui.dxDataGrid;
    /**
     * Specifies whether to export only selected rows.
     */
    selectedRowsOnly?: boolean;
    /**
     * Specifies whether to enable Excel filtering in the document.
     */
    autoFilterEnabled?: boolean;
    /**
     * Customizes an Excel cell after creation.
     */
    customizeCell?: (options: {
      gridCell?: DataGridCell;
      excelCell?: any;
    }) => void;
  }
  /**
   * Properties that can be passed to the exportPivotGrid(options) method from the excelExporter module.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface ExcelExportPivotGridProps extends ExcelExportBaseProps {
    /**
     * A PivotGrid instance. This setting is required.
     */
    component?: DevExpress.ui.dxPivotGrid;
    /**
     * Specifies whether to merge neighbouring cells in the row field if they have the same values.
     */
    mergeRowFieldValues?: boolean;
    /**
     * Specifies whether to merge neighbouring cells in the column field if they have the same values.
     */
    mergeColumnFieldValues?: boolean;
    /**
     * Customizes an Excel cell after creation.
     */
    customizeCell?: (options: {
      pivotCell?: PivotGridCell;
      excelCell?: any;
    }) => void;
  }
  /**
   * @deprecated Use PivotGridCell instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface ExcelPivotGridCell extends DevExpress.ui.dxPivotGrid.Cell {
    /**
     * The area to which the cell belongs.
     */
    area?: string;
    /**
     * A zero-based index that indicates the position of the cell&apos;s row.
     */
    rowIndex?: number;
    /**
     * A zero-based index that indicates the position of the cell&apos;s column.
     */
    columnIndex?: number;
  }
  /**
   * Exports grid data to Excel.
   */
  export function exportDataGrid(
    options: ExcelExportDataGridProps
  ): DevExpress.core.utils.DxPromise<CellRange>;
  /**
   * Exports pivot grid data to Excel.
   */
  export function exportPivotGrid(
    options: ExcelExportPivotGridProps
  ): DevExpress.core.utils.DxPromise<CellRange>;
  export type PivotGridCell = ExcelPivotGridCell;
}
declare module DevExpress.exporter {
  /**
   * An object that configures the font in an Excel cell.
   * @deprecated 
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface ExcelFont {
    /**
     * Specifies whether the text should be in bold.
     */
    bold?: boolean;
    /**
     * The text&apos;s color in hexadecimal characters.
     */
    color?: string;
    /**
     * Specifies whether the text should be in italic.
     */
    italic?: boolean;
    /**
     * The name of the typeface that should be applied to the text.
     */
    name?: string;
    /**
     * The font size specified in points (1/72 of an inch).
     */
    size?: number;
    /**
     * The underline formatting style.
     */
    underline?: ExcelUnderlineType;
  }
  export type ExcelUnderlineType =
    | 'double'
    | 'doubleAccounting'
    | 'none'
    | 'single'
    | 'singleAccounting';
}
declare module DevExpress.fileManagement {
  /**
   * A custom file system provider allows you to implement custom APIs to access and use file systems.
   */
  export class CustomFileSystemProvider extends FileSystemProviderBase {
    constructor(
      options?: DevExpress.fileManagement.CustomFileSystemProvider.Options
    );
  }
  module CustomFileSystemProvider {
    export type Options = CustomFileSystemProviderOptions;
  }
  /**
   * @deprecated Use Options instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface CustomFileSystemProviderOptions
    extends FileSystemProviderBaseOptions<CustomFileSystemProvider> {
    /**
     * A function that cancels the file upload.
     */
    abortFileUpload?: (
      file: File,
      uploadInfo: UploadInfo,
      destinationDirectory: FileSystemItem
    ) => PromiseLike<any> | any;

    /**
     * A function that copies files or directories.
     */
    copyItem?: (
      item: FileSystemItem,
      destinationDirectory: FileSystemItem
    ) => PromiseLike<any> | any;

    /**
     * A function that creates a directory.
     */
    createDirectory?: (
      parentDirectory: FileSystemItem,
      name: string
    ) => PromiseLike<any> | any;

    /**
     * A function that deletes a file or directory.
     */
    deleteItem?: (item: FileSystemItem) => PromiseLike<any> | any;

    /**
     * A function that downloads files.
     */
    downloadItems?: (items: Array<FileSystemItem>) => void;

    /**
     * A function that gets file system items.
     */
    getItems?: (
      parentDirectory: FileSystemItem
    ) => PromiseLike<Array<any>> | Array<any>;

    /**
     * A function that get items content.
     */
    getItemsContent?: (items: Array<FileSystemItem>) => PromiseLike<any> | any;

    /**
     * A function or the name of a data source field that provides information on whether a file or directory contains sub directories.
     */
    hasSubDirectoriesExpr?: string | Function;

    /**
     * A function that moves files and directories.
     */
    moveItem?: (
      item: FileSystemItem,
      destinationDirectory: FileSystemItem
    ) => PromiseLike<any> | any;

    /**
     * A function that renames files and directories.
     */
    renameItem?: (
      item: FileSystemItem,
      newName: string
    ) => PromiseLike<any> | any;

    /**
     * A function that uploads a file in chunks.
     */
    uploadFileChunk?: (
      file: File,
      uploadInfo: UploadInfo,
      destinationDirectory: FileSystemItem
    ) => PromiseLike<any> | any;
  }
  /**
   * An object that contains information about the error.
   */
  export class FileSystemError {
    constructor(
      errorCode?: number,
      fileSystemItem?: FileSystemItem,
      errorText?: string
    );
    /**
     * The processed file or directory.
     */
    fileSystemItem?: FileSystemItem;

    /**
     * The error code.
     */
    errorCode?: number;

    /**
     * The error message.
     */
    errorText?: string;
  }
  /**
   * An object that provides information about a file system item (file or directory) in the FileManager UI component.
   */
  export class FileSystemItem {
    constructor(path: string, isDirectory: boolean, pathKeys?: Array<string>);

    /**
     * The file system item&apos;s path.
     */
    path: string;

    /**
     * The file system item&apos;s path specified in keys.
     */
    pathKeys: Array<string>;

    /**
     * The file system item&apos;s key.
     */
    key: string;

    /**
     * The file system item&apos;s name.
     */
    name: string;

    /**
     * A timestamp that indicates when the file system item was last modified.
     */
    dateModified: Date;

    /**
     * The file system item&apos;s size (in bytes).
     */
    size: number;

    /**
     * Specifies whether the file system item is a directory.
     */
    isDirectory: boolean;

    /**
     * Specifies whether a directory has subdirectories.
     */
    hasSubDirectories: boolean;

    /**
     * An icon (URL) to be used as the file system item&apos;s thumbnail.
     */
    thumbnail: string;

    /**
     * The file system data object that stores information about the file system item (name, size, modification date, etc.).
     */
    dataItem: any;

    /**
     * Gets a file&apos;s extension.
     */
    getFileExtension(): string;
  }
  /**
   * Contains base provider settings.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export class FileSystemProviderBase {
    constructor(options?: FileSystemProviderBaseOptions);
    /**
     * Gets file system items.
     */
    getItems(
      parentDirectory: FileSystemItem
    ): DevExpress.core.utils.DxPromise<Array<FileSystemItem>>;

    /**
     * Renames a file or directory.
     */
    renameItem(
      item: FileSystemItem,
      newName: string
    ): DevExpress.core.utils.DxPromise<any>;

    /**
     * Creates a directory.
     */
    createDirectory(
      parentDirectory: FileSystemItem,
      name: string
    ): DevExpress.core.utils.DxPromise<any>;

    /**
     * Deletes files or directories.
     */
    deleteItems(
      items: Array<FileSystemItem>
    ): Array<DevExpress.core.utils.DxPromise<any>>;

    /**
     * Moves files and directories.
     */
    moveItems(
      items: Array<FileSystemItem>,
      destinationDirectory: FileSystemItem
    ): Array<DevExpress.core.utils.DxPromise<any>>;

    /**
     * Copies files or directories.
     */
    copyItems(
      items: Array<FileSystemItem>,
      destinationDirectory: FileSystemItem
    ): Array<DevExpress.core.utils.DxPromise<any>>;

    /**
     * Uploads a file in chunks.
     */
    uploadFileChunk(
      fileData: File,
      uploadInfo: UploadInfo,
      destinationDirectory: FileSystemItem
    ): DevExpress.core.utils.DxPromise<any>;

    /**
     * Cancels the file upload.
     */
    abortFileUpload(
      fileData: File,
      uploadInfo: UploadInfo,
      destinationDirectory: FileSystemItem
    ): DevExpress.core.utils.DxPromise<any>;

    /**
     * Downloads files.
     */
    downloadItems(items: Array<FileSystemItem>): void;

    /**
     * Gets items content.
     */
    getItemsContent(
      items: Array<FileSystemItem>
    ): DevExpress.core.utils.DxPromise<any>;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface FileSystemProviderBaseOptions<T = FileSystemProviderBase> {
    /**
     * Specifies which data field provides timestamps that indicate when a file was last modified.
     */
    dateModifiedExpr?: string | Function;
    /**
     * Specifies which data field provides information about whether a file system item is a directory.
     */
    isDirectoryExpr?: string | Function;
    /**
     * Specifies the data field that provides keys.
     */
    keyExpr?: string | Function;
    /**
     * Specifies which data field provides file and directory names.
     */
    nameExpr?: string | Function;
    /**
     * Specifies which data field provides file sizes.
     */
    sizeExpr?: string | Function;
    /**
     * Specifies which data field provides icons to be used as thumbnails.
     */
    thumbnailExpr?: string | Function;
  }
  /**
   * The Object file system provider works with a file system represented by an in-memory array of JSON objects.
   */
  export class ObjectFileSystemProvider extends FileSystemProviderBase {
    constructor(
      options?: DevExpress.fileManagement.ObjectFileSystemProvider.Options
    );
  }
  module ObjectFileSystemProvider {
    export type Options = ObjectFileSystemProviderOptions;
  }
  /**
   * @deprecated Use Options instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface ObjectFileSystemProviderOptions
    extends FileSystemProviderBaseOptions<ObjectFileSystemProvider> {
    /**
     * Specifies which data field provides information about files content.
     */
    contentExpr?: string | Function;
    /**
     * Specifies an array of data objects that represent files and directories.
     */
    data?: Array<any>;
    /**
     * Specifies which data field provides information about nested files and directories.
     */
    itemsExpr?: string | Function;
  }
  /**
   * The Remote file system provider works with a file system located on the server.
   */
  export class RemoteFileSystemProvider extends FileSystemProviderBase {
    constructor(
      options?: DevExpress.fileManagement.RemoteFileSystemProvider.Options
    );
  }
  module RemoteFileSystemProvider {
    export type Options = RemoteFileSystemProviderOptions;
  }
  /**
   * @deprecated Use Options instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface RemoteFileSystemProviderOptions
    extends FileSystemProviderBaseOptions<RemoteFileSystemProvider> {
    /**
     * Specifies a function that customizes an Ajax request before it is sent to the server.
     */
    beforeAjaxSend?: (options: {
      headers?: any;
      xhrFields?: any;
      formData?: any;
    }) => void;
    /**
     * Specifies a function that customizes a form submit request before it is sent to the server.
     */
    beforeSubmit?: (options: { formData?: any }) => void;
    /**
     * Specifies the URL of an endpoint used to access and modify a file system located on the server.
     */
    endpointUrl?: string;
    /**
     * Specifies which data field provides information about whether a directory has subdirectories.
     */
    hasSubDirectoriesExpr?: string | Function;
    /**
     * Specifies the request headers.
     */
    requestHeaders?: any;
  }
  /**
   * An object that provides information about the file upload session.
   */
  export interface UploadInfo {
    /**
     * The number of bytes that is uploaded to the server.
     */
    bytesUploaded: number;

    /**
     * The number of uploaded chunks and chunks that are to be uploaded.
     */
    chunkCount: number;

    /**
     * Information saved during the file upload.
     */
    customData: any;

    /**
     * The binary content of the uploading chunk.
     */
    chunkBlob: Blob;

    /**
     * The index of the uploading chunk.
     */
    chunkIndex: number;
  }
}
declare module DevExpress.localization {
  /**
   * Converts a Date object to a string using the specified format.
   */
  export function formatDate(value: Date, format: DevExpress.ui.Format): string;
  /**
   * Substitutes the provided value(s) for placeholders in a message that the key specifies.
   */
  export function formatMessage(key: string, ...values: Array<string>): string;
  /**
   * Converts a numeric value to a string using the specified format.
   */
  export function formatNumber(
    value: number,
    format: DevExpress.ui.Format
  ): string;
  /**
   * Loads localized messages.
   */
  export function loadMessages(messages: any): void;
  /**
   * Gets the current locale identifier.
   */
  export function locale(): string;
  /**
   * Sets the current locale identifier.
   */
  export function locale(locale: string): void;
  /**
   * Parses a string into a Date object.
   */
  export function parseDate(text: string, format: DevExpress.ui.Format): Date;
  /**
   * Parses a string into a numeric value.
   */
  export function parseNumber(
    text: string,
    format: DevExpress.ui.Format
  ): number;
}
declare module DevExpress.pdfExporter {
  /**
   * 
   */
  export interface Cell {
    /**
     * 
     */
    backgroundColor?: string;
    /**
     * 
     */
    borderColor?: string;
    /**
     * 
     */
    borderWidth?: number;
    /**
     * 
     */
    drawLeftBorder?: boolean;
    /**
     * 
     */
    drawTopBorder?: boolean;
    /**
     * 
     */
    drawRightBorder?: boolean;
    /**
     * 
     */
    drawBottomBorder?: boolean;
    /**
     * 
     */
    font?: {
      /**
       * 
       */
      size?: number;
      /**
       * 
       */
      name?: string;
      /**
       * 
       */
      style?: 'normal' | 'bold' | 'italic';
    };
    /**
     * 
     */
    horizontalAlign?: 'left' | 'center' | 'right';
    /**
     * 
     */
    padding?: {
      /**
       * 
       */
      top?: number;
      /**
       * 
       */
      left?: number;
      /**
       * 
       */
      right?: number;
      /**
       * 
       */
      bottom?: number;
    };
    /**
     * 
     */
    text?: string;
    /**
     * 
     */
    textColor?: string;
    /**
     * 
     */
    verticalAlign?: 'top' | 'middle' | 'bottom';
    /**
     * 
     */
    wordWrapEnabled?: boolean;
  }
  export type DataGridCell = PdfDataGridCell;
  /**
   * Exports grid data to a PDF file.
   */
  export function exportDataGrid(
    options: PdfExportDataGridProps
  ): DevExpress.core.utils.DxPromise<void>;
  /**
   * Exports Gantt data to a PDF file.
   */
  export function exportGantt(
    options: PdfExportGanttProps
  ): DevExpress.core.utils.DxPromise<any>;
  /**
   * @deprecated Use DataGridCell instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface PdfDataGridCell
    extends DevExpress.excelExporter.DataGridCell {}
  /**
   * Properties that can be passed as a parameter to the exportDataGrid(options) method from the pdfExporter module.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface PdfExportDataGridProps {
    /**
     * A jsPDF instance. This setting is required.
     */
    jsPDFDocument?: object;
    /**
     * A DataGrid instance. This setting is required.
     */
    component?: DevExpress.ui.dxDataGrid;
    /**
     * 
     */
    topLeft?: {
      /**
       * 
       */
      x?: number;
      /**
       * 
       */
      y?: number;
    };
    /**
     * 
     */
    columnWidths?: Array<number>;
    /**
     * 
     */
    indent?: number;
    /**
     * 
     */
    margin?: {
      /**
       * 
       */
      top?: number;
      /**
       * 
       */
      left?: number;
      /**
       * 
       */
      right?: number;
      /**
       * 
       */
      bottom?: number;
    };
    /**
     * 
     */
    repeatHeaders?: boolean;
    /**
     * Specifies whether or not to export only selected rows.
     */
    selectedRowsOnly?: boolean;
    /**
     * 
     */
    customDrawCell?: (options: {
      gridCell?: DataGridCell;
      pdfCell?: Cell;
      doc?: any;
      rect?: { x: number; y: number; h: number; w: number };
      cancel?: boolean;
    }) => void;
    /**
     * Customizes a cell in PDF after creation.
     */
    customizeCell?: (options: {
      gridCell?: DataGridCell;
      pdfCell?: Cell;
    }) => void;
    /**
     * 
     */
    onRowExporting?: (options: {
      rowCells?: Array<Cell>;
      rowHeight?: number;
    }) => void;
    /**
     * Configures the load panel.
     */
    loadPanel?: ExportLoadPanel;
  }
  /**
   * Properties that you can pass as a parameter to the exportGantt(options) method from the pdfExporter module.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface PdfExportGanttProps {
    /**
     * A function that creates a PDF document.
     */
    createDocumentMethod?: (options: any) => object;
    /**
     * A jsPDF instance. This setting is required.
     */
    jsPDFDocument?: object;
    /**
     * A Gantt instance. This setting is required.
     */
    component?: DevExpress.ui.dxGantt;
    /**
     * Specifies the document size.
     */
    format?: string | object;
    /**
     * Specifies whether to use horizontal orientation for the document.
     */
    landscape?: boolean;
    /**
     * Specifies the file name.
     */
    fileName?: string;
    /**
     * Specifies the outer indents of the exported area.
     */
    margins?: object;
    /**
     * Specifies which part of the component to export (chart area, tree list area, or the entire component).
     */
    exportMode?: DevExpress.ui.dxGantt.GanttPdfExportMode;
    /**
     * Specifies the date range for which to export tasks.
     */
    dateRange?: DevExpress.ui.dxGantt.GanttPdfExportDateRange | object;
    /**
     * 
     */
    font?: PdfExportGanttFont;
  }
}
declare module DevExpress.ui {
  /**
   * A custom validation rule that is checked asynchronously. Use async rules for server-side validation.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface AsyncRule {
    /**
     * If true, the validationCallback is not executed for null, undefined, false, and empty strings.
     */
    ignoreEmptyValue?: boolean;
    /**
     * Specifies the message that is shown if the rule is broken.
     */
    message?: string;
    /**
     * Indicates whether the rule should always be checked for the target value or only when the value changes.
     */
    reevaluate?: boolean;
    /**
     * Specifies the rule type. Set it to &apos;async&apos; to use the AsyncRule.
     */
    type: 'async';
    /**
     * A function that validates the target value.
     */
    validationCallback?: (options: ValidationCallbackData) => PromiseLike<any>;
  }
  /**
   * Specifies dependency between the screen factor and the count of columns.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface ColCountResponsible {
    /**
     * The count of columns for a large screen size.
     */
    lg?: number;
    /**
     * The count of columns for a middle-sized screen.
     */
    md?: number;
    /**
     * The count of columns for a small-sized screen.
     */
    sm?: number;
    /**
     * The count of columns for an extra small-sized screen.
     */
    xs?: number;
  }
  /**
   * The base class for UI components containing an item collection.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export class CollectionWidget<
    TProperties extends CollectionWidgetOptions<any, TItem, TKey>,
    TItem extends DevExpress.ui.CollectionWidget.ItemLike = any,
    TKey = any
  > extends Widget<TProperties> {
    getDataSource(): DevExpress.data.DataSource<TItem, TKey>;
  }
  module CollectionWidget {
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export type ItemLike = string | CollectionWidgetItem | any;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export interface SelectionChangedInfo<TItem extends ItemLike = any> {
      readonly addedItems: Array<TItem>;
      readonly removedItems: Array<TItem>;
    }
  }
  /**
   * 
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface CollectionWidgetItem {
    /**
     * Specifies whether the UI component item responds to user interaction.
     */
    disabled?: boolean;
    /**
     * Specifies the HTML markup to be inserted into the item element.
     */
    html?: string;
    /**
     * Specifies a template that should be used to render this item only.
     */
    template?:
      | DevExpress.core.template
      | ((
          itemData: this,
          itemIndex: number,
          itemElement: DevExpress.core.DxElement
        ) => string | DevExpress.core.UserDefinedElement);
    /**
     * Specifies text displayed for the UI component item.
     */
    text?: string;
    /**
     * Specifies whether or not a UI component item must be displayed.
     */
    visible?: boolean;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface CollectionWidgetOptions<
    TComponent extends CollectionWidget<any, TItem, TKey> | any,
    TItem extends DevExpress.ui.CollectionWidget.ItemLike = any,
    TKey = any
  > extends WidgetOptions<TComponent> {
    /**
     * Binds the UI component to data.
     */
    dataSource?: DevExpress.data.DataSource.DataSourceLike<TItem, TKey> | null;
    /**
     * The time period in milliseconds before the onItemHold event is raised.
     */
    itemHoldTimeout?: number;
    /**
     * Specifies a custom template for items.
     */
    itemTemplate?:
      | DevExpress.core.template
      | ((
          itemData: TItem,
          itemIndex: number,
          itemElement: DevExpress.core.DxElement
        ) => string | DevExpress.core.UserDefinedElement);
    /**
     * An array of items displayed by the UI component.
     */
    items?: Array<TItem>;
    /**
     * Specifies the key property that provides key values to access data items. Each key value must be unique.
     */
    keyExpr?: string | Function;
    /**
     * Specifies the text or HTML markup displayed by the UI component if the item collection is empty.
     */
    noDataText?: string;
    /**
     * A function that is executed when a collection item is clicked or tapped.
     */
    onItemClick?:
      | ((
          e: DevExpress.events.NativeEventInfo<
            TComponent,
            MouseEvent | PointerEvent
          > &
            DevExpress.events.ItemInfo<TItem>
        ) => void)
      | string;
    /**
     * A function that is executed when a collection item is right-clicked or pressed.
     */
    onItemContextMenu?: (
      e: DevExpress.events.NativeEventInfo<
        TComponent,
        MouseEvent | PointerEvent | TouchEvent
      > &
        DevExpress.events.ItemInfo<TItem>
    ) => void;
    /**
     * A function that is executed when a collection item has been held for a specified period.
     */
    onItemHold?: (
      e: DevExpress.events.NativeEventInfo<
        TComponent,
        MouseEvent | PointerEvent | TouchEvent
      > &
        DevExpress.events.ItemInfo<TItem>
    ) => void;
    /**
     * A function that is executed after a collection item is rendered.
     */
    onItemRendered?: (
      e: DevExpress.events.EventInfo<TComponent> &
        DevExpress.events.ItemInfo<TItem>
    ) => void;
    /**
     * A function that is executed when a collection item is selected or selection is canceled.
     */
    onSelectionChanged?: (
      e: DevExpress.events.EventInfo<TComponent> &
        DevExpress.ui.CollectionWidget.SelectionChangedInfo<TItem>
    ) => void;
    /**
     * The index of the currently selected UI component item.
     */
    selectedIndex?: number;
    /**
     * The selected item object.
     */
    selectedItem?: TItem;
    /**
     * Specifies an array of currently selected item keys.
     */
    selectedItemKeys?: Array<TKey>;
    /**
     * An array of currently selected item objects.
     */
    selectedItems?: Array<TItem>;
  }
  /**
   * A validation rule that demands that a validated editor has a value that is equal to a specified expression.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface CompareRule {
    /**
     * Specifies the function whose return value is used for comparison with the validated value.
     */
    comparisonTarget?: () => any;
    /**
     * Specifies the operator to be used for comparing the validated value with the target.
     */
    comparisonType?: ComparisonOperator;
    /**
     * If set to true, empty values are valid.
     */
    ignoreEmptyValue?: boolean;
    /**
     * Specifies the message that is shown if the rule is broken.
     */
    message?: string;
    /**
     * Specifies the rule type. Set it to &apos;compare&apos; to use the CompareRule.
     */
    type: 'compare';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export type ComparisonOperator =
    | '!='
    | '!=='
    | '<'
    | '<='
    | '=='
    | '==='
    | '>'
    | '>=';
  export interface CustomDialogOptions {
    title?: string;
    messageHtml?: string;
    buttons?: Array<dxButtonOptions>;
    showTitle?: boolean;
    message?: string;
    dragEnabled?: boolean;
  }
  /**
   * A rule with custom validation logic.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface CustomRule {
    /**
     * If true, the validationCallback is not executed for null, undefined, false, and empty strings.
     */
    ignoreEmptyValue?: boolean;
    /**
     * Specifies the message that is shown if the rule is broken.
     */
    message?: string;
    /**
     * Indicates whether the rule should be always checked for the target value or only when the target value changes.
     */
    reevaluate?: boolean;
    /**
     * Specifies the rule type. Set it to &apos;custom&apos; to use the CustomRule.
     */
    type: 'custom';
    /**
     * A function that validates the target value.
     */
    validationCallback?: (options: ValidationCallbackData) => boolean;
  }
  /**
   * 
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export class DataExpressionMixin {
    constructor(options?: DataExpressionMixinOptions);
    getDataSource(): DevExpress.data.DataSource;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface DataExpressionMixinOptions<T = DataExpressionMixin> {
    /**
     * Binds the UI component to data.
     */
    dataSource?: DevExpress.data.DataSource.DataSourceLike<
      CollectionWidgetItem | any
    > | null;
    /**
     * Specifies the data field whose values should be displayed.
     */
    displayExpr?: string | ((item: any) => string);
    /**
     * Specifies a custom template for items.
     */
    itemTemplate?:
      | DevExpress.core.template
      | ((
          itemData: any,
          itemIndex: number,
          itemElement: DevExpress.core.DxElement
        ) => string | DevExpress.core.UserDefinedElement);
    /**
     * An array of items displayed by the UI component.
     */
    items?: Array<CollectionWidgetItem | any>;
    /**
     * Specifies the currently selected value. May be an object if dataSource contains objects and valueExpr is not set.
     */
    value?: any;
    /**
     * Specifies which data field provides unique values to the UI component&apos;s value.
     */
    valueExpr?: string | ((item: any) => string | number | boolean);
  }
  /**
   * 
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface DraggableBase {}
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface DraggableBaseOptions<TComponent>
    extends DOMComponentOptions<TComponent> {
    /**
     * Enables automatic scrolling while dragging an item beyond the viewport.
     */
    autoScroll?: boolean;
    /**
     * Specifies a DOM element that limits the dragging area.
     */
    boundary?: string | DevExpress.core.UserDefinedElement;
    /**
     * Specifies a custom container in which the draggable item should be rendered.
     */
    container?: string | DevExpress.core.UserDefinedElement;
    /**
     * Specifies the cursor offset from the dragged item.
     */
    cursorOffset?:
      | string
      | {
          /**
           * Specifies the horizontal cursor offset from the dragged item in pixels.
           */
          x?: number;
          /**
           * Specifies the vertical cursor offset from the dragged item in pixels.
           */
          y?: number;
        };
    /**
     * A container for custom data.
     */
    data?: any;
    /**
     * Specifies the directions in which an item can be dragged.
     */
    dragDirection?: DevExpress.common.DragDirection;
    /**
     * Allows you to group several UI components, so that users can drag and drop items between them.
     */
    group?: string;
    /**
     * Specifies a CSS selector (ID or class) that should act as the drag handle(s) for the item(s).
     */
    handle?: string;
    /**
     * Specifies the distance in pixels from the edge of viewport at which scrolling should start. Applies only if autoScroll is true.
     */
    scrollSensitivity?: number;
    /**
     * Specifies the scrolling speed when dragging an item beyond the viewport. Applies only if autoScroll is true.
     */
    scrollSpeed?: number;
  }
  /**
   * The Accordion UI component contains several panels displayed one under another. These panels can be collapsed or expanded by an end user, which makes this UI component very useful for presenting information in a limited amount of space.
   */
  export class dxAccordion<
    TItem extends DevExpress.ui.dxAccordion.ItemLike = any,
    TKey = any
  > extends CollectionWidget<dxAccordionOptions<TItem, TKey>, TItem, TKey> {
    /**
     * Collapses an item with a specific index.
     */
    collapseItem(index: number): DevExpress.core.utils.DxPromise<void>;
    /**
     * Expands an item with a specific index.
     */
    expandItem(index: number): DevExpress.core.utils.DxPromise<void>;
    /**
     * Updates the dimensions of the UI component contents.
     */
    updateDimensions(): DevExpress.core.utils.DxPromise<void>;
  }
  module dxAccordion {
    export type ContentReadyEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxAccordion<TItem, TKey>>;
    export type DisposingEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxAccordion<TItem, TKey>>;
    export type ExplicitTypes<TItem extends ItemLike, TKey> = {
      Properties: Properties<TItem, TKey>;
      ContentReadyEvent: ContentReadyEvent<TItem, TKey>;
      DisposingEvent: DisposingEvent<TItem, TKey>;
      InitializedEvent: InitializedEvent<TItem, TKey>;
      ItemClickEvent: ItemClickEvent<TItem, TKey>;
      ItemContextMenuEvent: ItemContextMenuEvent<TItem, TKey>;
      ItemHoldEvent: ItemHoldEvent<TItem, TKey>;
      ItemRenderedEvent: ItemRenderedEvent<TItem, TKey>;
      ItemTitleClickEvent: ItemTitleClickEvent<TItem, TKey>;
      OptionChangedEvent: OptionChangedEvent<TItem, TKey>;
      SelectionChangedEvent: SelectionChangedEvent<TItem, TKey>;
    };
    export type InitializedEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.InitializedEventInfo<dxAccordion<TItem, TKey>>;
    export type ItemClickEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.NativeEventInfo<
      dxAccordion<TItem, TKey>,
      KeyboardEvent | MouseEvent | PointerEvent
    > &
      DevExpress.events.ItemInfo<TItem>;
    export type ItemContextMenuEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.NativeEventInfo<
      dxAccordion<TItem, TKey>,
      MouseEvent | PointerEvent | TouchEvent
    > &
      DevExpress.events.ItemInfo<TItem>;
    export type ItemHoldEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.NativeEventInfo<
      dxAccordion<TItem, TKey>,
      MouseEvent | PointerEvent | TouchEvent
    > &
      DevExpress.events.ItemInfo<TItem>;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    type ItemLike = string | Item | any;
    export type ItemRenderedEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxAccordion<TItem, TKey>> &
      DevExpress.events.ItemInfo<TItem>;
    export type ItemTitleClickEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.NativeEventInfo<
      dxAccordion<TItem, TKey>,
      MouseEvent | PointerEvent
    > &
      DevExpress.events.ItemInfo<TItem>;
    export type OptionChangedEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxAccordion<TItem, TKey>> &
      DevExpress.events.ChangedOptionInfo;
    export type Properties<
      TItem extends ItemLike = any,
      TKey = any
    > = dxAccordionOptions<TItem, TKey>;
    export type SelectionChangedEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxAccordion<TItem, TKey>> &
      DevExpress.ui.CollectionWidget.SelectionChangedInfo<TItem>;
  }
  /**
   * @deprecated Use Item instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxAccordionItem extends CollectionWidgetItem {
    /**
     * Specifies the icon to be displayed in the panel&apos;s title.
     */
    icon?: string;
    /**
     * Specifies text displayed for the UI component item title.
     */
    title?: string;
  }
  /**
   * @deprecated use Properties instead
   */
  export interface dxAccordionOptions<
    TItem extends DevExpress.ui.dxAccordion.ItemLike = any,
    TKey = any
  > extends CollectionWidgetOptions<dxAccordion<TItem, TKey>, TItem, TKey> {
    /**
     * A number specifying the time in milliseconds spent on the animation of the expanding or collapsing of a panel.
     */
    animationDuration?: number;
    /**
     * Specifies whether all items can be collapsed or whether at least one item must always be expanded.
     */
    collapsible?: boolean;
    /**
     * Binds the UI component to data.
     */
    dataSource?: DevExpress.data.DataSource.DataSourceLike<TItem, TKey> | null;
    /**
     * Specifies whether to render the panel&apos;s content when it is displayed. If false, the content is rendered immediately.
     */
    deferRendering?: boolean;
    /**
     * Specifies whether the UI component can be focused using keyboard navigation.
     */
    focusStateEnabled?: boolean;
    /**
     * Specifies the UI component&apos;s height.
     */
    height?: number | string | (() => number | string);
    /**
     * Specifies whether the UI component changes its state when a user pauses on it.
     */
    hoverStateEnabled?: boolean;
    /**
     * Specifies a custom template for items.
     */
    itemTemplate?:
      | DevExpress.core.template
      | ((
          itemData: TItem,
          itemIndex: number,
          itemElement: DevExpress.core.DxElement
        ) => string | DevExpress.core.UserDefinedElement);
    /**
     * Specifies a custom template for item titles.
     */
    itemTitleTemplate?:
      | DevExpress.core.template
      | ((
          itemData: TItem,
          itemIndex: number,
          itemElement: DevExpress.core.DxElement
        ) => string | DevExpress.core.UserDefinedElement);
    /**
     * An array of items displayed by the UI component.
     */
    items?: Array<TItem>;
    /**
     * Specifies whether the UI component can expand several items or only a single item at once.
     */
    multiple?: boolean;
    /**
     * A function that is executed when an accordion item&apos;s title is clicked or tapped.
     */
    onItemTitleClick?:
      | ((
          e: DevExpress.ui.dxAccordion.ItemTitleClickEvent<TItem, TKey>
        ) => void)
      | string;
    /**
     * Specifies whether to repaint only those elements whose data changed.
     */
    repaintChangesOnly?: boolean;
    /**
     * The index number of the currently expanded item.
     */
    selectedIndex?: number;
  }
  /**
   * The ActionSheet UI component is a sheet containing a set of buttons located one under the other. These buttons usually represent several choices relating to a single task.
   */
  export class dxActionSheet<
    TItem extends DevExpress.ui.dxActionSheet.ItemLike<TKey> = any,
    TKey = any
  > extends CollectionWidget<dxActionSheetOptions<TItem, TKey>, TItem, TKey> {
    /**
     * Hides the UI component.
     */
    hide(): DevExpress.core.utils.DxPromise<void>;
    /**
     * Shows the UI component.
     */
    show(): DevExpress.core.utils.DxPromise<void>;
    /**
     * Shows or hides the UI component depending on the argument.
     */
    toggle(showing: boolean): DevExpress.core.utils.DxPromise<void>;
  }
  module dxActionSheet {
    export type CancelClickEvent<
      TItem extends ItemLike<TKey> = any,
      TKey = any
    > = DevExpress.events.Cancelable &
      DevExpress.events.EventInfo<dxActionSheet<TItem, TKey>>;
    export type ContentReadyEvent<
      TItem extends ItemLike<TKey> = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxActionSheet<TItem, TKey>>;
    export type DisposingEvent<
      TItem extends ItemLike<TKey> = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxActionSheet<TItem, TKey>>;
    export type ExplicitTypes<TItem extends ItemLike<TKey>, TKey> = {
      Properties: Properties<TItem, TKey>;
      CancelClickEvent: CancelClickEvent<TItem, TKey>;
      ContentReadyEvent: ContentReadyEvent<TItem, TKey>;
      DisposingEvent: DisposingEvent<TItem, TKey>;
      InitializedEvent: InitializedEvent<TItem, TKey>;
      ItemClickEvent: ItemClickEvent<TItem, TKey>;
      ItemContextMenuEvent: ItemContextMenuEvent<TItem, TKey>;
      ItemHoldEvent: ItemHoldEvent<TItem, TKey>;
      ItemRenderedEvent: ItemRenderedEvent<TItem, TKey>;
      OptionChangedEvent: OptionChangedEvent<TItem, TKey>;
    };
    export type InitializedEvent<
      TItem extends ItemLike<TKey> = any,
      TKey = any
    > = DevExpress.events.InitializedEventInfo<dxActionSheet<TItem, TKey>>;
    export type ItemClickEvent<
      TItem extends ItemLike<TKey> = any,
      TKey = any
    > = DevExpress.events.NativeEventInfo<
      dxActionSheet<TItem, TKey>,
      KeyboardEvent | MouseEvent | PointerEvent
    > &
      DevExpress.events.ItemInfo<TItem>;
    export type ItemContextMenuEvent<
      TItem extends ItemLike<TKey> = any,
      TKey = any
    > = DevExpress.events.NativeEventInfo<
      dxActionSheet<TItem, TKey>,
      MouseEvent | PointerEvent | TouchEvent
    > &
      DevExpress.events.ItemInfo<TItem>;
    export type ItemHoldEvent<
      TItem extends ItemLike<TKey> = any,
      TKey = any
    > = DevExpress.events.NativeEventInfo<
      dxActionSheet<TItem, TKey>,
      MouseEvent | PointerEvent | TouchEvent
    > &
      DevExpress.events.ItemInfo<TItem>;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    type ItemLike<TKey> = string | Item<TKey> | any;
    export type ItemRenderedEvent<
      TItem extends ItemLike<TKey> = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxActionSheet<TItem, TKey>> &
      DevExpress.events.ItemInfo<TItem>;
    export type OptionChangedEvent<
      TItem extends ItemLike<TKey> = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxActionSheet<TItem, TKey>> &
      DevExpress.events.ChangedOptionInfo;
    export type Properties<
      TItem extends ItemLike<TKey> = any,
      TKey = any
    > = dxActionSheetOptions<TItem, TKey>;
  }
  /**
   * @deprecated Use Item instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxActionSheetItem<TKey = any> extends CollectionWidgetItem {
    /**
     * Specifies the icon to be displayed on the action sheet button.
     */
    icon?: string;
    /**
     * A handler for the click event raised for the button representing the given action sheet button.
     */
    onClick?:
      | ((
          e: DevExpress.events.NativeEventInfo<
            dxActionSheet<this, TKey>,
            MouseEvent | PointerEvent
          >
        ) => void)
      | string;
    /**
     * Specifies the type of the button that is an action sheet item.
     */
    type?: DevExpress.common.ButtonType;
    /**
     * Specifies which style to apply to the button that is an action sheet item.
     */
    stylingMode?: DevExpress.common.ButtonStyle;
  }
  /**
   * @deprecated use Properties instead
   */
  export interface dxActionSheetOptions<
    TItem extends DevExpress.ui.dxActionSheet.ItemLike<TKey> = any,
    TKey = any
  > extends CollectionWidgetOptions<dxActionSheet<TItem, TKey>, TItem, TKey> {
    /**
     * The text displayed in the button that closes the action sheet.
     */
    cancelText?: string;
    /**
     * Binds the UI component to data.
     */
    dataSource?: DevExpress.data.DataSource.DataSourceLike<TItem, TKey> | null;
    /**
     * An array of items displayed by the UI component.
     */
    items?: Array<TItem>;
    /**
     * A function that is executed when the Cancel button is clicked or tapped.
     */
    onCancelClick?:
      | ((e: DevExpress.ui.dxActionSheet.CancelClickEvent<TItem, TKey>) => void)
      | string;
    /**
     * Specifies whether or not to display the Cancel button in action sheet.
     */
    showCancelButton?: boolean;
    /**
     * A Boolean value specifying whether or not the title of the action sheet is visible.
     */
    showTitle?: boolean;
    /**
     * Specifies the element the action sheet popover points at. Applies only if usePopover is true.
     */
    target?: string | DevExpress.core.UserDefinedElement;
    /**
     * The title of the action sheet.
     */
    title?: string;
    /**
     * Specifies whether or not to show the action sheet within a Popover UI component.
     */
    usePopover?: boolean;
    /**
     * A Boolean value specifying whether or not the ActionSheet UI component is visible.
     */
    visible?: boolean;
  }
  /**
   * The Autocomplete UI component is a textbox that provides suggestions while a user types into it.
   */
  export class dxAutocomplete extends dxDropDownList<dxAutocompleteOptions> {}
  module dxAutocomplete {
    export type ChangeEvent = DevExpress.events.NativeEventInfo<
      dxAutocomplete,
      Event
    >;
    export type ClosedEvent = DevExpress.events.EventInfo<dxAutocomplete>;
    export type ContentReadyEvent = DevExpress.events.EventInfo<dxAutocomplete>;
    export type CopyEvent = DevExpress.events.NativeEventInfo<
      dxAutocomplete,
      ClipboardEvent
    >;
    export type CutEvent = DevExpress.events.NativeEventInfo<
      dxAutocomplete,
      ClipboardEvent
    >;
    export type DisposingEvent = DevExpress.events.EventInfo<dxAutocomplete>;
    export type DropDownButtonTemplateData =
      DevExpress.ui.dxDropDownEditor.DropDownButtonTemplateDataModel;
    export type EnterKeyEvent = DevExpress.events.NativeEventInfo<
      dxAutocomplete,
      KeyboardEvent
    >;
    export type FocusInEvent = DevExpress.events.NativeEventInfo<
      dxAutocomplete,
      FocusEvent
    >;
    export type FocusOutEvent = DevExpress.events.NativeEventInfo<
      dxAutocomplete,
      FocusEvent
    >;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxAutocomplete>;
    export type InputEvent = DevExpress.events.NativeEventInfo<
      dxAutocomplete,
      UIEvent & { target: HTMLInputElement }
    >;
    export type ItemClickEvent = DevExpress.events.NativeEventInfo<
      dxAutocomplete,
      KeyboardEvent | MouseEvent | PointerEvent
    > &
      DevExpress.events.ItemInfo;
    export type KeyDownEvent = DevExpress.events.NativeEventInfo<
      dxAutocomplete,
      KeyboardEvent
    >;
    export type KeyPressEvent = DevExpress.events.NativeEventInfo<
      dxAutocomplete,
      KeyboardEvent
    >;
    export type KeyUpEvent = DevExpress.events.NativeEventInfo<
      dxAutocomplete,
      KeyboardEvent
    >;
    export type OpenedEvent = DevExpress.events.EventInfo<dxAutocomplete>;
    export type OptionChangedEvent =
      DevExpress.events.EventInfo<dxAutocomplete> &
        DevExpress.events.ChangedOptionInfo;
    export type PasteEvent = DevExpress.events.NativeEventInfo<
      dxAutocomplete,
      ClipboardEvent
    >;
    export type Properties = dxAutocompleteOptions;
    export type SelectionChangedEvent =
      DevExpress.events.EventInfo<dxAutocomplete> &
        DevExpress.ui.dxDropDownList.SelectionChangedInfo;
    export type ValueChangedEvent = DevExpress.events.NativeEventInfo<
      dxAutocomplete,
      KeyboardEvent | MouseEvent | PointerEvent | Event
    > &
      DevExpress.ui.Editor.ValueChangedInfo;
  }
  /**
   * @deprecated use Properties instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxAutocompleteOptions
    extends dxDropDownListOptions<dxAutocomplete> {
    /**
     * Specifies the maximum count of items displayed by the UI component.
     */
    maxItemCount?: number;
    /**
     * The minimum number of characters that must be entered into the text box to begin a search.
     */
    minSearchLength?: number;
    /**
     * Specifies whether the drop-down button is visible.
     */
    showDropDownButton?: boolean;
    /**
     * Specifies the current value displayed by the UI component.
     */
    value?: string;

    /**
     * Configures the drop-down field which holds the content.
     */
    dropDownOptions?: DevExpress.ui.dxPopup.Properties;
  }
  /**
   * The Box UI component allows you to arrange various elements within it. Separate and adaptive, the Box UI component acts as a building block for the layout.
   */
  export class dxBox<
    TItem extends DevExpress.ui.dxBox.ItemLike<TKey> = any,
    TKey = any
  > extends CollectionWidget<dxBoxOptions<TItem, TKey>, TItem, TKey> {}
  module dxBox {
    export type BoxDirection = 'col' | 'row';
    export type ContentReadyEvent<
      TItem extends ItemLike<TKey> = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxBox<TItem, TKey>>;
    export type CrosswiseDistribution = 'center' | 'end' | 'start' | 'stretch';
    export type DisposingEvent<
      TItem extends ItemLike<TKey> = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxBox<TItem, TKey>>;
    export type Distribution =
      | 'center'
      | 'end'
      | 'space-around'
      | 'space-between'
      | 'start';
    export type ExplicitTypes<TItem extends ItemLike<TKey>, TKey> = {
      Properties: Properties<TItem, TKey>;
      ContentReadyEvent: ContentReadyEvent<TItem, TKey>;
      DisposingEvent: DisposingEvent<TItem, TKey>;
      InitializedEvent: InitializedEvent<TItem, TKey>;
      ItemClickEvent: ItemClickEvent<TItem, TKey>;
      ItemContextMenuEvent: ItemContextMenuEvent<TItem, TKey>;
      ItemHoldEvent: ItemHoldEvent<TItem, TKey>;
      ItemRenderedEvent: ItemRenderedEvent<TItem, TKey>;
      OptionChangedEvent: OptionChangedEvent<TItem, TKey>;
    };
    export type InitializedEvent<
      TItem extends ItemLike<TKey> = any,
      TKey = any
    > = DevExpress.events.InitializedEventInfo<dxBox<TItem, TKey>>;
    export type ItemClickEvent<
      TItem extends ItemLike<TKey> = any,
      TKey = any
    > = DevExpress.events.NativeEventInfo<
      dxBox<TItem, TKey>,
      MouseEvent | PointerEvent
    > &
      DevExpress.events.ItemInfo<TItem>;
    export type ItemContextMenuEvent<
      TItem extends ItemLike<TKey> = any,
      TKey = any
    > = DevExpress.events.NativeEventInfo<
      dxBox<TItem, TKey>,
      MouseEvent | PointerEvent | TouchEvent
    > &
      DevExpress.events.ItemInfo<TItem>;
    export type ItemHoldEvent<
      TItem extends ItemLike<TKey> = any,
      TKey = any
    > = DevExpress.events.NativeEventInfo<
      dxBox<TItem, TKey>,
      MouseEvent | PointerEvent | TouchEvent
    > &
      DevExpress.events.ItemInfo<TItem>;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    type ItemLike<TKey> = string | Item<TKey> | any;
    export type ItemRenderedEvent<
      TItem extends ItemLike<TKey> = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxBox<TItem, TKey>> &
      DevExpress.events.ItemInfo<TItem>;
    export type OptionChangedEvent<
      TItem extends ItemLike<TKey> = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxBox<TItem, TKey>> &
      DevExpress.events.ChangedOptionInfo;
    export type Properties<
      TItem extends ItemLike<TKey> = any,
      TKey = any
    > = dxBoxOptions<TItem, TKey>;
  }
  /**
   * @deprecated Use Item instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxBoxItem<TKey = any> extends CollectionWidgetItem {
    /**
     * Specifies the base size of an item element along the main direction.
     */
    baseSize?: number | DevExpress.common.Mode;
    /**
     * Holds a Box configuration object for the item.
     */
    box?: dxBoxOptions<any, TKey>;
    /**
     * Specifies the ratio value used to count the item element size along the main direction.
     */
    ratio?: number;
    /**
     * A factor that defines how much an item shrinks relative to the rest of the items in the container.
     */
    shrink?: number;
  }
  /**
   * @deprecated use Properties instead
   */
  export interface dxBoxOptions<
    TItem extends DevExpress.ui.dxBox.ItemLike<TKey> = any,
    TKey = any
  > extends CollectionWidgetOptions<dxBox<TItem, TKey>, TItem, TKey> {
    /**
     * Specifies how UI component items are aligned along the main direction.
     */
    align?: DevExpress.ui.dxBox.Distribution;
    /**
     * Specifies how UI component items are aligned cross-wise.
     */
    crossAlign?: DevExpress.ui.dxBox.CrosswiseDistribution;
    /**
     * Binds the UI component to data.
     */
    dataSource?: DevExpress.data.DataSource.DataSourceLike<TItem, TKey> | null;
    /**
     * Specifies the direction of item positioning in the UI component.
     */
    direction?: DevExpress.ui.dxBox.BoxDirection;
    /**
     * An array of items displayed by the UI component.
     */
    items?: Array<TItem>;
  }
  /**
   * The Button UI component is a simple button that performs specified commands when a user clicks it.
   */
  export class dxButton extends Widget<dxButtonOptions> {}
  module dxButton {
    export type ClickEvent = DevExpress.events.NativeEventInfo<
      dxButton,
      KeyboardEvent | MouseEvent | PointerEvent
    > & {
      validationGroup?: any;
    };
    export type ContentReadyEvent = DevExpress.events.EventInfo<dxButton>;
    export type DisposingEvent = DevExpress.events.EventInfo<dxButton>;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxButton>;
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxButton> &
      DevExpress.events.ChangedOptionInfo;
    export type Properties = dxButtonOptions;
    export type TemplateData = {
      readonly text?: string;
      readonly icon?: string;
    };
  }
  /**
   * The ButtonGroup is a UI component that contains a set of toggle buttons and can be used as a mode switcher.
   */
  export class dxButtonGroup extends Widget<dxButtonGroupOptions> {}
  module dxButtonGroup {
    export type ContentReadyEvent = DevExpress.events.EventInfo<dxButtonGroup>;
    export type DisposingEvent = DevExpress.events.EventInfo<dxButtonGroup>;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxButtonGroup>;
    export type ItemClickEvent = DevExpress.events.NativeEventInfo<
      dxButtonGroup,
      KeyboardEvent | MouseEvent | PointerEvent
    > &
      DevExpress.events.ItemInfo;
    export type OptionChangedEvent =
      DevExpress.events.EventInfo<dxButtonGroup> &
        DevExpress.events.ChangedOptionInfo;
    export type Properties = dxButtonGroupOptions;
    export type SelectionChangedEvent =
      DevExpress.events.EventInfo<dxButtonGroup> &
        DevExpress.ui.CollectionWidget.SelectionChangedInfo;
  }
  /**
   * @deprecated Use Item instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxButtonGroupItem extends CollectionWidgetItem {
    /**
     * Specifies a text for the hint that appears when the button is hovered over or long-pressed.
     */
    hint?: string;
    /**
     * Specifies the icon to be displayed on the button.
     */
    icon?: string;
    /**
     * Specifies the button type.
     */
    type?: DevExpress.common.ButtonType;

    /**
     * Specifies the global attributes to be attached to the button group item&apos;s container element.
     */
    elementAttr?: { [key: string]: any };
  }
  /**
   * @deprecated use Properties instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxButtonGroupOptions extends WidgetOptions<dxButtonGroup> {
    /**
     * Specifies a template for all the buttons in the group.
     */
    buttonTemplate?:
      | DevExpress.core.template
      | ((
          buttonData: any,
          buttonContent: DevExpress.core.DxElement
        ) => string | DevExpress.core.UserDefinedElement);
    /**
     * Specifies whether the UI component can be focused using keyboard navigation.
     */
    focusStateEnabled?: boolean;
    /**
     * Specifies whether the UI component changes its state when a user pauses on it.
     */
    hoverStateEnabled?: boolean;
    /**
     * Configures buttons in the group.
     */
    items?: Array<DevExpress.ui.dxButtonGroup.Item>;
    /**
     * Specifies which data field provides keys used to distinguish between the selected buttons.
     */
    keyExpr?: string | Function;
    /**
     * A function that is executed when a button is clicked or tapped.
     */
    onItemClick?: (e: DevExpress.ui.dxButtonGroup.ItemClickEvent) => void;
    /**
     * A function that is executed when a button is selected or selection is canceled.
     */
    onSelectionChanged?: (
      e: DevExpress.ui.dxButtonGroup.SelectionChangedEvent
    ) => void;
    /**
     * Contains the keys of the selected buttons and allows selecting buttons initially.
     */
    selectedItemKeys?: Array<any>;
    /**
     * Contains the data objects that correspond to the selected buttons. The data objects are taken from the items array.
     */
    selectedItems?: Array<any>;
    /**
     * Specifies the button selection mode.
     */
    selectionMode?: DevExpress.common.SingleMultipleOrNone;
    /**
     * Specifies how buttons in the group are styled.
     */
    stylingMode?: DevExpress.common.ButtonStyle;
  }
  /**
   * @deprecated use Properties instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxButtonOptions extends WidgetOptions<dxButton> {
    /**
     * A Boolean value specifying whether or not the UI component changes its state when interacting with a user.
     */
    activeStateEnabled?: boolean;
    /**
     * Specifies whether the UI component can be focused using keyboard navigation.
     */
    focusStateEnabled?: boolean;
    /**
     * Specifies whether the UI component changes its state when a user pauses on it.
     */
    hoverStateEnabled?: boolean;
    /**
     * Specifies the icon to be displayed on the button.
     */
    icon?: string;
    /**
     * A function that is executed when the Button is clicked or tapped.
     */
    onClick?: (e: DevExpress.ui.dxButton.ClickEvent) => void;
    /**
     * Specifies how the button is styled.
     */
    stylingMode?: DevExpress.common.ButtonStyle;
    /**
     * Specifies a custom template for the Button UI component.
     */
    template?:
      | DevExpress.core.template
      | ((
          data: DevExpress.ui.dxButton.TemplateData,
          contentElement: DevExpress.core.DxElement
        ) => string | DevExpress.core.UserDefinedElement);
    /**
     * The text displayed on the button.
     */
    text?: string;
    /**
     * Specifies the button type.
     */
    type?: DevExpress.common.ButtonType;
    /**
     * Specifies whether the button submits an HTML form.
     */
    useSubmitBehavior?: boolean;
    /**
     * Specifies the name of the validation group to be accessed in the click event handler.
     */
    validationGroup?: string;
  }
  /**
   * The Calendar is a UI component that displays a calendar and allows an end user to select the required date within a specified date range.
   */
  export class dxCalendar extends Editor<dxCalendarOptions> {}
  module dxCalendar {
    export type CalendarZoomLevel = 'century' | 'decade' | 'month' | 'year';
    export type CellTemplateData = {
      readonly date: Date;
      readonly view: string;
      readonly text?: string;
    };
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export interface ComponentDisabledDate<T> {
      component: T;
      readonly date: Date;
      readonly view: string;
    }
    export type ContentReadyEvent = DevExpress.events.EventInfo<dxCalendar>;
    export type DisabledDate = ComponentDisabledDate<dxCalendar>;
    export type DisposingEvent = DevExpress.events.EventInfo<dxCalendar>;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxCalendar>;
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxCalendar> &
      DevExpress.events.ChangedOptionInfo;
    export type Properties = dxCalendarOptions;
    export type ValueChangedEvent = DevExpress.events.NativeEventInfo<
      dxCalendar,
      KeyboardEvent | MouseEvent | PointerEvent | TouchEvent | Event
    > &
      DevExpress.ui.Editor.ValueChangedInfo;
  }
  /**
   * @deprecated use Properties instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxCalendarOptions extends EditorOptions<dxCalendar> {
    /**
     * Specifies whether or not the UI component changes its state when interacting with a user.
     */
    activeStateEnabled?: boolean;
    /**
     * Specifies a custom template for calendar cells.
     */
    cellTemplate?:
      | DevExpress.core.template
      | ((
          itemData: DevExpress.ui.dxCalendar.CellTemplateData,
          itemIndex: number,
          itemElement: DevExpress.core.DxElement
        ) => string | DevExpress.core.UserDefinedElement);
    /**
     * Specifies the date-time value serialization format. Use it only if you do not specify the value at design time.
     */
    dateSerializationFormat?: string;
    /**
     * Specifies dates that users cannot select.
     */
    disabledDates?:
      | Array<Date>
      | ((data: DevExpress.ui.dxCalendar.DisabledDate) => boolean);
    /**
     * Specifies the first day of a week.
     */
    firstDayOfWeek?: DevExpress.common.FirstDayOfWeek;
    /**
     * Specifies whether the UI component can be focused using keyboard navigation.
     */
    focusStateEnabled?: boolean;
    /**
     * Specifies whether the UI component changes its state when a user pauses on it.
     */
    hoverStateEnabled?: boolean;
    /**
     * The latest date the UI component allows to select.
     */
    max?: Date | number | string;
    /**
     * Specifies the maximum zoom level of the calendar.
     */
    maxZoomLevel?: DevExpress.ui.dxCalendar.CalendarZoomLevel;
    /**
     * The earliest date the UI component allows to select.
     */
    min?: Date | number | string;
    /**
     * Specifies the minimum zoom level of the calendar.
     */
    minZoomLevel?: DevExpress.ui.dxCalendar.CalendarZoomLevel;
    /**
     * The value to be assigned to the `name` attribute of the underlying HTML element.
     */
    name?: string;
    /**
     * Specifies whether or not the UI component displays a button that selects the current date.
     */
    showTodayButton?: boolean;
    /**
     * An object or a value specifying the date and time currently selected in the calendar.
     */
    value?: Date | number | string;
    /**
     * Specifies the current calendar zoom level.
     */
    zoomLevel?: DevExpress.ui.dxCalendar.CalendarZoomLevel;
  }
  /**
   * The CheckBox is a small box, which when selected by the end user, shows that a particular feature has been enabled or a specific property has been chosen.
   */
  export class dxCheckBox extends Editor<dxCheckBoxOptions> {
    /**
     * Removes focus from the check box.
     */
    blur(): void;
  }
  module dxCheckBox {
    export type ContentReadyEvent = DevExpress.events.EventInfo<dxCheckBox>;
    export type DisposingEvent = DevExpress.events.EventInfo<dxCheckBox>;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxCheckBox>;
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxCheckBox> &
      DevExpress.events.ChangedOptionInfo;
    export type Properties = dxCheckBoxOptions;
    export type ValueChangedEvent = DevExpress.events.NativeEventInfo<
      dxCheckBox,
      KeyboardEvent | MouseEvent | PointerEvent | TouchEvent | Event
    > &
      DevExpress.ui.Editor.ValueChangedInfo;
  }
  /**
   * @deprecated use Properties instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxCheckBoxOptions extends EditorOptions<dxCheckBox> {
    /**
     * Specifies whether or not the UI component changes its state when interacting with a user.
     */
    activeStateEnabled?: boolean;
    /**
     * Specifies whether the UI component can be focused using keyboard navigation.
     */
    focusStateEnabled?: boolean;
    /**
     * Specifies whether the UI component changes its state when a user pauses on it.
     */
    hoverStateEnabled?: boolean;
    /**
     * Specifies the check box icon&apos;s width and height.
     */
    iconSize?: number | string;
    /**
     * The value to be assigned to the `name` attribute of the underlying HTML element.
     */
    name?: string;
    /**
     * Specifies the text displayed by the check box.
     */
    text?: string;
    /**
     * Specifies the UI component state.
     */
    value?: boolean | null | undefined;
  }
  /**
   * The ColorBox is a UI component that allows an end user to enter a color or pick it out from the drop-down editor.
   */
  export class dxColorBox extends dxDropDownEditor<dxColorBoxOptions> {}
  module dxColorBox {
    export type ChangeEvent = DevExpress.events.NativeEventInfo<
      dxColorBox,
      Event
    >;
    export type ClosedEvent = DevExpress.events.EventInfo<dxColorBox>;
    export type CopyEvent = DevExpress.events.NativeEventInfo<
      dxColorBox,
      ClipboardEvent
    >;
    export type CutEvent = DevExpress.events.NativeEventInfo<
      dxColorBox,
      ClipboardEvent
    >;
    export type DisposingEvent = DevExpress.events.EventInfo<dxColorBox>;
    export type DropDownButtonTemplateData =
      DevExpress.ui.dxDropDownEditor.DropDownButtonTemplateDataModel;
    export type EnterKeyEvent = DevExpress.events.NativeEventInfo<
      dxColorBox,
      KeyboardEvent
    >;
    export type FocusInEvent = DevExpress.events.NativeEventInfo<
      dxColorBox,
      FocusEvent
    >;
    export type FocusOutEvent = DevExpress.events.NativeEventInfo<
      dxColorBox,
      FocusEvent
    >;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxColorBox>;
    export type InputEvent = DevExpress.events.NativeEventInfo<
      dxColorBox,
      UIEvent & { target: HTMLInputElement }
    >;
    export type KeyDownEvent = DevExpress.events.NativeEventInfo<
      dxColorBox,
      KeyboardEvent
    >;
    export type KeyPressEvent = DevExpress.events.NativeEventInfo<
      dxColorBox,
      KeyboardEvent
    >;
    export type KeyUpEvent = DevExpress.events.NativeEventInfo<
      dxColorBox,
      KeyboardEvent
    >;
    export type OpenedEvent = DevExpress.events.EventInfo<dxColorBox>;
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxColorBox> &
      DevExpress.events.ChangedOptionInfo;
    export type PasteEvent = DevExpress.events.NativeEventInfo<
      dxColorBox,
      ClipboardEvent
    >;
    export type Properties = dxColorBoxOptions;
    export type ValueChangedEvent = DevExpress.events.NativeEventInfo<
      dxColorBox,
      KeyboardEvent | MouseEvent | PointerEvent | UIEvent | Event
    > &
      DevExpress.ui.Editor.ValueChangedInfo;
  }
  /**
   * @deprecated use Properties instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxColorBoxOptions
    extends dxDropDownEditorOptions<dxColorBox> {
    /**
     * Specifies the text displayed on the button that applies changes and closes the drop-down editor.
     */
    applyButtonText?: string;
    /**
     * Specifies the way an end-user applies the selected value.
     */
    applyValueMode?: DevExpress.common.ApplyValueMode;
    /**
     * Specifies the text displayed on the button that cancels changes and closes the drop-down editor.
     */
    cancelButtonText?: string;
    /**
     * Specifies whether or not the UI component value includes the alpha channel component.
     */
    editAlphaChannel?: boolean;
    /**
     * Specifies a custom template for the input field. Must contain the TextBox UI component.
     */
    fieldTemplate?:
      | DevExpress.core.template
      | ((
          value: string,
          fieldElement: DevExpress.core.DxElement
        ) => string | DevExpress.core.UserDefinedElement);
    /**
     * Specifies the size of a step by which a handle is moved using a keyboard shortcut.
     */
    keyStep?: number;
    /**
     * Specifies the currently selected value.
     */
    value?: string;

    /**
     * Configures the drop-down field which holds the content.
     */
    dropDownOptions?: DevExpress.ui.dxPopup.Properties;
  }
  /**
   * The ContextMenu UI component displays a single- or multi-level context menu. An end user invokes this menu by a right click or a long press.
   */
  export class dxContextMenu<TKey = any> extends dxMenuBase<
    dxContextMenuOptions<TKey>,
    dxContextMenuItem,
    TKey
  > {
    /**
     * Hides the UI component.
     */
    hide(): DevExpress.core.utils.DxPromise<void>;
    /**
     * Shows the UI component.
     */
    show(): DevExpress.core.utils.DxPromise<void>;
    /**
     * Shows or hides the UI component depending on the argument.
     */
    toggle(showing: boolean): DevExpress.core.utils.DxPromise<void>;
  }
  module dxContextMenu {
    export type ContentReadyEvent<TKey = any> = DevExpress.events.EventInfo<
      dxContextMenu<TKey>
    >;
    export type ContextSubmenuDirection = 'auto' | 'left' | 'right';
    export type DisposingEvent<TKey = any> = DevExpress.events.EventInfo<
      dxContextMenu<TKey>
    >;
    export type ExplicitTypes<TKey = any> = {
      Properties: Properties<TKey>;
      ContentReadyEvent: ContentReadyEvent<TKey>;
      DisposingEvent: DisposingEvent<TKey>;
      HiddenEvent: HiddenEvent<TKey>;
      HidingEvent: HidingEvent<TKey>;
      InitializedEvent: InitializedEvent<TKey>;
      ItemClickEvent: ItemClickEvent<TKey>;
      ItemContextMenuEvent: ItemContextMenuEvent<TKey>;
      ItemRenderedEvent: ItemRenderedEvent<TKey>;
      OptionChangedEvent: OptionChangedEvent<TKey>;
      PositioningEvent: PositioningEvent<TKey>;
      SelectionChangedEvent: SelectionChangedEvent<TKey>;
      ShowingEvent: ShowingEvent<TKey>;
      ShownEvent: ShownEvent<TKey>;
    };
    export type HiddenEvent<TKey = any> = DevExpress.events.EventInfo<
      dxContextMenu<TKey>
    >;
    export type HidingEvent<TKey = any> = DevExpress.events.Cancelable &
      DevExpress.events.EventInfo<dxContextMenu<TKey>>;
    export type InitializedEvent<TKey = any> =
      DevExpress.events.InitializedEventInfo<dxContextMenu<TKey>>;
    export type ItemClickEvent<TKey = any> = DevExpress.events.NativeEventInfo<
      dxContextMenu<TKey>,
      KeyboardEvent | MouseEvent | PointerEvent
    > &
      DevExpress.events.ItemInfo<Item>;
    export type ItemContextMenuEvent<TKey = any> =
      DevExpress.events.NativeEventInfo<
        dxContextMenu<TKey>,
        MouseEvent | PointerEvent | TouchEvent
      > &
        DevExpress.events.ItemInfo<Item>;
    export type ItemRenderedEvent<TKey = any> = DevExpress.events.EventInfo<
      dxContextMenu<TKey>
    > &
      DevExpress.events.ItemInfo<Item>;
    export type OptionChangedEvent<TKey = any> = DevExpress.events.EventInfo<
      dxContextMenu<TKey>
    > &
      DevExpress.events.ChangedOptionInfo;
    export type PositioningEvent<TKey = any> =
      DevExpress.events.NativeEventInfo<
        dxContextMenu<TKey>,
        MouseEvent | PointerEvent | TouchEvent
      > & {
        readonly position: PositionConfig;
      };
    export type Properties<TKey = any> = dxContextMenuOptions<TKey>;
    export type SelectionChangedEvent<TKey = any> = DevExpress.events.EventInfo<
      dxContextMenu<TKey>
    > &
      DevExpress.ui.CollectionWidget.SelectionChangedInfo<Item>;
    export type ShowingEvent<TKey = any> = DevExpress.events.Cancelable &
      DevExpress.events.EventInfo<dxContextMenu<TKey>>;
    export type ShownEvent<TKey = any> = DevExpress.events.EventInfo<
      dxContextMenu<TKey>
    >;
  }
  /**
   * @deprecated Use DevExpress.ui.dxContextMenu.Item instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxContextMenuItem extends dxMenuBaseItem {
    /**
     * Specifies nested menu items.
     */
    items?: Array<DevExpress.ui.dxContextMenu.Item>;
  }
  /**
   * @deprecated use Properties instead
   */
  export interface dxContextMenuOptions<TKey = any>
    extends dxMenuBaseOptions<dxContextMenu<TKey>, dxContextMenuItem, TKey> {
    /**
     * Specifies whether to close the UI component if a user clicks outside it.
     * @deprecated 
     */
    closeOnOutsideClick?:
      | boolean
      | ((
          event: DevExpress.events.DxEvent<
            MouseEvent | PointerEvent | TouchEvent
          >
        ) => boolean);
    /**
     * Binds the UI component to data.
     */
    dataSource?: DevExpress.data.DataSource.DataSourceLike<
      DevExpress.ui.dxContextMenu.Item,
      TKey
    > | null;
    /**
     * 
     */
    hideOnOutsideClick?:
      | boolean
      | ((
          event: DevExpress.events.DxEvent<
            MouseEvent | PointerEvent | TouchEvent
          >
        ) => boolean);
    /**
     * Holds an array of menu items.
     */
    items?: Array<DevExpress.ui.dxContextMenu.Item>;
    /**
     * A function that is executed after the ContextMenu is hidden.
     */
    onHidden?: (e: DevExpress.ui.dxContextMenu.HiddenEvent<TKey>) => void;
    /**
     * A function that is executed before the ContextMenu is hidden.
     */
    onHiding?: (e: DevExpress.ui.dxContextMenu.HidingEvent<TKey>) => void;
    /**
     * A function that is executed before the ContextMenu is positioned.
     */
    onPositioning?: (
      e: DevExpress.ui.dxContextMenu.PositioningEvent<TKey>
    ) => void;
    /**
     * A function that is executed before the ContextMenu is shown.
     */
    onShowing?: (e: DevExpress.ui.dxContextMenu.ShowingEvent<TKey>) => void;
    /**
     * A function that is executed after the ContextMenu is shown.
     */
    onShown?: (e: DevExpress.ui.dxContextMenu.ShownEvent<TKey>) => void;
    /**
     * An object defining UI component positioning properties.
     */
    position?: PositionConfig;
    /**
     * Specifies properties for displaying the UI component.
     */
    showEvent?:
      | {
          /**
           * The delay in milliseconds after which the UI component is displayed.
           */
          delay?: number;
          /**
           * Specifies the event names on which the UI component is shown.
           */
          name?: string;
        }
      | string;
    /**
     * Specifies the direction at which submenus are displayed.
     */
    submenuDirection?: DevExpress.ui.dxContextMenu.ContextSubmenuDirection;
    /**
     * The target element associated with the context menu.
     */
    target?: string | DevExpress.core.UserDefinedElement;
    /**
     * A Boolean value specifying whether or not the UI component is visible.
     */
    visible?: boolean;
  }
  /**
   * The DataGrid is a UI component that represents data from a local or remote source in the form of a grid. This UI component offers such basic features as sorting, grouping, filtering, as well as more advanced capabilities, like state storing, client-side exporting, master-detail interface, and many others.
   */
  export class dxDataGrid<TRowData = any, TKey = any>
    extends Widget<dxDataGridOptions<TRowData, TKey>>
    implements GridBase<TRowData, TKey>
  {
    /**
     * Adds a new column.
     */
    addColumn(
      columnOptions: DevExpress.ui.dxDataGrid.Column<TRowData, TKey> | string
    ): void;
    /**
     * Adds an empty data row and switches it to the editing state.
     */
    addRow(): DevExpress.core.utils.DxPromise<void>;
    /**
     * Ungroups grid records.
     */
    clearGrouping(): void;
    /**
     * Collapses master rows or groups of a specific level.
     */
    collapseAll(groupIndex?: number): void;
    /**
     * Collapses a group or a master row with a specific key.
     */
    collapseRow(key: TKey): DevExpress.core.utils.DxPromise<void>;
    /**
     * Expands master rows or groups of a specific level. Does not apply if data is remote.
     */
    expandAll(groupIndex?: number): void;
    /**
     * Expands a group or a master row with a specific key.
     */
    expandRow(key: TKey): DevExpress.core.utils.DxPromise<void>;
    /**
     * Exports grid data to Excel.
     * @deprecated Use exportDataGrid instead.
     */
    exportToExcel(selectionOnly: boolean): void;
    /**
     * Gets the currently selected rows&apos; keys.
     */
    getSelectedRowKeys(): Array<TKey> &
      DevExpress.core.utils.DxPromise<Array<TKey>>;
    /**
     * Gets the selected rows&apos; data objects.
     */
    getSelectedRowsData(): Array<TRowData> &
      DevExpress.core.utils.DxPromise<Array<TRowData>>;
    /**
     * Gets the value of a total summary item.
     */
    getTotalSummaryValue(summaryItemName: string): any;
    /**
     * Gets all visible columns.
     */
    getVisibleColumns(): Array<DevExpress.ui.dxDataGrid.Column<TRowData, TKey>>;
    /**
     * Gets all visible columns at a specific hierarchical level of column headers. Use it to access banded columns.
     */
    getVisibleColumns(
      headerLevel: number
    ): Array<DevExpress.ui.dxDataGrid.Column<TRowData, TKey>>;
    /**
     * Gets currently rendered rows.
     */
    getVisibleRows(): Array<DevExpress.ui.dxDataGrid.Row<TRowData, TKey>>;
    /**
     * Checks whether a specific group or master row is expanded or collapsed.
     */
    isRowExpanded(key: TKey): boolean;
    /**
     * Checks whether a row found using its data object is selected. Takes effect only if selection.deferred is true.
     */
    isRowSelected(data: TRowData): boolean;
    isRowSelected(key: TKey): boolean;
    /**
     * Gets the total row count.
     */
    totalCount(): number;

    beginCustomLoading(messageText: string): void;
    byKey(key: TKey): DevExpress.core.utils.DxPromise<TRowData>;
    cancelEditData(): void;
    cellValue(rowIndex: number, dataField: string): any;
    cellValue(rowIndex: number, dataField: string, value: any): void;
    cellValue(rowIndex: number, visibleColumnIndex: number): any;
    cellValue(rowIndex: number, visibleColumnIndex: number, value: any): void;
    clearFilter(): void;
    clearFilter(filterName: string): void;
    clearSelection(): void;
    clearSorting(): void;
    closeEditCell(): void;
    collapseAdaptiveDetailRow(): void;
    columnCount(): number;
    columnOption(id: number | string): any;
    columnOption(id: number | string, optionName: string): any;
    columnOption(
      id: number | string,
      optionName: string,
      optionValue: any
    ): void;
    columnOption(id: number | string, options: any): void;
    deleteColumn(id: number | string): void;
    deleteRow(rowIndex: number): void;
    deselectAll(): DevExpress.core.utils.DxPromise<void>;
    deselectRows(
      keys: Array<TKey>
    ): DevExpress.core.utils.DxPromise<Array<TRowData>>;
    editCell(rowIndex: number, dataField: string): void;
    editCell(rowIndex: number, visibleColumnIndex: number): void;
    editRow(rowIndex: number): void;
    endCustomLoading(): void;
    expandAdaptiveDetailRow(key: TKey): void;
    filter(): any;
    filter(filterExpr: any): void;
    focus(): void;
    focus(element: DevExpress.core.UserDefinedElement): void;
    getCellElement(
      rowIndex: number,
      dataField: string
    ): DevExpress.core.DxElement | undefined;
    getCellElement(
      rowIndex: number,
      visibleColumnIndex: number
    ): DevExpress.core.DxElement | undefined;
    getCombinedFilter(): any;
    getCombinedFilter(returnDataField: boolean): any;
    getDataSource(): DevExpress.data.DataSource<TRowData, TKey>;
    getKeyByRowIndex(rowIndex: number): TKey | undefined;
    getRowElement(
      rowIndex: number
    ): DevExpress.core.UserDefinedElementsArray | undefined;
    getRowIndexByKey(key: TKey): number;
    getScrollable(): DevExpress.ui.dxDataGrid.Scrollable;
    getVisibleColumnIndex(id: number | string): number;
    hasEditData(): boolean;
    hideColumnChooser(): void;
    isAdaptiveDetailRowExpanded(key: TKey): boolean;
    isRowFocused(key: TKey): boolean;
    keyOf(obj: TRowData): TKey;
    navigateToRow(key: TKey): DevExpress.core.utils.DxPromise<void>;
    pageCount(): number;
    pageIndex(): number;
    pageIndex(newIndex: number): DevExpress.core.utils.DxPromise<void>;
    pageSize(): number;
    pageSize(value: number): void;
    refresh(): DevExpress.core.utils.DxPromise<void>;
    refresh(changesOnly: boolean): DevExpress.core.utils.DxPromise<void>;
    repaintRows(rowIndexes: Array<number>): void;
    saveEditData(): DevExpress.core.utils.DxPromise<void>;
    searchByText(text: string): void;
    selectAll(): DevExpress.core.utils.DxPromise<void>;
    selectRows(
      keys: Array<TKey>,
      preserve: boolean
    ): DevExpress.core.utils.DxPromise<Array<TRowData>>;
    selectRowsByIndexes(
      indexes: Array<number>
    ): DevExpress.core.utils.DxPromise<Array<TRowData>>;
    showColumnChooser(): void;
    state(): any;
    state(state: any): void;
    undeleteRow(rowIndex: number): void;
    updateDimensions(): void;
  }
  module dxDataGrid {
    export type AdaptiveDetailRowPreparingEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxDataGrid<TRowData, TKey>> &
      AdaptiveDetailRowPreparingInfo;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export interface AdaptiveDetailRowPreparingInfo {
      readonly formOptions: any;
    }
    export type CellClickEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.NativeEventInfo<
      dxDataGrid<TRowData, TKey>,
      PointerEvent | MouseEvent
    > & {
      readonly data: TRowData;
      readonly key: TKey;
      readonly value?: any;
      readonly displayValue?: any;
      readonly text: string;
      readonly columnIndex: number;
      readonly column: Column<TRowData, TKey>;
      readonly rowIndex: number;
      readonly rowType: string;
      readonly cellElement: DevExpress.core.DxElement;
      readonly row: Row<TRowData, TKey>;
    };
    export type CellDblClickEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.NativeEventInfo<
      dxDataGrid<TRowData, TKey>,
      PointerEvent | MouseEvent
    > & {
      readonly data: TRowData;
      readonly key: TKey;
      readonly value?: any;
      readonly displayValue?: any;
      readonly text: string;
      readonly columnIndex: number;
      readonly column: Column<TRowData, TKey>;
      readonly rowIndex: number;
      readonly rowType: string;
      readonly cellElement: DevExpress.core.DxElement;
      readonly row: Row<TRowData, TKey>;
    };
    export type CellHoverChangedEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxDataGrid<TRowData, TKey>> & {
      readonly eventType: string;
      readonly data: TRowData;
      readonly key: TKey;
      readonly value?: any;
      readonly text: string;
      readonly displayValue?: any;
      readonly columnIndex: number;
      readonly rowIndex: number;
      readonly column: Column<TRowData, TKey>;
      readonly rowType: string;
      readonly cellElement: DevExpress.core.DxElement;
      readonly row: Row<TRowData, TKey>;
    };
    export type CellPreparedEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxDataGrid<TRowData, TKey>> & {
      readonly data: TRowData;
      readonly key: TKey;
      readonly value?: any;
      readonly displayValue?: any;
      readonly text: string;
      readonly columnIndex: number;
      readonly column: Column<TRowData, TKey>;
      readonly rowIndex: number;
      readonly rowType: string;
      readonly row: Row<TRowData, TKey>;
      readonly isSelected?: boolean;
      readonly isExpanded?: boolean;
      readonly isNewRow?: boolean;
      readonly cellElement: DevExpress.core.DxElement;
      readonly watch?: Function;
      readonly oldValue?: any;
    };
    export type Column<TRowData = any, TKey = any> = dxDataGridColumn<
      TRowData,
      TKey
    >;
    /**
     * 
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export interface ColumnBase<TRowData = any> {
      /**
       * Aligns the content of the column.
       */
      alignment?: DevExpress.common.HorizontalAlignment;
      /**
       * Specifies whether a user can edit values in the column at runtime. By default, inherits the value of the editing.allowUpdating property.
       */
      allowEditing?: boolean;
      /**
       * Specifies whether data can be filtered by this column. Applies only if filterRow.visible is true.
       */
      allowFiltering?: boolean;
      /**
       * Specifies whether a user can fix the column at runtime. Applies only if columnFixing.enabled is true.
       */
      allowFixing?: boolean;
      /**
       * Specifies whether the header filter can be used to filter data by this column. Applies only if headerFilter.visible is true. By default, inherits the value of the allowFiltering property.
       */
      allowHeaderFiltering?: boolean;
      /**
       * Specifies whether a user can hide the column using the column chooser at runtime. Applies only if columnChooser.enabled is true.
       */
      allowHiding?: boolean;
      /**
       * Specifies whether this column can be used in column reordering at runtime. Applies only if allowColumnReordering is true.
       */
      allowReordering?: boolean;
      /**
       * Specifies whether a user can resize the column at runtime. Applies only if allowColumnResizing is true.
       */
      allowResizing?: boolean;
      /**
       * Specifies whether this column can be searched. Applies only if searchPanel.visible is true. Inherits the value of the allowFiltering property by default.
       */
      allowSearch?: boolean;
      /**
       * Specifies whether a user can sort rows by this column at runtime. Applies only if sorting.mode differs from &apos;none&apos;.
       */
      allowSorting?: boolean;
      /**
       * Calculates custom cell values. Use this function to create an unbound data column.
       */
      calculateCellValue?: (rowData: TRowData) => any;
      defaultCalculateCellValue?: ColumnBase['calculateCellValue'];
      /**
       * Calculates custom display values for column cells. Requires specifying the dataField or calculateCellValue property. Used in lookup optimization.
       */
      calculateDisplayValue?: string | ((rowData: TRowData) => any);
      /**
       * Specifies the column&apos;s custom rules to filter data.
       */
      calculateFilterExpression?: (
        filterValue: any,
        selectedFilterOperation: string,
        target: string
      ) => string | Array<any> | Function;
      defaultCalculateFilterExpression?: ColumnBase['calculateFilterExpression'];
      /**
       * Calculates custom values used to sort this column.
       */
      calculateSortValue?: string | ((rowData: TRowData) => any);
      /**
       * Specifies a caption for the column.
       */
      caption?: string;
      /**
       * Specifies a CSS class to be applied to the column.
       */
      cssClass?: string;
      /**
       * Customizes the text displayed in column cells.
       */
      customizeText?: (
        cellInfo: DevExpress.common.grids.ColumnCustomizeTextArg
      ) => string;
      /**
       * Binds the column to a field of the dataSource.
       */
      dataField?: string;
      /**
       * Casts column values to a specific data type.
       */
      dataType?: DevExpress.common.DataType;
      /**
       * Configures the default UI component used for editing and filtering in the filter row.
       */
      editorOptions?: any;
      /**
       * Specifies whether HTML tags are displayed as plain text or applied to the values of the column.
       */
      encodeHtml?: boolean;
      /**
       * In a boolean column, replaces all false items with a specified text. Applies only if showEditorAlways property is false.
       */
      falseText?: string;
      /**
       * Specifies available filter operations. Applies if allowFiltering is true and the filterRow and/or filterPanel are visible.
       */
      filterOperations?: Array<
        DevExpress.common.charts.FilterOperation | string
      >;
      /**
       * Specifies whether a user changes the current filter by including (selecting) or excluding (clearing the selection of) values. Applies only if headerFilter.visible and allowHeaderFiltering are true.
       */
      filterType?: DevExpress.common.charts.FilterType;
      /**
       * Specifies the column&apos;s filter value displayed in the filter row.
       */
      filterValue?: any;
      /**
       * Specifies values selected in the column&apos;s header filter.
       */
      filterValues?: Array<any>;
      /**
       * Fixes the column.
       */
      fixed?: boolean;
      /**
       * Specifies the UI component&apos;s edge to which the column is fixed. Applies only if columns[].fixed is true.
       */
      fixedPosition?: DevExpress.common.HorizontalEdge;
      /**
       * Configures the form item that the column produces in the editing state. Applies only if editing.mode is &apos;form&apos; or &apos;popup&apos;.
       */
      formItem?: dxFormSimpleItem;
      /**
       * Formats a value before it is displayed in a column cell.
       */
      format?: Format;
      /**
       * Specifies data settings for the header filter.
       */
      headerFilter?: DevExpress.common.grids.ColumnHeaderFilter;
      /**
       * Specifies the order in which columns are hidden when the UI component adapts to the screen or container size. Ignored if allowColumnResizing is true and columnResizingMode is &apos;widget&apos;.
       */
      hidingPriority?: number;
      /**
       * Specifies whether the column organizes other columns into bands.
       */
      isBand?: boolean;
      /**
       * Specifies properties of a lookup column.
       */
      lookup?: DevExpress.common.grids.ColumnLookup;
      /**
       * Specifies the minimum width of the column.
       */
      minWidth?: number;
      /**
       * Specifies the column&apos;s unique identifier. If not set in code, this value is inherited from the dataField.
       */
      name?: string;
      /**
       * Specifies the band column that owns the current column. Accepts the index of the band column in the columns array.
       */
      ownerBand?: number;
      /**
       * Specifies whether to render the column after other columns and elements. Use if column cells have a complex template. Requires the width property specified.
       */
      renderAsync?: boolean;
      /**
       * Specifies a filter operation that applies when users use the filter row to filter the column.
       */
      selectedFilterOperation?: DevExpress.common.charts.SelectedFilterOperation;
      /**
       * Specifies a function to be invoked after the user has edited a cell value, but before it will be saved in the data source.
       */
      setCellValue?: (
        newData: DevExpress.core.DeepPartial<TRowData>,
        value: any,
        currentRowData: TRowData
      ) => void | PromiseLike<void>;
      defaultSetCellValue?: ColumnBase['setCellValue'];
      /**
       * Specifies whether the column displays its values using editors.
       */
      showEditorAlways?: boolean;
      /**
       * Specifies whether the column chooser can contain the column header.
       */
      showInColumnChooser?: boolean;
      /**
       * Specifies the index according to which columns participate in sorting.
       */
      sortIndex?: number;
      /**
       * Specifies the sort order of column values.
       */
      sortOrder?: DevExpress.common.SortOrder;
      /**
       * Specifies a custom comparison function for sorting. Applies only when sorting is performed on the client.
       */
      sortingMethod?: (value1: any, value2: any) => number;
      /**
       * In a boolean column, replaces all true items with a specified text. Applies only if showEditorAlways property is false.
       */
      trueText?: string;
      /**
       * Specifies validation rules to be checked when cell values are updated.
       */
      validationRules?: Array<
        | RequiredRule
        | NumericRule
        | RangeRule
        | StringLengthRule
        | CustomRule
        | CompareRule
        | PatternRule
        | EmailRule
        | AsyncRule
      >;
      /**
       * Specifies whether the column is visible, that is, occupies space in the table.
       */
      visible?: boolean;
      /**
       * Specifies the position of the column regarding other columns in the resulting UI component.
       */
      visibleIndex?: number;
      /**
       * Specifies the column&apos;s width in pixels or as a percentage. Ignored if it is less than minWidth.
       */
      width?: number | string;
    }
    export type ColumnButton<
      TRowData = any,
      TKey = any
    > = dxDataGridColumnButton<TRowData, TKey>;
    /**
     * Allows you to customize buttons in the edit column or create a custom command column. Applies only if the column&apos;s type is &apos;buttons&apos;.
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export interface ColumnButtonBase {
      /**
       * Specifies a CSS class to be applied to the button.
       */
      cssClass?: string;
      /**
       * Specifies the text for the hint that appears when the button is hovered over or long-pressed.
       */
      hint?: string;
      /**
       * Specifies the button&apos;s icon.
       */
      icon?: string;
      /**
       * Specifies the button&apos;s text. Applies only if the button&apos;s icon is not specified.
       */
      text?: string;
    }
    export type ColumnButtonClickEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.NativeEventInfo<
      dxDataGrid<TRowData, TKey>,
      PointerEvent | MouseEvent
    > & {
      row?: Row<TRowData, TKey>;
      column?: Column<TRowData, TKey>;
    };
    export type ColumnButtonTemplateData<TRowData = any, TKey = any> = {
      readonly component: dxDataGrid<TRowData, TKey>;
      readonly data?: TRowData;
      readonly key?: TKey;
      readonly columnIndex: number;
      readonly column: Column<TRowData, TKey>;
      readonly rowIndex: number;
      readonly rowType: string;
      readonly row: Row<TRowData, TKey>;
    };
    export type ColumnCellTemplateData<TRowData = any, TKey = any> = {
      readonly data?: TRowData;
      readonly component: dxDataGrid<TRowData, TKey>;
      readonly value?: any;
      readonly oldValue?: any;
      readonly displayValue?: any;
      readonly text: string;
      readonly columnIndex: number;
      readonly rowIndex: number;
      readonly column: Column<TRowData, TKey>;
      readonly row: Row<TRowData, TKey>;
      readonly rowType: string;
      readonly watch?: Function;
    };
    export type ColumnEditCellTemplateData<TRowData = any, TKey = any> = {
      readonly setValue?: any;
      readonly data?: TRowData;
      readonly component: dxDataGrid<TRowData, TKey>;
      readonly value?: any;
      readonly displayValue?: any;
      readonly text: string;
      readonly columnIndex: number;
      readonly rowIndex: number;
      readonly column: Column<TRowData, TKey>;
      readonly row: Row<TRowData, TKey>;
      readonly rowType: string;
      readonly watch?: Function;
    };
    export type ColumnGroupCellTemplateData<TRowData = any, TKey = any> = {
      readonly data?: GroupData<TRowData>;
      readonly component: dxDataGrid<TRowData, TKey>;
      readonly value?: any;
      readonly text: string;
      readonly displayValue?: any;
      readonly columnIndex: number;
      readonly rowIndex: number;
      readonly column: Column<TRowData, TKey>;
      readonly row: Row<GroupData<TRowData>, GroupKey>;
      readonly summaryItems: Array<any>;
      readonly groupContinuesMessage?: string;
      readonly groupContinuedMessage?: string;
    };
    export type ColumnHeaderCellTemplateData<TRowData = any, TKey = any> = {
      readonly component: dxDataGrid<TRowData, TKey>;
      readonly columnIndex: number;
      readonly column: Column<TRowData, TKey>;
    };
    export type ColumnResizeMode = 'nextColumn' | 'widget';
    export type ContentReadyEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxDataGrid<TRowData, TKey>>;
    export type ContextMenuPreparingEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxDataGrid<TRowData, TKey>> & {
      items?: Array<any>;
      readonly target: string;
      readonly targetElement: DevExpress.core.DxElement;
      readonly columnIndex: number;
      readonly column?: Column<TRowData, TKey>;
      readonly rowIndex: number;
      readonly row?: Row<TRowData, TKey>;
    };
    export type CustomSummaryInfo<TRowData = any, TKey = any> = {
      readonly component: dxDataGrid<TRowData, TKey>;
      readonly name?: string;
      readonly summaryProcess: string;
      readonly value?: any;
      totalValue?: any;
      readonly groupIndex?: number;
    };
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export interface DataChangeInfo<TRowData = any, TKey = any> {
      readonly changes: Array<
        DevExpress.common.grids.DataChange<TRowData, TKey>
      >;
    }
    export type DataErrorOccurredEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxDataGrid<TRowData, TKey>> &
      DataErrorOccurredInfo;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export interface DataErrorOccurredInfo {
      readonly error?: Error;
    }
    export type DataGridCommandColumnType =
      | 'adaptive'
      | 'buttons'
      | 'detailExpand'
      | 'groupExpand'
      | 'selection'
      | 'drag';
    export type DataGridExportFormat = 'pdf' | 'xlsx';
    export type DataGridPredefinedColumnButton =
      | 'cancel'
      | 'delete'
      | 'edit'
      | 'save'
      | 'undelete';
    export type DataGridPredefinedToolbarItem =
      | 'addRowButton'
      | 'applyFilterButton'
      | 'columnChooserButton'
      | 'exportButton'
      | 'groupPanel'
      | 'revertButton'
      | 'saveButton'
      | 'searchPanel';
    export type DataGridScrollMode = 'infinite' | 'standard' | 'virtual';
    export type DataRowTemplateData<TRowData = any, TKey = any> = {
      readonly key: TKey;
      readonly data: TRowData;
      readonly component: dxDataGrid<TRowData, TKey>;
      readonly values: Array<any>;
      readonly rowIndex: number;
      readonly columns: Array<Column<TRowData, TKey>>;
      readonly isSelected?: boolean;
      readonly isExpanded?: boolean;
    };
    export type DisposingEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxDataGrid<TRowData, TKey>>;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export interface DragDropInfo {
      readonly dropInsideItem: boolean;
    }
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export interface DragReorderInfo {
      readonly dropInsideItem: boolean;
      promise?: PromiseLike<void>;
    }
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export interface DragStartEventInfo<
      T extends GridBase<TRowData, TKey>,
      TRowData = any,
      TKey = any
    > {
      readonly component: T;
      readonly event: DevExpress.events.DxEvent<
        PointerEvent | MouseEvent | TouchEvent
      >;
      itemData?: TRowData;
      readonly itemElement: DevExpress.core.DxElement;
      readonly fromIndex: number;
      readonly fromData?: any;
    }
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export interface dxDataGridSortByGroupSummaryInfoItem {
      /**
       * Specifies the identifier of the column that must be used in grouping so that sorting by group summary item values be applied.
       */
      groupColumn?: string;
      /**
       * Specifies the sort order of group summary item values.
       */
      sortOrder?: DevExpress.common.SortOrder;
      /**
       * Specifies the group summary item whose values must be used to sort groups.
       */
      summaryItem?: string | number;
    }
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export type dxDataGridToolbar = Toolbar;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export type dxDataGridToolbarItem = ToolbarItem;
    export type EditCanceledEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxDataGrid<TRowData, TKey>> &
      DataChangeInfo<TRowData, TKey>;
    export type EditCancelingEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.Cancelable &
      DevExpress.events.EventInfo<dxDataGrid<TRowData, TKey>> &
      DataChangeInfo<TRowData, TKey>;
    export type Editing<TRowData = any, TKey = any> = EditingBase<
      TRowData,
      TKey
    > & {
      /**
       * Specifies whether a user can add new rows.
       */
      allowAdding?: boolean;
      /**
       * Specifies whether a user can delete rows. It is called for each data row when defined as a function.
       */
      allowDeleting?:
        | boolean
        | ((options: {
            component?: dxDataGrid<TRowData, TKey>;
            row?: Row<TRowData, TKey>;
          }) => boolean);
      /**
       * Specifies whether a user can update rows. It is called for each data row when defined as a function.
       */
      allowUpdating?:
        | boolean
        | ((options: {
            component?: dxDataGrid<TRowData, TKey>;
            row?: Row<TRowData, TKey>;
          }) => boolean);
      /**
       * Contains properties that specify texts for editing-related UI elements.
       */
      texts?: any;
      /**
       * Specifies a position for a new row.
       */
      newRowPosition?: DevExpress.common.charts.NewRowPosition;
    };
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export interface EditingBase<TRowData = any, TKey = any> {
      /**
       * Specifies if confirmation is required when a user deletes a row.
       */
      confirmDelete?: boolean;
      /**
       * An array of pending row changes.
       */
      changes?: Array<DevExpress.common.grids.DataChange<TRowData, TKey>>;
      /**
       * The name of a column being edited. Applies only if editing.mode is &apos;cell&apos; or &apos;batch&apos;.
       */
      editColumnName?: string;
      /**
       * The key(s) of a row being edited.
       */
      editRowKey?: TKey;
      /**
       * Configures the form. Used only if editing.mode is &apos;form&apos; or &apos;popup&apos;.
       */
      form?: dxFormOptions;
      /**
       * Specifies how a user edits data.
       */
      mode?: DevExpress.common.charts.GridsEditMode;
      /**
       * Configures the popup. Used only if editing.mode is &apos;popup&apos;.
       */
      popup?: DevExpress.ui.dxPopup.Properties;
      /**
       * Specifies operations that are performed after saving changes.
       */
      refreshMode?: DevExpress.common.charts.GridsEditRefreshMode;
      /**
       * Specifies whether to select text in a cell when a user starts editing.
       */
      selectTextOnEditStart?: boolean;
      /**
       * Specifies whether a single or double click should switch a cell to the editing state. Applies if editing.mode is &apos;cell&apos; or &apos;batch&apos;.
       */
      startEditAction?: DevExpress.common.charts.StartEditAction;
      /**
       * Contains properties that specify texts for editing-related UI elements.
       */
      texts?: EditingTextsBase;
      /**
       * Specifies whether the edit column uses icons instead of links.
       */
      useIcons?: boolean;
    }
    export type EditingStartEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.Cancelable &
      DevExpress.events.EventInfo<dxDataGrid<TRowData, TKey>> & {
        readonly data: TRowData;
        readonly key: TKey;
        readonly column?: Column<TRowData, TKey>;
      };
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export interface EditingTextsBase {
      /**
       * Specifies text for a hint that appears when a user pauses on the global &apos;Add&apos; button. Applies only if editing.allowAdding is true.
       */
      addRow?: string;
      /**
       * Specifies text for a hint that appears when a user pauses on the &apos;Discard&apos; button. Applies only if editing.mode is &apos;batch&apos;.
       */
      cancelAllChanges?: string;
      /**
       * Specifies text for a button that cancels changes in a row. Applies only if editing.allowUpdating is true and editing.mode is &apos;row&apos;.
       */
      cancelRowChanges?: string;
      /**
       * Specifies a message that prompts a user to confirm deletion.
       */
      confirmDeleteMessage?: string;
      /**
       * Specifies a title for the window that asks a user to confirm deletion.
       */
      confirmDeleteTitle?: string;
      /**
       * Specifies text for buttons that delete rows. Applies only if allowDeleting is true.
       */
      deleteRow?: string;
      /**
       * Specifies text for buttons that switch rows into the editing state. Applies only if allowUpdating is true.
       */
      editRow?: string;
      /**
       * Specifies text for a hint that appears when a user pauses on the global &apos;Save&apos; button. Applies only if editing.mode is &apos;batch&apos;.
       */
      saveAllChanges?: string;
      /**
       * Specifies text for a button that saves changes made in a row. Applies only if allowUpdating is true.
       */
      saveRowChanges?: string;
      /**
       * Specifies text for buttons that recover deleted rows. Applies only if allowDeleting is true and editing.mode is &apos;batch&apos;.
       */
      undeleteRow?: string;
      /**
       * Specifies text for a hint appearing when a user pauses on the button that cancels changes in a cell. Applies only if editing.mode is &apos;cell&apos; and data validation is enabled.
       */
      validationCancelChanges?: string;
    }
    export type EditorPreparedEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxDataGrid<TRowData, TKey>> & {
      readonly parentType: string;
      readonly value?: any;
      readonly setValue?: any;
      readonly updateValueTimeout?: number;
      readonly width?: number;
      readonly disabled: boolean;
      readonly rtlEnabled: boolean;
      readonly editorElement: DevExpress.core.DxElement;
      readonly readOnly: boolean;
      readonly dataField?: string;
      readonly row?: Row<TRowData, TKey>;
    };
    export type EditorPreparingEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxDataGrid<TRowData, TKey>> & {
      readonly parentType: string;
      readonly value?: any;
      readonly setValue?: any;
      readonly updateValueTimeout?: number;
      readonly width?: number;
      readonly disabled: boolean;
      readonly rtlEnabled: boolean;
      cancel: boolean;
      readonly editorElement: DevExpress.core.DxElement;
      readonly readOnly: boolean;
      editorName: string;
      editorOptions: any;
      readonly dataField?: string;
      readonly row?: Row<TRowData, TKey>;
    };
    export type ExcelCellHorizontalAlignment =
      | 'center'
      | 'centerContinuous'
      | 'distributed'
      | 'fill'
      | 'general'
      | 'justify'
      | 'left'
      | 'right';
    export type ExcelCellInfo<TRowData = any, TKey = any> = {
      readonly component: dxDataGrid<TRowData, TKey>;
      horizontalAlignment?: ExcelCellHorizontalAlignment;
      verticalAlignment?: ExcelCellVerticalAlignment;
      wrapTextEnabled?: boolean;
      backgroundColor?: string;
      fillPatternType?: ExcelCellPatternType;
      fillPatternColor?: string;
      font?: DevExpress.exporter.ExcelFont;
      readonly value?: string | number | Date;
      numberFormat?: string;
      gridCell?: DevExpress.excelExporter.DataGridCell;
    };
    export type ExcelCellPatternType =
      | 'darkDown'
      | 'darkGray'
      | 'darkGrid'
      | 'darkHorizontal'
      | 'darkTrellis'
      | 'darkUp'
      | 'darkVertical'
      | 'gray0625'
      | 'gray125'
      | 'lightDown'
      | 'lightGray'
      | 'lightGrid'
      | 'lightHorizontal'
      | 'lightTrellis'
      | 'lightUp'
      | 'lightVertical'
      | 'mediumGray'
      | 'none'
      | 'solid';
    export type ExcelCellVerticalAlignment =
      | 'bottom'
      | 'center'
      | 'distributed'
      | 'justify'
      | 'top';
    export type ExplicitTypes<TRowData, TKey> = {
      AdaptiveDetailRowPreparingEvent: AdaptiveDetailRowPreparingEvent<
        TRowData,
        TKey
      >;
      CellClickEvent: CellClickEvent<TRowData, TKey>;
      CellDblClickEvent: CellDblClickEvent<TRowData, TKey>;
      CellHoverChangedEvent: CellHoverChangedEvent<TRowData, TKey>;
      CellPreparedEvent: CellPreparedEvent<TRowData, TKey>;
      Column: Column<TRowData, TKey>;
      ColumnButton: ColumnButton<TRowData, TKey>;
      ColumnButtonClickEvent: ColumnButtonClickEvent<TRowData, TKey>;
      ColumnButtonTemplateData: ColumnButtonTemplateData<TRowData, TKey>;
      ColumnCellTemplateData: ColumnCellTemplateData<TRowData, TKey>;
      ColumnEditCellTemplateData: ColumnEditCellTemplateData<TRowData, TKey>;
      ColumnGroupCellTemplateData: ColumnGroupCellTemplateData<TRowData, TKey>;
      ColumnHeaderCellTemplateData: ColumnHeaderCellTemplateData<
        TRowData,
        TKey
      >;
      ContentReadyEvent: ContentReadyEvent<TRowData, TKey>;
      ContextMenuPreparingEvent: ContextMenuPreparingEvent<TRowData, TKey>;
      CustomSummaryInfo: CustomSummaryInfo<TRowData, TKey>;
      DataErrorOccurredEvent: DataErrorOccurredEvent<TRowData, TKey>;
      DataRowTemplateData: DataRowTemplateData<TRowData, TKey>;
      DisposingEvent: DisposingEvent<TRowData, TKey>;
      EditCanceledEvent: EditCanceledEvent<TRowData, TKey>;
      EditCancelingEvent: EditCancelingEvent<TRowData, TKey>;
      Editing: Editing<TRowData, TKey>;
      EditingStartEvent: EditingStartEvent<TRowData, TKey>;
      EditorPreparedEvent: EditorPreparedEvent<TRowData, TKey>;
      EditorPreparingEvent: EditorPreparingEvent<TRowData, TKey>;
      ExcelCellInfo: ExcelCellInfo<TRowData, TKey>;
      Export: Export<TRowData, TKey>;
      ExportedEvent: ExportedEvent<TRowData, TKey>;
      ExportingEvent: ExportingEvent<TRowData, TKey>;
      ExportTexts: ExportTexts;
      FileSavingEvent: FileSavingEvent<TRowData, TKey>;
      FocusedCellChangedEvent: FocusedCellChangedEvent<TRowData, TKey>;
      FocusedCellChangingEvent: FocusedCellChangingEvent<TRowData, TKey>;
      FocusedRowChangedEvent: FocusedRowChangedEvent<TRowData, TKey>;
      FocusedRowChangingEvent: FocusedRowChangingEvent<TRowData, TKey>;
      GroupData: GroupData<TRowData>;
      Grouping: Grouping;
      GroupingTexts: GroupingTexts;
      GroupPanel: GroupPanel;
      InitializedEvent: InitializedEvent<TRowData, TKey>;
      InitNewRowEvent: InitNewRowEvent<TRowData, TKey>;
      KeyDownEvent: KeyDownEvent<TRowData, TKey>;
      MasterDetail: MasterDetail<TRowData, TKey>;
      MasterDetailTemplateData: MasterDetailTemplateData<TRowData, TKey>;
      OptionChangedEvent: OptionChangedEvent<TRowData, TKey>;
      Properties: Properties<TRowData, TKey>;
      Row: Row<TRowData, TKey>;
      RowClickEvent: RowClickEvent<TRowData, TKey>;
      RowCollapsedEvent: RowCollapsedEvent<TRowData, TKey>;
      RowCollapsingEvent: RowCollapsingEvent<TRowData, TKey>;
      RowDblClickEvent: RowDblClickEvent<TRowData, TKey>;
      RowDraggingAddEvent: RowDraggingAddEvent<TRowData, TKey>;
      RowDraggingChangeEvent: RowDraggingChangeEvent<TRowData, TKey>;
      RowDraggingEndEvent: RowDraggingEndEvent<TRowData, TKey>;
      RowDraggingMoveEvent: RowDraggingMoveEvent<TRowData, TKey>;
      RowDraggingRemoveEvent: RowDraggingRemoveEvent<TRowData, TKey>;
      RowDraggingReorderEvent: RowDraggingReorderEvent<TRowData, TKey>;
      RowDraggingStartEvent: RowDraggingStartEvent<TRowData, TKey>;
      RowDraggingTemplateData: RowDraggingTemplateData<TRowData>;
      RowExpandedEvent: RowExpandedEvent<TRowData, TKey>;
      RowExpandingEvent: RowExpandingEvent<TRowData, TKey>;
      RowInsertedEvent: RowInsertedEvent<TRowData, TKey>;
      RowInsertingEvent: RowInsertingEvent<TRowData, TKey>;
      RowPreparedEvent: RowPreparedEvent<TRowData, TKey>;
      RowRemovedEvent: RowRemovedEvent<TRowData, TKey>;
      RowRemovingEvent: RowRemovingEvent<TRowData, TKey>;
      RowTemplateData: RowTemplateData<TRowData, TKey>;
      RowUpdatedEvent: RowUpdatedEvent<TRowData, TKey>;
      RowUpdatingEvent: RowUpdatingEvent<TRowData, TKey>;
      RowValidatingEvent: RowValidatingEvent<TRowData, TKey>;
      SavedEvent: SavedEvent<TRowData, TKey>;
      SavingEvent: SavingEvent<TRowData, TKey>;
      Scrolling: Scrolling;
      Selection: Selection;
      SelectionChangedEvent: SelectionChangedEvent<TRowData, TKey>;
      Summary: Summary<TRowData, TKey>;
      SummaryGroupItem: SummaryGroupItem;
      SummaryItemTextInfo: SummaryItemTextInfo;
      SummaryTexts: SummaryTexts;
      SummaryTotalItem: SummaryTotalItem;
      Toolbar: Toolbar;
      ToolbarItem: ToolbarItem;
      ToolbarPreparingEvent: ToolbarPreparingEvent<TRowData, TKey>;
    };
    export type Export<TRowData = any, TKey = any> = {
      /**
       * Allows users to export selected rows only.
       */
      allowExportSelectedData?: boolean;
      /**
       * Customizes an Excel cell after it is created.
       * @deprecated Since v20.1, we recommend ExcelJS-based export which does not use this property.
       */
      customizeExcelCell?: (options: ExcelCellInfo<TRowData, TKey>) => void;
      /**
       * Adds the Export button to the DataGrid&apos;s toolbar.
       */
      enabled?: boolean;
      /**
       * Specifies whether to enable Excel filtering for the exported data in the resulting XLSX file.
       * @deprecated Since v20.1, we recommend ExcelJS-based export which does not use this property.
       */
      excelFilterEnabled?: boolean;
      /**
       * Specifies whether to enable word wrapping for exported data in the resulting XLSX file.
       * @deprecated Since v20.1, we recommend ExcelJS-based export which does not use this property.
       */
      excelWrapTextEnabled?: boolean;
      /**
       * 
       */
      formats?: ('xlsx' | 'pdf' | string)[];
      /**
       * Specifies a default name for the file to which grid data is exported.
       * @deprecated Since v20.1, we recommend ExcelJS-based export which does not use this property.
       */
      fileName?: string;
      /**
       * Specifies whether Excel should hide warnings if there are errors in the exported document.
       * @deprecated Since v20.1, we recommend ExcelJS-based export which does not use this property.
       */
      ignoreExcelErrors?: boolean;
      /**
       * Specifies the URL of the server-side proxy that streams the resulting file to the end user to enable exporting in the Safari browser.
       * @deprecated Since v10, Safari browser supports API for saving files, and this property is no longer required.
       */
      proxyUrl?: string;
      /**
       * Configures the texts of export commands, buttons, and hints.
       */
      texts?: ExportTexts;
    };
    export type ExportedEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxDataGrid<TRowData, TKey>>;
    export type ExportingEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.Cancelable &
      DevExpress.events.EventInfo<dxDataGrid<TRowData, TKey>> & {
        fileName?: string;
        selectedRowsOnly: boolean;
        format: DataGridExportFormat | string;
      };
    export type ExportTexts = {
      /**
       * The text or hint of the command that exports all data.
       */
      exportAll?: string;
      /**
       * The text of the command that exports selected rows. Applies when allowExportSelectedData property is true.
       */
      exportSelectedRows?: string;
      /**
       * The hint of the Export button when the allowExportSelectedData property is true.
       */
      exportTo?: string;
    };
    export type FileSavingEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.Cancelable & {
      readonly component: dxDataGrid<TRowData, TKey>;
      readonly element: DevExpress.core.DxElement;
      fileName?: string;
      format?: string;
      readonly data: Blob;
    };
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export interface FilterPanel<
      T extends GridBase<TRowData, TKey>,
      TRowData = any,
      TKey = any
    > {
      /**
       * Customizes the filter expression&apos;s text representation.
       */
      customizeText?: (e: FilterPanelCustomizeTextArg<T>) => string;
      /**
       * Specifies whether the filter expression is applied.
       */
      filterEnabled?: boolean;
      /**
       * Specifies texts for the filter panel&apos;s elements.
       */
      texts?: DevExpress.common.grids.FilterPanelTexts;
      /**
       * Specifies whether the filter panel is visible.
       */
      visible?: boolean;
    }
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export interface FilterPanelCustomizeTextArg<T> {
      readonly component: T;
      readonly filterValue: any;
      readonly text: string;
    }
    export type FocusedCellChangedEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxDataGrid<TRowData, TKey>> & {
      readonly cellElement: DevExpress.core.DxElement;
      readonly columnIndex: number;
      readonly rowIndex: number;
      readonly row?: Row<TRowData, TKey>;
      readonly column?: Column<TRowData, TKey>;
    };
    export type FocusedCellChangingEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.Cancelable &
      DevExpress.events.NativeEventInfo<
        dxDataGrid<TRowData, TKey>,
        KeyboardEvent | PointerEvent | MouseEvent | TouchEvent
      > & {
        readonly cellElement: DevExpress.core.DxElement;
        readonly prevColumnIndex: number;
        readonly prevRowIndex: number;
        newColumnIndex: number;
        newRowIndex: number;
        readonly rows: Array<Row<TRowData, TKey>>;
        readonly columns: Array<Column<TRowData, TKey>>;
        isHighlighted: boolean;
      };
    export type FocusedRowChangedEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxDataGrid<TRowData, TKey>> & {
      readonly rowElement: DevExpress.core.DxElement;
      readonly rowIndex: number;
      readonly row?: Row<TRowData, TKey>;
    };
    export type FocusedRowChangingEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.Cancelable &
      DevExpress.events.NativeEventInfo<
        dxDataGrid<TRowData, TKey>,
        KeyboardEvent | PointerEvent | MouseEvent | TouchEvent
      > & {
        readonly rowElement: DevExpress.core.DxElement;
        readonly prevRowIndex: number;
        newRowIndex: number;
        readonly rows: Array<Row<TRowData, TKey>>;
      };
    export type GroupData<TRowData> = {
      key: any;
      items: Array<TRowData> | Array<GroupData<TRowData>> | null;
      /**
       * @deprecated Attention! This property is for internal purposes only.
       */
      collapsedItems?: Array<TRowData> | Array<GroupData<TRowData>>;
      /**
       * @deprecated Attention! This property is for internal purposes only.
       */
      aggregates?: Array<any>;
      /**
       * @deprecated Attention! This property is for internal purposes only.
       */
      summary?: Array<any>;
      /**
       * @deprecated Attention! This property is for internal purposes only.
       */
      isContinuation?: boolean;
      /**
       * @deprecated Attention! This property is for internal purposes only.
       */
      isContinuationOnNextPage?: boolean;
    };
    export type Grouping = {
      /**
       * Specifies whether the user can collapse grouped records in a grid or not.
       */
      allowCollapsing?: boolean;
      /**
       * Specifies whether groups appear expanded or not.
       */
      autoExpandAll?: boolean;
      /**
       * Enables the user to group data using the context menu.
       */
      contextMenuEnabled?: boolean;
      /**
       * Specifies the event on which a group will be expanded/collapsed.
       */
      expandMode?: DevExpress.common.charts.GroupExpandMode;
      /**
       * Defines the texts of grouping-related visual elements.
       */
      texts?: GroupingTexts;
    };
    export type GroupingTexts = {
      /**
       * Specifies the text of the context menu item that groups data by a specific column.
       */
      groupByThisColumn?: string;
      /**
       * Specifies the message displayed in a group row when the corresponding group is continued from the previous page.
       */
      groupContinuedMessage?: string;
      /**
       * Specifies the message displayed in a group row when the corresponding group continues on the next page.
       */
      groupContinuesMessage?: string;
      /**
       * Specifies the text of the context menu item that clears grouping settings of a specific column.
       */
      ungroup?: string;
      /**
       * Specifies the text of the context menu item that clears grouping settings of all columns.
       */
      ungroupAll?: string;
    };
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    type GroupKey = any[];
    export type GroupPanel = {
      /**
       * Specifies whether columns can be dragged onto or from the group panel.
       */
      allowColumnDragging?: boolean;
      /**
       * Specifies text displayed by the group panel when it does not contain any columns.
       */
      emptyPanelText?: string;
      /**
       * Specifies whether the group panel is visible or not.
       */
      visible?: boolean | DevExpress.common.Mode;
    };
    export type HeaderFilterGroupInterval =
      | 'day'
      | 'hour'
      | 'minute'
      | 'month'
      | 'quarter'
      | 'second'
      | 'year';
    export type InitializedEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.InitializedEventInfo<dxDataGrid<TRowData, TKey>>;
    export type InitNewRowEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxDataGrid<TRowData, TKey>> &
      NewRowInfo<TRowData>;
    export type KeyDownEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.NativeEventInfo<
      dxDataGrid<TRowData, TKey>,
      KeyboardEvent
    > &
      KeyDownInfo;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export interface KeyDownInfo {
      handled: boolean;
    }
    export type MasterDetail<TRowData = any, TKey = any> = {
      /**
       * Specifies whether detail sections appear expanded or collapsed.
       */
      autoExpandAll?: boolean;
      /**
       * Enables an end-user to expand/collapse detail sections.
       */
      enabled?: boolean;
      /**
       * Specifies a custom template for detail sections.
       */
      template?:
        | DevExpress.core.template
        | ((
            detailElement: DevExpress.core.DxElement,
            detailInfo: MasterDetailTemplateData<TRowData, TKey>
          ) => any);
    };
    export type MasterDetailTemplateData<TRowData = any, TKey = any> = {
      readonly key: TKey;
      readonly data: TRowData;
      readonly watch?: Function;
    };
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export interface NewRowInfo<TRowData = any> {
      data: TRowData;
      promise?: PromiseLike<void>;
    }
    export type OptionChangedEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxDataGrid<TRowData, TKey>> &
      DevExpress.events.ChangedOptionInfo;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export interface PagingBase {
      /**
       * Enables paging.
       */
      enabled?: boolean;
      /**
       * Specifies the page to be displayed using a zero-based index.
       */
      pageIndex?: number;
      /**
       * Specifies the page size.
       */
      pageSize?: number;
    }
    export type Properties<TRowData = any, TKey = any> = dxDataGridOptions<
      TRowData,
      TKey
    >;
    /**
     * A grid row.
     */
    export type Row<TRowData = any, TKey = any> = {
      /**
       * The data object represented by the row.
       */
      readonly data: TRowData;
      /**
       * The group index of the row. Available when the rowType is &apos;group&apos;.
       */
      readonly groupIndex?: number;
      /**
       * Indicates whether the row is in the editing state.
       */
      readonly isEditing?: boolean;
      /**
       * Indicates whether the row is expanded or collapsed. Available if rowType is &apos;data&apos; or &apos;group&apos;.
       */
      readonly isExpanded?: boolean;
      /**
       * Indicates that the row is added, but not yet saved. Available if rowType is &apos;data&apos;.
       */
      readonly isNewRow?: boolean;
      /**
       * Indicates whether the row is selected. Available if rowType is &apos;data&apos;.
       */
      readonly isSelected?: boolean;
      /**
       * The key of the data object represented by the row.
       */
      readonly key: TKey;
      /**
       * The visible index of the row.
       */
      readonly rowIndex: number;
      /**
       * The row&apos;s type.
       */
      readonly rowType: string;
      /**
       * Values of the row as they exist in the data source.
       */
      readonly values: Array<any>;
    };
    export type RowClickEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.NativeEventInfo<
      dxDataGrid<TRowData, TKey>,
      PointerEvent | MouseEvent
    > & {
      readonly data: TRowData;
      readonly key: TKey;
      readonly values: Array<any>;
      readonly columns: Array<Column<TRowData, TKey>>;
      readonly rowIndex: number;
      readonly rowType: string;
      readonly isSelected?: boolean;
      readonly isExpanded?: boolean;
      readonly isNewRow?: boolean;
      readonly groupIndex?: number;
      readonly rowElement: DevExpress.core.DxElement;
      readonly handled: boolean;
    };
    export type RowCollapsedEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxDataGrid<TRowData, TKey>> &
      RowKeyInfo<TKey>;
    export type RowCollapsingEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.Cancelable &
      DevExpress.events.EventInfo<dxDataGrid<TRowData, TKey>> &
      RowKeyInfo<TKey>;
    export type RowDblClickEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.NativeEventInfo<
      dxDataGrid<TRowData, TKey>,
      PointerEvent | MouseEvent
    > & {
      readonly data: TRowData;
      readonly key: TKey;
      readonly values: Array<any>;
      readonly columns: Array<Column<TRowData, TKey>>;
      readonly rowIndex: number;
      readonly rowType: string;
      readonly isSelected?: boolean;
      readonly isExpanded?: boolean;
      readonly isNewRow?: boolean;
      readonly groupIndex?: number;
      readonly rowElement: DevExpress.core.DxElement;
    };
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export interface RowDragging<
      T extends GridBase<TRowData, TKey>,
      TRowData = any,
      TKey = any
    > {
      /**
       * Allows users to drop a row inside another row.
       */
      allowDropInsideItem?: boolean;
      /**
       * Allows row reordering using drag and drop gestures.
       */
      allowReordering?: boolean;
      /**
       * Enables automatic scrolling while dragging a row beyond the viewport.
       */
      autoScroll?: boolean;
      /**
       * Specifies a DOM element that limits the dragging area.
       */
      boundary?: string | DevExpress.core.UserDefinedElement;
      /**
       * Specifies a custom container in which the draggable row should be rendered.
       */
      container?: string | DevExpress.core.UserDefinedElement;
      /**
       * Specifies the cursor offset from the dragged row.
       */
      cursorOffset?:
        | string
        | {
            /**
             * Specifies the horizontal cursor offset from the dragged row in pixels.
             */
            x?: number;
            /**
             * Specifies the vertical cursor offset from the dragged row in pixels.
             */
            y?: number;
          };
      /**
       * A container for custom data.
       */
      data?: any;
      /**
       * Specifies the directions in which a row can be dragged.
       */
      dragDirection?: DevExpress.common.DragDirection;
      /**
       * Specifies custom markup to be shown instead of the item being dragged.
       */
      dragTemplate?:
        | DevExpress.core.template
        | ((
            dragInfo: RowDraggingTemplateData<TRowData>,
            containerElement: DevExpress.core.DxElement
          ) => string | DevExpress.core.UserDefinedElement);
      /**
       * Specifies how to highlight the row&apos;s drop position.
       */
      dropFeedbackMode?: DevExpress.common.DragHighlight;
      /**
       * Specifies a CSS selector for draggable rows.
       */
      filter?: string;
      /**
       * Allows you to group several UI components so that users can drag and drop rows between them.
       */
      group?: string;
      /**
       * Specifies a CSS selector (ID or class) for the element(s) that should act as the drag handle(s).
       */
      handle?: string;
      /**
       * A function that is called when a new row is added.
       */
      onAdd?: (
        e: RowDraggingEventInfo<T, TRowData, TKey> & DragDropInfo
      ) => void;
      /**
       * A function that is called when the dragged row&apos;s position is changed.
       */
      onDragChange?: (
        e: DevExpress.events.Cancelable &
          RowDraggingEventInfo<T, TRowData, TKey> &
          DragDropInfo
      ) => void;
      /**
       * A function that is called when the drag gesture is finished.
       */
      onDragEnd?: (
        e: DevExpress.events.Cancelable &
          RowDraggingEventInfo<T, TRowData, TKey> &
          DragDropInfo
      ) => void;
      /**
       * A function that is called every time a draggable row is moved.
       */
      onDragMove?: (
        e: DevExpress.events.Cancelable &
          RowDraggingEventInfo<T, TRowData, TKey> &
          DragDropInfo
      ) => void;
      /**
       * A function that is called when the drag gesture is initialized.
       */
      onDragStart?: (
        e: DevExpress.events.Cancelable & DragStartEventInfo<T, TRowData, TKey>
      ) => void;
      /**
       * A function that is called when a draggable row is removed.
       */
      onRemove?: (e: RowDraggingEventInfo<T, TRowData, TKey>) => void;
      /**
       * A function that is called when the draggable rows are reordered.
       */
      onReorder?: (
        e: RowDraggingEventInfo<dxDataGrid<TRowData, TKey>, TRowData, TKey> &
          DragReorderInfo
      ) => void;
      /**
       * Specifies the distance in pixels from the edge of viewport at which scrolling should start. Applies only if autoScroll is true.
       */
      scrollSensitivity?: number;
      /**
       * Specifies the scrolling speed when dragging a row beyond the viewport. Applies only if autoScroll is true.
       */
      scrollSpeed?: number;
      /**
       * Shows or hides row dragging icons.
       */
      showDragIcons?: boolean;
    }
    export type RowDraggingAddEvent<
      TRowData = any,
      TKey = any
    > = RowDraggingEventInfo<dxDataGrid<TRowData, TKey>, TRowData, TKey> &
      DragDropInfo;
    export type RowDraggingChangeEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.Cancelable &
      RowDraggingEventInfo<dxDataGrid<TRowData, TKey>, TRowData, TKey> &
      DragDropInfo;
    export type RowDraggingEndEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.Cancelable &
      RowDraggingEventInfo<dxDataGrid<TRowData, TKey>, TRowData, TKey> &
      DragDropInfo;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export interface RowDraggingEventInfo<
      T extends GridBase<TRowData, TKey>,
      TRowData = any,
      TKey = any
    > {
      readonly component: T;
      readonly event: DevExpress.events.DxEvent<
        PointerEvent | MouseEvent | TouchEvent
      >;
      readonly itemData?: TRowData;
      readonly itemElement: DevExpress.core.DxElement;
      readonly fromIndex: number;
      readonly toIndex: number;
      readonly fromComponent: dxSortable | dxDraggable;
      readonly toComponent: dxSortable | dxDraggable;
      readonly fromData?: any;
      readonly toData?: any;
    }
    export type RowDraggingMoveEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.Cancelable &
      RowDraggingEventInfo<dxDataGrid<TRowData, TKey>, TRowData, TKey> &
      DragDropInfo;
    export type RowDraggingRemoveEvent<
      TRowData = any,
      TKey = any
    > = RowDraggingEventInfo<dxDataGrid<TRowData, TKey>, TRowData, TKey>;
    export type RowDraggingReorderEvent<
      TRowData = any,
      TKey = any
    > = RowDraggingEventInfo<dxDataGrid<TRowData, TKey>, TRowData, TKey> &
      DragReorderInfo;
    export type RowDraggingStartEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.Cancelable &
      DragStartEventInfo<dxDataGrid<TRowData, TKey>, TRowData, TKey>;
    export type RowDraggingTemplateData<TRowData = any> =
      RowDraggingTemplateDataModel<TRowData>;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export interface RowDraggingTemplateDataModel<TRowData = any> {
      readonly itemData: TRowData;
      readonly itemElement: DevExpress.core.DxElement;
    }
    export type RowExpandedEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxDataGrid<TRowData, TKey>> &
      RowKeyInfo<TKey>;
    export type RowExpandingEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.Cancelable &
      DevExpress.events.EventInfo<dxDataGrid<TRowData, TKey>> &
      RowKeyInfo<TKey>;
    export type RowInsertedEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxDataGrid<TRowData, TKey>> &
      RowInsertedInfo<TRowData, TKey>;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export interface RowInsertedInfo<TRowData = any, TKey = any> {
      readonly data: TRowData;
      readonly key: TKey;
      readonly error: Error;
    }
    export type RowInsertingEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxDataGrid<TRowData, TKey>> &
      RowInsertingInfo<TRowData>;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export interface RowInsertingInfo<TRowData = any> {
      data: TRowData;
      cancel: boolean | PromiseLike<void>;
    }
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export interface RowKeyInfo<TKey = any> {
      readonly key: TKey;
    }
    export type RowPreparedEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxDataGrid<TRowData, TKey>> & {
      readonly data: TRowData;
      readonly key: TKey;
      readonly values: Array<any>;
      readonly columns: Array<Column<TRowData, TKey>>;
      readonly rowIndex: number;
      readonly rowType: string;
      readonly groupIndex?: number;
      readonly isSelected?: boolean;
      readonly isExpanded?: boolean;
      readonly isNewRow?: boolean;
      readonly rowElement: DevExpress.core.DxElement;
    };
    export type RowRemovedEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxDataGrid<TRowData, TKey>> &
      RowRemovedInfo<TRowData, TKey>;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export interface RowRemovedInfo<TRowData = any, TKey = any> {
      readonly data: TRowData;
      readonly key: TKey;
      readonly error: Error;
    }
    export type RowRemovingEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxDataGrid<TRowData, TKey>> &
      RowRemovingInfo<TRowData, TKey>;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export interface RowRemovingInfo<TRowData = any, TKey = any> {
      readonly data: TRowData;
      readonly key: TKey;
      cancel: boolean | PromiseLike<void>;
    }
    export type RowTemplateData<TRowData = any, TKey = any> = {
      readonly key: TKey;
      readonly data: TRowData;
      readonly component: dxDataGrid<TRowData, TKey>;
      readonly values: Array<any>;
      readonly rowIndex: number;
      readonly columns: Array<Column<TRowData, TKey>>;
      readonly isSelected?: boolean;
      readonly rowType: string;
      readonly groupIndex?: number;
      readonly isExpanded?: boolean;
    };
    export type RowUpdatedEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxDataGrid<TRowData, TKey>> &
      RowUpdatedInfo<TRowData, TKey>;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export interface RowUpdatedInfo<TRowData = any, TKey = any> {
      readonly data: TRowData;
      readonly key: TKey;
      readonly error: Error;
    }
    export type RowUpdatingEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxDataGrid<TRowData, TKey>> &
      RowUpdatingInfo<TRowData, TKey>;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export interface RowUpdatingInfo<TRowData = any, TKey = any> {
      readonly oldData: TRowData;
      newData: DevExpress.core.DeepPartial<TRowData>;
      readonly key: TKey;
      cancel: boolean | PromiseLike<void>;
    }
    export type RowValidatingEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxDataGrid<TRowData, TKey>> &
      RowValidatingInfo<TRowData, TKey>;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export interface RowValidatingInfo<TRowData = any, TKey = any> {
      readonly brokenRules: Array<
        | RequiredRule
        | NumericRule
        | RangeRule
        | StringLengthRule
        | CustomRule
        | CompareRule
        | PatternRule
        | EmailRule
        | AsyncRule
      >;
      isValid: boolean;
      readonly key: TKey;
      readonly newData: DevExpress.core.DeepPartial<TRowData>;
      readonly oldData: TRowData;
      errorText: string;
      promise?: PromiseLike<void>;
    }
    export type SavedEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxDataGrid<TRowData, TKey>> &
      DataChangeInfo<TRowData, TKey>;
    export type SavingEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxDataGrid<TRowData, TKey>> &
      SavingInfo<TRowData, TKey>;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export interface SavingInfo<TRowData = any, TKey = any> {
      changes: Array<DevExpress.common.grids.DataChange<TRowData, TKey>>;
      promise?: PromiseLike<void>;
      cancel: boolean;
    }
    export type Scrollable = DevExpress.core.Skip<
      dxScrollable,
      | '_templateManager'
      | '_cancelOptionChange'
      | '_getTemplate'
      | '_invalidate'
      | '_refresh'
      | '_notifyOptionChanged'
      | '_createElement'
    >;
    export type Scrolling = ScrollingBase & {
      /**
       * Specifies the scrolling mode.
       */
      mode?: DataGridScrollMode;
    };
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export interface ScrollingBase {
      /**
       * Specifies the rendering mode for columns. Applies when columns are left outside the viewport. Requires the columnWidth, columnAutoWidth, or width (for all columns) property specified.
       */
      columnRenderingMode?: DevExpress.common.charts.DataRenderMode;
      /**
       * Specifies whether the UI component should load adjacent pages. Applies only if scrolling.mode is &apos;virtual&apos; or &apos;infinite&apos;.
       */
      preloadEnabled?: boolean;
      /**
       * Specifies the rendering mode for loaded rows.
       */
      rowRenderingMode?: DevExpress.common.charts.DataRenderMode;
      /**
       * Specifies whether a user can scroll the content with a swipe gesture. Applies only if useNative is false.
       */
      scrollByContent?: boolean;
      /**
       * Specifies whether a user can scroll the content with the scrollbar. Applies only if useNative is false.
       */
      scrollByThumb?: boolean;
      /**
       * Specifies when to show scrollbars. Applies only if useNative is false.
       */
      showScrollbar?: DevExpress.common.ScrollbarMode;
      /**
       * Specifies whether the widget should use native or simulated scrolling.
       */
      useNative?: boolean | DevExpress.common.Mode;
      /**
       * Specifies whether to render rows after a user stops scrolling or at the same time as the user scrolls the widget.
       */
      renderAsync?: boolean;
    }
    export type Selection = SelectionBase & {
      /**
       * Makes selection deferred.
       */
      deferred?: boolean;
      /**
       * Specifies the mode in which all the records are selected. Applies only if selection.allowSelectAll is true.
       */
      selectAllMode?: DevExpress.common.SelectAllMode;
      /**
       * Specifies when to display the selection column and row selection checkboxes. Applies only if selection.mode is &apos;multiple&apos;.
       */
      showCheckBoxesMode?: DevExpress.common.charts.SelectionColumnDisplayMode;
    };
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export interface SelectionBase {
      /**
       * Allows users to simultaneously select all or current page rows (depending on the selectAllMode).
       */
      allowSelectAll?: boolean;
      /**
       * Specifies the selection mode.
       */
      mode?: DevExpress.common.SingleMultipleOrNone;
    }
    export type SelectionChangedEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxDataGrid<TRowData, TKey>> &
      SelectionChangedInfo<TRowData, TKey>;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export interface SelectionChangedInfo<TRowData = any, TKey = any> {
      readonly currentSelectedRowKeys: Array<TKey>;
      readonly currentDeselectedRowKeys: Array<TKey>;
      readonly selectedRowKeys: Array<TKey>;
      readonly selectedRowsData: Array<TRowData>;
    }
    export type Summary<TRowData = any, TKey = any> = {
      /**
       * Specifies a custom aggregate function. This function is called for summary items whose summaryType is &apos;custom&apos;.
       */
      calculateCustomSummary?: (
        options: CustomSummaryInfo<TRowData, TKey>
      ) => void;
      /**
       * Specifies items of the group summary.
       */
      groupItems?: Array<SummaryGroupItem>;
      /**
       * Specifies whether to recalculate summaries while a user edits data.
       */
      recalculateWhileEditing?: boolean;
      /**
       * Specifies whether to skip empty strings, null and undefined values when calculating a summary. Does not apply when you use a remote data source.
       */
      skipEmptyValues?: boolean;
      /**
       * Contains properties that specify text patterns for summary items.
       */
      texts?: SummaryTexts;
      /**
       * Specifies items of the total summary.
       */
      totalItems?: Array<SummaryTotalItem>;
    };
    export type SummaryGroupItem = {
      /**
       * Indicates whether to display group summary items in parentheses after the group row header or to align them by the corresponding columns within the group row.
       */
      alignByColumn?: boolean;
      /**
       * Specifies the column that provides data for a group summary item.
       */
      column?: string;
      /**
       * Customizes the text to be displayed in the summary item.
       */
      customizeText?: (itemInfo: SummaryItemTextInfo) => string;
      /**
       * Specifies the summary item&apos;s text.
       */
      displayFormat?: string;
      /**
       * Specifies the group summary item&apos;s identifier.
       */
      name?: string;
      /**
       * Specifies the column that must hold the summary item when this item is displayed in the group footer or aligned by a column in the group row.
       */
      showInColumn?: string;
      /**
       * Specifies whether or not a summary item must be displayed in the group footer.
       */
      showInGroupFooter?: boolean;
      /**
       * Specifies whether to skip empty strings, null, and undefined values when calculating a summary. Does not apply when you use a remote data source.
       */
      skipEmptyValues?: boolean;
      /**
       * Specifies how to aggregate data for the group summary item.
       */
      summaryType?: DevExpress.common.charts.SummaryType | string;
      /**
       * Specifies a summary item value&apos;s display format.
       */
      valueFormat?: Format;
    };
    export type SummaryItemTextInfo = {
      readonly value?: string | number | Date;
      readonly valueText: string;
    };
    export type SummaryTexts = {
      /**
       * Specifies a pattern for the &apos;avg&apos; summary items when they are displayed in the parent column.
       */
      avg?: string;
      /**
       * Specifies a pattern for the &apos;avg&apos; summary items displayed in a group row or in any other column rather than the parent one.
       */
      avgOtherColumn?: string;
      /**
       * Specifies a pattern for the &apos;count&apos; summary items.
       */
      count?: string;
      /**
       * Specifies a pattern for the &apos;max&apos; summary items when they are displayed in the parent column.
       */
      max?: string;
      /**
       * Specifies a pattern for the &apos;max&apos; summary items displayed in a group row or in any other column rather than the parent one.
       */
      maxOtherColumn?: string;
      /**
       * Specifies a pattern for the &apos;min&apos; summary items when they are displayed in the parent column.
       */
      min?: string;
      /**
       * Specifies a pattern for the &apos;min&apos; summary items displayed in a group row or in any other column rather than the parent one.
       */
      minOtherColumn?: string;
      /**
       * Specifies a pattern for the &apos;sum&apos; summary items when they are displayed in the parent column.
       */
      sum?: string;
      /**
       * Specifies a pattern for the &apos;sum&apos; summary items displayed in a group row or in any other column rather than the parent one.
       */
      sumOtherColumn?: string;
    };
    export type SummaryTotalItem = {
      /**
       * Specifies the alignment of a summary item.
       */
      alignment?: DevExpress.common.HorizontalAlignment;
      /**
       * Specifies the column that provides data for a summary item.
       */
      column?: string;
      /**
       * Specifies a CSS class to be applied to a summary item.
       */
      cssClass?: string;
      /**
       * Customizes the text to be displayed in the summary item.
       */
      customizeText?: (itemInfo: SummaryItemTextInfo) => string;
      /**
       * Specifies the summary item&apos;s text.
       */
      displayFormat?: string;
      /**
       * Specifies the total summary item&apos;s identifier.
       */
      name?: string;
      /**
       * Specifies the column that must hold the summary item.
       */
      showInColumn?: string;
      /**
       * Specifies whether to skip empty strings, null, and undefined values when calculating a summary. Does not apply when you use a remote data source.
       */
      skipEmptyValues?: boolean;
      /**
       * Specifies how to aggregate data for the total summary item.
       */
      summaryType?: DevExpress.common.charts.SummaryType | string;
      /**
       * Specifies a summary item value&apos;s display format.
       */
      valueFormat?: Format;
    };
    export type ToolbarPreparingEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxDataGrid<TRowData, TKey>> &
      ToolbarPreparingInfo;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export interface ToolbarPreparingInfo {
      toolbarOptions: dxToolbarOptions;
    }
  }
  /**
   * @deprecated Use the DevExpress.ui.dxDataGrid.Column type instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxDataGridColumn<TRowData = any, TKey = any>
    extends DevExpress.ui.dxDataGrid.ColumnBase<TRowData> {
    /**
     * Specifies whether data from this column should be exported. Applies only if the column is visible.
     */
    allowExporting?: boolean;
    /**
     * Specifies whether the user can group data by values of this column. Applies only when grouping is enabled.
     */
    allowGrouping?: boolean;
    /**
     * Specifies whether groups appear expanded or not when records are grouped by a specific column. Setting this property makes sense only when grouping is allowed for this column.
     */
    autoExpandGroup?: boolean;
    /**
     * Allows you to customize buttons in the edit column or create a custom command column. Applies only if the column&apos;s type is &apos;buttons&apos;.
     */
    buttons?: Array<
      | DevExpress.ui.dxDataGrid.DataGridPredefinedColumnButton
      | DevExpress.ui.dxDataGrid.ColumnButton<TRowData, TKey>
    >;
    /**
     * Sets custom column values used to group grid records.
     */
    calculateGroupValue?: string | ((rowData: TRowData) => any);
    /**
     * Specifies a custom template for data cells.
     */
    cellTemplate?:
      | DevExpress.core.template
      | ((
          cellElement: DevExpress.core.DxElement,
          cellInfo: DevExpress.ui.dxDataGrid.ColumnCellTemplateData<
            TRowData,
            TKey
          >
        ) => any);
    /**
     * An array of grid columns.
     */
    columns?: Array<DevExpress.ui.dxDataGrid.Column<TRowData, TKey> | string>;
    /**
     * Specifies a custom template for data cells in editing state.
     */
    editCellTemplate?:
      | DevExpress.core.template
      | ((
          cellElement: DevExpress.core.DxElement,
          cellInfo: DevExpress.ui.dxDataGrid.ColumnEditCellTemplateData<
            TRowData,
            TKey
          >
        ) => any);
    /**
     * Specifies a custom template for group cells (group rows).
     */
    groupCellTemplate?:
      | DevExpress.core.template
      | ((
          cellElement: DevExpress.core.DxElement,
          cellInfo: DevExpress.ui.dxDataGrid.ColumnGroupCellTemplateData<
            TRowData,
            TKey
          >
        ) => any);
    /**
     * Specifies the index of a column when grid records are grouped by the values of this column.
     */
    groupIndex?: number;
    /**
     * Specifies a custom template for column headers.
     */
    headerCellTemplate?:
      | DevExpress.core.template
      | ((
          columnHeader: DevExpress.core.DxElement,
          headerInfo: DevExpress.ui.dxDataGrid.ColumnHeaderCellTemplateData<
            TRowData,
            TKey
          >
        ) => any);
    /**
     * Specifies whether or not to display the column when grid records are grouped by it.
     */
    showWhenGrouped?: boolean;
    /**
     * Specifies the command column that this object customizes.
     */
    type?: DevExpress.ui.dxDataGrid.DataGridCommandColumnType;
  }
  /**
   * @deprecated Use the DataGrid's ColumnButton type instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxDataGridColumnButton<TRowData = any, TKey = any>
    extends DevExpress.ui.dxDataGrid.ColumnButtonBase {
    /**
     * The name used to identify a built-in button.
     */
    name?: DevExpress.ui.dxDataGrid.DataGridPredefinedColumnButton | string;
    /**
     * A function that is executed when the button is clicked or tapped.
     */
    onClick?: (
      e: DevExpress.ui.dxDataGrid.ColumnButtonClickEvent<TRowData, TKey>
    ) => void;
    /**
     * Specifies a custom button template.
     */
    template?:
      | DevExpress.core.template
      | ((
          cellElement: DevExpress.core.DxElement,
          cellInfo: DevExpress.ui.dxDataGrid.ColumnButtonTemplateData<
            TRowData,
            TKey
          >
        ) => string | DevExpress.core.UserDefinedElement);
    /**
     * Specifies the button&apos;s visibility.
     */
    visible?:
      | boolean
      | ((options: {
          component?: dxDataGrid<TRowData, TKey>;
          row?: DevExpress.ui.dxDataGrid.Row<TRowData, TKey>;
          column?: DevExpress.ui.dxDataGrid.Column<TRowData, TKey>;
        }) => boolean);
    /**
     * Specifies whether the button is disabled.
     */
    disabled?:
      | boolean
      | ((options: {
          component?: dxDataGrid<TRowData, TKey>;
          row?: DevExpress.ui.dxDataGrid.Row<TRowData, TKey>;
          column?: DevExpress.ui.dxDataGrid.Column<TRowData, TKey>;
        }) => boolean);
  }
  /**
   * @deprecated Use DevExpress.ui.dxDataGrid.Editing instead
   */
  export type dxDataGridEditing<
    TRowData,
    TKey = any
  > = DevExpress.ui.dxDataGrid.Editing<TRowData, TKey>;
  /**
   * @deprecated use Properties instead
   */
  export interface dxDataGridOptions<TRowData = any, TKey = any>
    extends GridBaseOptions<dxDataGrid<TRowData, TKey>, TRowData, TKey> {
    /**
     * An array of grid columns.
     */
    columns?: Array<DevExpress.ui.dxDataGrid.Column<TRowData, TKey> | string>;
    /**
     * Customizes columns after they are created.
     */
    customizeColumns?: (
      columns: Array<DevExpress.ui.dxDataGrid.Column<TRowData, TKey>>
    ) => void;
    /**
     * Customizes data before export.
     * @deprecated Since v20.1, we recommend ExcelJS-based export which does not use this property.
     */
    customizeExportData?: (
      columns: Array<DevExpress.ui.dxDataGrid.Column<TRowData, TKey>>,
      rows: Array<DevExpress.ui.dxDataGrid.Row<TRowData, TKey>>
    ) => void;
    /**
     * Configures editing.
     */
    editing?: DevExpress.ui.dxDataGrid.Editing<TRowData, TKey>;
    /**
     * Configures client-side exporting.
     */
    export?: DevExpress.ui.dxDataGrid.Export<TRowData, TKey>;
    /**
     * Configures the group panel.
     */
    groupPanel?: DevExpress.ui.dxDataGrid.GroupPanel;
    /**
     * Configures grouping.
     */
    grouping?: DevExpress.ui.dxDataGrid.Grouping;
    /**
     * Specifies the key property (or properties) that provide(s) key values to access data items. Each key value must be unique. This property applies only if data is a simple array.
     */
    keyExpr?: string | Array<string>;
    /**
     * Allows you to build a master-detail interface in the grid.
     */
    masterDetail?: DevExpress.ui.dxDataGrid.MasterDetail<TRowData, TKey>;
    /**
     * A function that is executed when a cell is clicked or tapped. Executed before onRowClick.
     */
    onCellClick?: (
      e: DevExpress.ui.dxDataGrid.CellClickEvent<TRowData, TKey>
    ) => void;
    /**
     * A function that is executed when a cell is double-clicked or double-tapped. Executed before onRowDblClick.
     */
    onCellDblClick?: (
      e: DevExpress.ui.dxDataGrid.CellDblClickEvent<TRowData, TKey>
    ) => void;
    /**
     * A function that is executed after the pointer enters or leaves a cell.
     */
    onCellHoverChanged?: (
      e: DevExpress.ui.dxDataGrid.CellHoverChangedEvent<TRowData, TKey>
    ) => void;
    /**
     * A function that is executed after a grid cell is created.
     */
    onCellPrepared?: (
      e: DevExpress.ui.dxDataGrid.CellPreparedEvent<TRowData, TKey>
    ) => void;
    /**
     * A function that is executed before the context menu is rendered.
     */
    onContextMenuPreparing?: (
      e: DevExpress.ui.dxDataGrid.ContextMenuPreparingEvent<TRowData, TKey>
    ) => void;
    /**
     * A function that is executed before a cell or row switches to the editing state.
     */
    onEditingStart?: (
      e: DevExpress.ui.dxDataGrid.EditingStartEvent<TRowData, TKey>
    ) => void;
    /**
     * A function that is executed after an editor is created. Not executed for cells with an editCellTemplate.
     */
    onEditorPrepared?: (
      options: DevExpress.ui.dxDataGrid.EditorPreparedEvent<TRowData, TKey>
    ) => void;
    /**
     * A function used to customize a cell&apos;s editor. Not executed for cells with an editCellTemplate.
     */
    onEditorPreparing?: (
      e: DevExpress.ui.dxDataGrid.EditorPreparingEvent<TRowData, TKey>
    ) => void;
    /**
     * A function that is executed after data is exported.
     * @deprecated Since v20.1, we recommend ExcelJS-based export which does not use this property.
     */
    onExported?: (
      e: DevExpress.ui.dxDataGrid.ExportedEvent<TRowData, TKey>
    ) => void;
    /**
     * A function that is executed before data is exported.
     */
    onExporting?: (
      e: DevExpress.ui.dxDataGrid.ExportingEvent<TRowData, TKey>
    ) => void;
    /**
     * A function that is executed before a file with exported data is saved to the user&apos;s local storage.
     * @deprecated Since v20.1, we recommend ExcelJS-based export which does not use this property.
     */
    onFileSaving?: (
      e: DevExpress.ui.dxDataGrid.FileSavingEvent<TRowData, TKey>
    ) => void;
    /**
     * A function that is executed after the focused cell changes. Applies only to cells in data or group rows.
     */
    onFocusedCellChanged?: (
      e: DevExpress.ui.dxDataGrid.FocusedCellChangedEvent<TRowData, TKey>
    ) => void;
    /**
     * A function that is executed before the focused cell changes. Applies only to cells in data or group rows.
     */
    onFocusedCellChanging?: (
      e: DevExpress.ui.dxDataGrid.FocusedCellChangingEvent<TRowData, TKey>
    ) => void;
    /**
     * A function that is executed after the focused row changes. Applies only to data or group rows. focusedRowEnabled should be true.
     */
    onFocusedRowChanged?: (
      e: DevExpress.ui.dxDataGrid.FocusedRowChangedEvent<TRowData, TKey>
    ) => void;
    /**
     * A function that is executed before the focused row changes. Applies only to data or group rows. focusedRowEnabled should be true.
     */
    onFocusedRowChanging?: (
      e: DevExpress.ui.dxDataGrid.FocusedRowChangingEvent<TRowData, TKey>
    ) => void;
    /**
     * A function that is executed when a row is clicked or tapped.
     */
    onRowClick?: (
      e: DevExpress.ui.dxDataGrid.RowClickEvent<TRowData, TKey>
    ) => void;
    /**
     * A function that is executed when a row is double-clicked or double-tapped. Executed after onCellDblClick.
     */
    onRowDblClick?: (
      e: DevExpress.ui.dxDataGrid.RowDblClickEvent<TRowData, TKey>
    ) => void;
    /**
     * A function that is executed after a row is created.
     */
    onRowPrepared?: (
      e: DevExpress.ui.dxDataGrid.RowPreparedEvent<TRowData, TKey>
    ) => void;
    /**
     * Notifies the DataGrid of the server&apos;s data processing operations.
     */
    remoteOperations?:
      | boolean
      | {
          /**
           * Specifies whether or not filtering must be performed on the server side.
           */
          filtering?: boolean;
          /**
           * Specifies whether paging by groups should be performed on the server side.
           */
          groupPaging?: boolean;
          /**
           * Specifies whether or not grouping must be performed on the server side.
           */
          grouping?: boolean;
          /**
           * Specifies whether or not paging must be performed on the server side.
           */
          paging?: boolean;
          /**
           * Specifies whether or not sorting must be performed on the server side.
           */
          sorting?: boolean;
          /**
           * Specifies whether or not summaries summaries are calculated on the server-side.
           */
          summary?: boolean;
        }
      | DevExpress.common.Mode;
    /**
     * Specifies a custom template for rows.
     * @deprecated 
     */
    rowTemplate?:
      | DevExpress.core.template
      | ((
          rowElement: DevExpress.core.DxElement,
          rowInfo: DevExpress.ui.dxDataGrid.RowTemplateData<TRowData, TKey>
        ) => any);
    /**
     * Specifies a custom template for data rows.
     */
    dataRowTemplate?:
      | DevExpress.core.template
      | ((
          rowElement: DevExpress.core.DxElement,
          rowInfo: DevExpress.ui.dxDataGrid.DataRowTemplateData<TRowData, TKey>
        ) => any);
    /**
     * Configures scrolling.
     */
    scrolling?: DevExpress.ui.dxDataGrid.Scrolling;
    /**
     * Configures runtime selection.
     */
    selection?: DevExpress.ui.dxDataGrid.Selection;
    /**
     * Specifies filters for the rows that must be selected initially. Applies only if selection.deferred is true.
     */
    selectionFilter?: string | Array<any> | Function;
    /**
     * Allows you to sort groups according to the values of group summary items.
     */
    sortByGroupSummaryInfo?: Array<DevExpress.ui.dxDataGrid.dxDataGridSortByGroupSummaryInfoItem>;
    /**
     * Specifies the properties of the grid summary.
     */
    summary?: DevExpress.ui.dxDataGrid.Summary<TRowData, TKey>;
    /**
     * Configures the toolbar.
     */
    toolbar?: DevExpress.ui.dxDataGrid.Toolbar;
  }
  /**
   * @deprecated Use DevExpress.ui.dxDataGrid.Scrolling instead
   */
  export type dxDataGridScrolling = DevExpress.ui.dxDataGrid.Scrolling;
  /**
   * @deprecated Use DevExpress.ui.dxDataGrid.Selection instead
   */
  export type dxDataGridSelection = DevExpress.ui.dxDataGrid.Selection;
  /**
   * The DateBox is a UI component that displays date and time in a specified format, and enables a user to pick or type in the required date/time value.
   */
  export class dxDateBox extends dxDropDownEditor<dxDateBoxOptions> {
    /**
     * Closes the drop-down editor.
     */
    close(): void;
    /**
     * Opens the drop-down editor.
     */
    open(): void;
  }
  module dxDateBox {
    export type ChangeEvent = DevExpress.events.NativeEventInfo<
      dxDateBox,
      Event
    >;
    export type ClosedEvent = DevExpress.events.EventInfo<dxDateBox>;
    export type ContentReadyEvent = DevExpress.events.EventInfo<dxDateBox>;
    export type CopyEvent = DevExpress.events.NativeEventInfo<
      dxDateBox,
      ClipboardEvent
    >;
    export type CutEvent = DevExpress.events.NativeEventInfo<
      dxDateBox,
      ClipboardEvent
    >;
    export type DatePickerType = 'calendar' | 'list' | 'native' | 'rollers';
    export type DateType = 'date' | 'datetime' | 'time';
    export type DisabledDate =
      DevExpress.ui.dxCalendar.ComponentDisabledDate<dxDateBox>;
    export type DisposingEvent = DevExpress.events.EventInfo<dxDateBox>;
    export type DropDownButtonTemplateData =
      DevExpress.ui.dxDropDownEditor.DropDownButtonTemplateDataModel;
    export type EnterKeyEvent = DevExpress.events.NativeEventInfo<
      dxDateBox,
      KeyboardEvent
    >;
    export type FocusInEvent = DevExpress.events.NativeEventInfo<
      dxDateBox,
      FocusEvent
    >;
    export type FocusOutEvent = DevExpress.events.NativeEventInfo<
      dxDateBox,
      FocusEvent
    >;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxDateBox>;
    export type InputEvent = DevExpress.events.NativeEventInfo<
      dxDateBox,
      UIEvent & { target: HTMLInputElement }
    >;
    export type KeyDownEvent = DevExpress.events.NativeEventInfo<
      dxDateBox,
      KeyboardEvent
    >;
    export type KeyPressEvent = DevExpress.events.NativeEventInfo<
      dxDateBox,
      KeyboardEvent
    >;
    export type KeyUpEvent = DevExpress.events.NativeEventInfo<
      dxDateBox,
      KeyboardEvent
    >;
    export type OpenedEvent = DevExpress.events.EventInfo<dxDateBox>;
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxDateBox> &
      DevExpress.events.ChangedOptionInfo;
    export type PasteEvent = DevExpress.events.NativeEventInfo<
      dxDateBox,
      ClipboardEvent
    >;
    export type Properties = dxDateBoxOptions;
    export type ValueChangedEvent = DevExpress.events.NativeEventInfo<
      dxDateBox,
      KeyboardEvent | MouseEvent | PointerEvent | Event
    > &
      DevExpress.ui.Editor.ValueChangedInfo;
  }
  /**
   * @deprecated use Properties instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxDateBoxOptions extends dxDropDownEditorOptions<dxDateBox> {
    /**
     * Specifies whether or not adaptive UI component rendering is enabled on a small screen.
     */
    adaptivityEnabled?: boolean;
    /**
     * The text displayed on the Apply button.
     */
    applyButtonText?: string;
    /**
     * Configures the calendar&apos;s value picker. Applies only if the pickerType is &apos;calendar&apos;.
     */
    calendarOptions?: dxCalendarOptions;
    /**
     * The text displayed on the Cancel button.
     */
    cancelButtonText?: string;
    /**
     * Specifies the message displayed if the specified date is later than the max value or earlier than the min value.
     */
    dateOutOfRangeMessage?: string;
    /**
     * Specifies the date-time value serialization format. Use it only if you do not specify the value at design time.
     */
    dateSerializationFormat?: string;
    /**
     * Specifies dates that users cannot select. Applies only if pickerType is &apos;calendar&apos;.
     */
    disabledDates?:
      | Array<Date>
      | ((data: DevExpress.ui.dxDateBox.DisabledDate) => boolean);
    /**
     * Specifies the date display format. Ignored if the pickerType property is &apos;native&apos;
     */
    displayFormat?: Format;
    /**
     * Specifies the interval between neighboring values in the popup list in minutes.
     */
    interval?: number;
    /**
     * Specifies the message displayed if the typed value is not a valid date or time.
     */
    invalidDateMessage?: string;
    /**
     * The last date that can be selected within the UI component.
     */
    max?: Date | number | string;
    /**
     * The minimum date that can be selected within the UI component.
     */
    min?: Date | number | string;
    /**
     * Specifies the type of the date/time picker.
     */
    pickerType?: DevExpress.ui.dxDateBox.DatePickerType;
    /**
     * Specifies a placeholder for the input field.
     */
    placeholder?: string;
    /**
     * Specifies whether to show the analog clock in the value picker. Applies only if type is &apos;datetime&apos; and pickerType is &apos;calendar&apos;.
     */
    showAnalogClock?: boolean;
    /**
     * A format used to display date/time information.
     */
    type?: DevExpress.ui.dxDateBox.DateType;
    /**
     * Specifies whether to control user input using a mask created based on the displayFormat.
     */
    useMaskBehavior?: boolean;
    /**
     * An object or a value specifying the date and time currently selected using the date box.
     */
    value?: Date | number | string;

    /**
     * Configures the drop-down field which holds the content.
     */
    dropDownOptions?: DevExpress.ui.dxPopup.Properties;
  }
  /**
   * The DeferRendering is a UI component that waits for its content to be ready before rendering it. While the content is getting ready, the DeferRendering displays a loading indicator.
   */
  export class dxDeferRendering extends Widget<dxDeferRenderingOptions> {}
  module dxDeferRendering {
    export type ContentReadyEvent =
      DevExpress.events.EventInfo<dxDeferRendering>;
    export type DisposingEvent = DevExpress.events.EventInfo<dxDeferRendering>;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxDeferRendering>;
    export type OptionChangedEvent =
      DevExpress.events.EventInfo<dxDeferRendering> &
        DevExpress.events.ChangedOptionInfo;
    export type Properties = dxDeferRenderingOptions;
    export type RenderedEvent = DevExpress.events.EventInfo<dxDeferRendering>;
    export type ShownEvent = DevExpress.events.EventInfo<dxDeferRendering>;
  }
  /**
   * @deprecated use Properties instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxDeferRenderingOptions
    extends WidgetOptions<dxDeferRendering> {
    /**
     * Specifies the animation to be used to show the rendered content.
     */
    animation?: AnimationConfig;
    /**
     * A function that is executed when the content is rendered but not yet displayed.
     */
    onRendered?: (e: {
      component?: dxDeferRendering;
      element?: DevExpress.core.DxElement;
      model?: any;
    }) => void;
    /**
     * A function that is executed when the content is displayed and animation is completed.
     */
    onShown?: (e: {
      component?: dxDeferRendering;
      element?: DevExpress.core.DxElement;
      model?: any;
    }) => void;
    /**
     * Specifies when the UI component content is rendered.
     */
    renderWhen?: PromiseLike<void> | boolean;
    /**
     * Indicates if a load indicator should be shown until the UI component&apos;s content is rendered.
     */
    showLoadIndicator?: boolean;
    /**
     * Specifies a jQuery selector of items that should be rendered using a staggered animation.
     */
    staggerItemSelector?: string;
  }
  /**
   * The Diagram UI component provides a visual interface to help you design new and modify existing diagrams.
   */
  export class dxDiagram extends Widget<dxDiagramOptions> {
    /**
     * Gets the DataSource instance.
     */
    getNodeDataSource(): DevExpress.data.DataSource;
    /**
     * Returns the DataSource instance.
     */
    getEdgeDataSource(): DevExpress.data.DataSource;
    /**
     * Returns a shape or connector object specified by its key.
     */
    getItemByKey(key: Object): DevExpress.ui.dxDiagram.Item;
    /**
     * Returns a shape or connector object specified by its internal identifier.
     */
    getItemById(id: string): DevExpress.ui.dxDiagram.Item;
    /**
     * Returns an array of diagram items.
     */
    getItems(): Array<DevExpress.ui.dxDiagram.Item>;
    /**
     * Returns an array of selected diagram items.
     */
    getSelectedItems(): Array<DevExpress.ui.dxDiagram.Item>;
    /**
     * Selects the specified items.
     */
    setSelectedItems(items: Array<DevExpress.ui.dxDiagram.Item>): void;
    /**
     * Scrolls the view area to the specified item.
     */
    scrollToItem(item: DevExpress.ui.dxDiagram.Item): void;
    /**
     * Exports the diagram data to a JSON object.
     */
    export(): string;
    /**
     * Exports the diagram to an image format.
     */
    exportTo(
      format: DevExpress.ui.dxDiagram.DiagramExportFormat,
      callback: Function
    ): void;
    /**
     * Imports the diagram data.
     */
    import(data: string, updateExistingItemsOnly?: boolean): void;
    /**
     * Updates the diagram toolboxes.
     */
    updateToolbox(): void;
    /**
     * Fits the diagram content into the work area. The maximum scale is 100%.
     */
    fitToContent(): void;
    /**
     * Fits the diagram content&apos;s width into the work area width. The maximum scale is 100%.
     */
    fitToWidth(): void;
  }
  module dxDiagram {
    export type ContentReadyEvent = DevExpress.events.EventInfo<dxDiagram>;
    export type CustomCommandEvent = {
      readonly component: dxDiagram;
      readonly element: DevExpress.core.DxElement;
      readonly name: string;
    };
    export type CustomShapeTemplateData = {
      readonly item: dxDiagramShape;
    };
    export type CustomShapeToolboxTemplateData = {
      readonly item: dxDiagramShape;
    };
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export type DiagramAutoZoomMode = 'fitContent' | 'fitWidth' | 'disabled';
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export type DiagramCommand =
      | 'separator'
      | 'exportSvg'
      | 'exportPng'
      | 'exportJpg'
      | 'undo'
      | 'redo'
      | 'cut'
      | 'copy'
      | 'paste'
      | 'selectAll'
      | 'delete'
      | 'fontName'
      | 'fontSize'
      | 'bold'
      | 'italic'
      | 'underline'
      | 'fontColor'
      | 'lineStyle'
      | 'lineWidth'
      | 'lineColor'
      | 'fillColor'
      | 'textAlignLeft'
      | 'textAlignCenter'
      | 'textAlignRight'
      | 'lock'
      | 'unlock'
      | 'sendToBack'
      | 'bringToFront'
      | 'insertShapeImage'
      | 'editShapeImage'
      | 'deleteShapeImage'
      | 'connectorLineType'
      | 'connectorLineStart'
      | 'connectorLineEnd'
      | 'layoutTreeTopToBottom'
      | 'layoutTreeBottomToTop'
      | 'layoutTreeLeftToRight'
      | 'layoutTreeRightToLeft'
      | 'layoutLayeredTopToBottom'
      | 'layoutLayeredBottomToTop'
      | 'layoutLayeredLeftToRight'
      | 'layoutLayeredRightToLeft'
      | 'fullScreen'
      | 'zoomLevel'
      | 'showGrid'
      | 'snapToGrid'
      | 'gridSize'
      | 'units'
      | 'pageSize'
      | 'pageOrientation'
      | 'pageColor'
      | 'simpleView'
      | 'toolbox';
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export type DiagramConnectorLineEnd =
      | 'none'
      | 'arrow'
      | 'outlinedTriangle'
      | 'filledTriangle';
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export type DiagramConnectorLineType = 'straight' | 'orthogonal';
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export type DiagramConnectorPosition = 'start' | 'end';
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export type DiagramDataLayoutType = 'auto' | 'off' | 'tree' | 'layered';
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export type DiagramExportFormat = 'svg' | 'png' | 'jpg';
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export type DiagramItemType = 'shape' | 'connector';
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export type DiagramPanelVisibility =
      | 'auto'
      | 'visible'
      | 'collapsed'
      | 'disabled';
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export type DiagramRequestEditOperationReason =
      | 'checkUIElementAvailability'
      | 'modelModification';
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export type DiagramShapeCategory =
      | 'general'
      | 'flowchart'
      | 'orgChart'
      | 'containers'
      | 'custom';
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export type DiagramShapeType =
      | 'text'
      | 'rectangle'
      | 'ellipse'
      | 'cross'
      | 'triangle'
      | 'diamond'
      | 'heart'
      | 'pentagon'
      | 'hexagon'
      | 'octagon'
      | 'star'
      | 'arrowLeft'
      | 'arrowTop'
      | 'arrowRight'
      | 'arrowBottom'
      | 'arrowNorthSouth'
      | 'arrowEastWest'
      | 'process'
      | 'decision'
      | 'terminator'
      | 'predefinedProcess'
      | 'document'
      | 'multipleDocuments'
      | 'manualInput'
      | 'preparation'
      | 'data'
      | 'database'
      | 'hardDisk'
      | 'internalStorage'
      | 'paperTape'
      | 'manualOperation'
      | 'delay'
      | 'storedData'
      | 'display'
      | 'merge'
      | 'connector'
      | 'or'
      | 'summingJunction'
      | 'verticalContainer'
      | 'horizontalContainer'
      | 'cardWithImageOnLeft'
      | 'cardWithImageOnTop'
      | 'cardWithImageOnRight';
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export type DiagramToolboxDisplayMode = 'icons' | 'texts';
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export type DiagramUnits = 'in' | 'cm' | 'px';
    export type DisposingEvent = DevExpress.events.EventInfo<dxDiagram>;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxDiagram>;
    export type ItemClickEvent = DevExpress.events.EventInfo<dxDiagram> & {
      readonly item: Item;
    };
    export type ItemDblClickEvent = DevExpress.events.EventInfo<dxDiagram> & {
      readonly item: Item;
    };
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxDiagram> &
      DevExpress.events.ChangedOptionInfo;
    export type Properties = dxDiagramOptions;
    export type RequestEditOperationEvent =
      DevExpress.events.EventInfo<dxDiagram> & {
        readonly operation:
          | 'addShape'
          | 'addShapeFromToolbox'
          | 'deleteShape'
          | 'deleteConnector'
          | 'changeConnection'
          | 'changeConnectorPoints';
        readonly args:
          | dxDiagramAddShapeArgs
          | dxDiagramAddShapeFromToolboxArgs
          | dxDiagramDeleteShapeArgs
          | dxDiagramDeleteConnectorArgs
          | dxDiagramChangeConnectionArgs
          | dxDiagramChangeConnectorPointsArgs
          | dxDiagramBeforeChangeShapeTextArgs
          | dxDiagramChangeShapeTextArgs
          | dxDiagramBeforeChangeConnectorTextArgs
          | dxDiagramChangeConnectorTextArgs
          | dxDiagramResizeShapeArgs
          | dxDiagramMoveShapeArgs;
        readonly reason: DiagramRequestEditOperationReason;
        allowed?: boolean;
      };
    export type RequestLayoutUpdateEvent =
      DevExpress.events.EventInfo<dxDiagram> & {
        readonly changes: any[];
        allowed?: boolean;
      };
    export type SelectionChangedEvent =
      DevExpress.events.EventInfo<dxDiagram> & {
        readonly items: Array<Item>;
      };
  }
  /**
   * Contains information about the processed shape.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxDiagramAddShapeArgs {
    /**
     * The processed shape.
     */
    shape?: dxDiagramShape;
    /**
     * A position where the shape is being added.
     */
    position?: {
      /**
       * A horizontal position where the shape is being added.
       */
      x?: number;
      /**
       * A vertical position where the shape is being added.
       */
      y?: number;
    };
  }
  /**
   * Contains information about the processed shape.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxDiagramAddShapeFromToolboxArgs {
    /**
     * The type of the processed shape.
     */
    shapeType?: DevExpress.ui.dxDiagram.DiagramShapeType | string;
  }
  /**
   * Contains information about the processed connector.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxDiagramBeforeChangeConnectorTextArgs {
    /**
     * The processed connector.
     */
    connector?: dxDiagramConnector;
    /**
     * The index of the processed text in the connector&apos;s texts collection.
     */
    index?: number;
  }
  /**
   * Contains information about the processed shape.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxDiagramBeforeChangeShapeTextArgs {
    /**
     * The processed shape.
     */
    shape?: dxDiagramShape;
  }
  /**
   * Contains information about the processed connection.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxDiagramChangeConnectionArgs {
    /**
     * The new connected shape.
     */
    newShape?: dxDiagramShape;
    /**
     * The previous connected shape.
     */
    oldShape?: dxDiagramShape;
    /**
     * The processed connector.
     */
    connector?: dxDiagramConnector;
    /**
     * The index of the processed point in the shape&apos;s connection point collection.
     */
    connectionPointIndex?: number;
    /**
     * The position of the connector in the processed point.
     */
    connectorPosition?: DevExpress.ui.dxDiagram.DiagramConnectorPosition;
  }
  /**
   * Contains information about the processed connector.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxDiagramChangeConnectorPointsArgs {
    /**
     * The processed connector.
     */
    connector?: dxDiagramConnector;
    /**
     * The array of new connection points.
     */
    newPoints?: Array<{
      /**
       * A horizontal position of the point.
       */
      x?: number;
      /**
       * A vertical position of the point.
       */
      y?: number;
    }>;
    /**
     * The array of previous connection points.
     */
    oldPoints?: Array<{
      /**
       * A horizontal position of the point.
       */
      x?: number;
      /**
       * A vertical position of the point.
       */
      y?: number;
    }>;
  }
  /**
   * Contains information about the processed connector.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxDiagramChangeConnectorTextArgs {
    /**
     * The processed connector.
     */
    connector?: dxDiagramConnector;
    /**
     * The index of the processed text in the connector&apos;s texts collection.
     */
    index?: number;
    /**
     * The new connector text.
     */
    text?: string;
  }
  /**
   * Contains information about the processed shape.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxDiagramChangeShapeTextArgs {
    /**
     * The processed shape.
     */
    shape?: dxDiagramShape;
    /**
     * The new shape text.
     */
    text?: string;
  }
  /**
   * An object that provides information about a connector in the Diagram UI component.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxDiagramConnector extends DevExpress.ui.dxDiagram.Item {
    /**
     * Specifies the connector&apos;s start node key.
     */
    fromKey?: any;
    /**
     * Gets the connector&apos;s start node identifier.
     */
    fromId?: string;
    /**
     * The index of a shape connection point where the connector starts.
     */
    fromPointIndex?: number;
    /**
     * Gets the connector&apos;s key points.
     */
    points?: Array<{
      /**
       * A horizontal position of the point.
       */
      x?: number;
      /**
       * A vertical position of the point.
       */
      y?: number;
    }>;

    /**
     * Specifies the connector&apos;s text.
     */
    texts?: Array<string>;
    /**
     * Specifies the connector&apos;s end node key.
     */
    toKey?: any;
    /**
     * Gets the connector&apos;s end node identifier.
     */
    toId?: string;
    /**
     * The index of the shape connection point where the connector ends.
     */
    toPointIndex?: number;
  }
  /**
   * An object that provides information about a custom command in the Diagram UI component.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxDiagramCustomCommand {
    /**
     * Specifies the custom command&apos;s identifier.
     */
    name?: string;
    /**
     * Specifies the custom command&apos;s text and tooltip text.
     */
    text?: string;
    /**
     * Specifies the custom command&apos;s icon.
     */
    icon?: string;
    /**
     * Lists command sub items.
     */
    items?: Array<dxDiagramCustomCommand>;
    /**
     * 
     */
    location?: DevExpress.common.ToolbarItemLocation;
  }
  /**
   * Contains information about the processed connector.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxDiagramDeleteConnectorArgs {
    /**
     * The processed connector.
     */
    connector?: dxDiagramConnector;
  }
  /**
   * Contains information about the processed shape.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxDiagramDeleteShapeArgs {
    /**
     * The processed shape.
     */
    shape?: dxDiagramShape;
  }
  /**
   * @deprecated Use Item instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxDiagramItem {
    /**
     * Returns the data item that is bound to the diagram item.
     */
    dataItem?: any;
    /**
     * Specifies the item&apos;s internal identifier.
     */
    id?: string;
    /**
     * Gets the item&apos;s key from a data source.
     */
    key?: Object;
    /**
     * Returns the type of the item.
     */
    itemType?: DevExpress.ui.dxDiagram.DiagramItemType;
  }
  /**
   * Contains information about the processed shape.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxDiagramMoveShapeArgs {
    /**
     * The processed shape.
     */
    shape?: dxDiagramShape;
    /**
     * The new shape position.
     */
    newPosition?: {
      /**
       * The new horizontal shape position specified in units.
       */
      x?: number;
      /**
       * The new vertical shape position specified in units.
       */
      y?: number;
    };
    /**
     * The previous shape position.
     */
    oldPosition?: {
      /**
       * The previous horizontal shape position specified in units.
       */
      x?: number;
      /**
       * The previous vertical shape position specified in units.
       */
      y?: number;
    };
  }
  /**
   * @deprecated use Properties instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxDiagramOptions extends WidgetOptions<dxDiagram> {
    /**
     * Specifies how the Diagram UI component automatically zooms the work area.
     */
    autoZoomMode?: DevExpress.ui.dxDiagram.DiagramAutoZoomMode;
    /**
     * Configures the context menu&apos;s settings.
     */
    contextMenu?: {
      /**
       * Lists commands in the context menu.
       */
      commands?: Array<DevExpress.ui.dxDiagram.DiagramCommand>;
      /**
       * Specifies whether the context menu is enabled.
       */
      enabled?: boolean;
    };
    /**
     * Configures the context toolbox&apos;s settings.
     */
    contextToolbox?: {
      /**
       * Specifies the category of shapes that are displayed in the context toolbox.
       */
      category?: DevExpress.ui.dxDiagram.DiagramShapeCategory | string;
      /**
       * Specifies how shapes are displayed in the context toolbox.
       */
      displayMode?: DevExpress.ui.dxDiagram.DiagramToolboxDisplayMode;
      /**
       * Specifies the context toolbox&apos;s availability.
       */
      enabled?: boolean;
      /**
       * Specifies the number of shape icons in a row.
       */
      shapeIconsPerRow?: number;
      /**
       * Lists the shapes that are displayed in the context toolbox. The built-in shape types are shown in the Shape Types section.
       */
      shapes?: Array<DevExpress.ui.dxDiagram.DiagramShapeType> | Array<string>;
      /**
       * Specifies the context toolbox&apos;s width in pixels.
       */
      width?: number;
    };
    /**
     * A function that is executed after a custom command item was clicked and allows you to implement the custom command&apos;s logic.
     */
    onCustomCommand?: (e: DevExpress.ui.dxDiagram.CustomCommandEvent) => void;
    /**
     * Specifies a custom template for shapes.
     */
    customShapeTemplate?:
      | DevExpress.core.template
      | ((
          container: DevExpress.core.DxElement<SVGElement>,
          data: DevExpress.ui.dxDiagram.CustomShapeTemplateData
        ) => any);
    /**
     * Specifies a custom template for shapes in the toolbox.
     */
    customShapeToolboxTemplate?:
      | DevExpress.core.template
      | ((
          container: DevExpress.core.DxElement<SVGElement>,
          data: DevExpress.ui.dxDiagram.CustomShapeToolboxTemplateData
        ) => any);
    /**
     * Provide access to an array of custom shapes.
     */
    customShapes?: Array<{
      /**
       * Specifies whether a card shape&apos;s image can be edited.
       */
      allowEditImage?: boolean;
      /**
       * Specifies whether the shape&apos;s text can be edited.
       */
      allowEditText?: boolean;
      /**
       * Specifies whether the shape can be resized.
       */
      allowResize?: boolean;
      /**
       * Specifies the shape background image&apos;s fractional height.
       */
      backgroundImageHeight?: number;
      /**
       * Specifies the shape background image&apos;s left offset.
       */
      backgroundImageLeft?: number;
      /**
       * Specifies the shape background image&apos;s top offset.
       */
      backgroundImageTop?: number;
      /**
       * Specifies the shape background image&apos;s URL.
       */
      backgroundImageUrl?: string;
      /**
       * Specifies the shape image displayed in the toolbox.
       */
      backgroundImageToolboxUrl?: string;
      /**
       * Specifies the shape background image&apos;s fractional width.
       */
      backgroundImageWidth?: number;
      /**
       * Specifies the base shape type for the custom shape. The built-in shape types are shown in the Shape Types section.
       */
      baseType?: DevExpress.ui.dxDiagram.DiagramShapeType | string;
      /**
       * Specifies a category to which the custom shape belongs.
       */
      category?: string;
      /**
       * An array of the shape&apos;s connection points.
       */
      connectionPoints?: Array<{
        /**
         * Specifies the horizontal offset.
         */
        x?: number;
        /**
         * Specifies the vertical offset.
         */
        y?: number;
      }>;
      /**
       * Specifies the initial height of the shape.
       */
      defaultHeight?: number;
      /**
       * Specifies the URL of an image displayed in a card shape.
       */
      defaultImageUrl?: string;
      /**
       * Specifies the initial text of the shape.
       */
      defaultText?: string;
      /**
       * Specifies the initial width of the shape.
       */
      defaultWidth?: number;
      /**
       * Specifies the shape image&apos;s fractional height.
       */
      imageHeight?: number;
      /**
       * Specifies the shape image&apos;s left offset.
       */
      imageLeft?: number;
      /**
       * Specifies the shape image&apos;s top offset.
       */
      imageTop?: number;
      /**
       * Specifies the shape image&apos;s fractional width.
       */
      imageWidth?: number;
      /**
       * Specifies whether the shape maintains its width-to-height ratio on auto resize.
       */
      keepRatioOnAutoSize?: boolean;
      /**
       * Specifies the maximum height of the shape.
       */
      maxHeight?: number;
      /**
       * Specifies the maximum width of the shape.
       */
      maxWidth?: number;
      /**
       * Specifies the maximum height of the shape.
       */
      minHeight?: number;
      /**
       * Specifies the minimum width of the shape.
       */
      minWidth?: number;
      /**
       * Specifies a custom template for the shape.
       */
      template?:
        | DevExpress.core.template
        | ((
            container: DevExpress.core.DxElement<SVGElement>,
            data: DevExpress.ui.dxDiagram.CustomShapeTemplateData
          ) => any);
      /**
       * Specifies the shape template&apos;s fractional height.
       */
      templateHeight?: number;
      /**
       * Specifies the shape template&apos;s left offset.
       */
      templateLeft?: number;
      /**
       * Specifies the shape template&apos;s top offset.
       */
      templateTop?: number;
      /**
       * Specifies the shape template&apos;s fractional width.
       */
      templateWidth?: number;
      /**
       * Specifies the shape text container&apos;s height.
       */
      textHeight?: number;
      /**
       * Specifies the shape text&apos;s left offset.
       */
      textLeft?: number;
      /**
       * Specifies the shape text&apos;s top offset.
       */
      textTop?: number;
      /**
       * Specifies the shape text container&apos;s width.
       */
      textWidth?: number;
      /**
       * Specifies the shape&apos;s tooltip in the toolbox panel.
       */
      title?: string;
      /**
       * Specifies a custom template for the shape in the toolbox.
       */
      toolboxTemplate?:
        | DevExpress.core.template
        | ((
            container: DevExpress.core.DxElement<SVGElement>,
            data: DevExpress.ui.dxDiagram.CustomShapeToolboxTemplateData
          ) => any);
      /**
       * Specifies the aspect ratio of the shape in the toolbox.
       */
      toolboxWidthToHeightRatio?: number;
      /**
       * Specifies the shape&apos;s type.
       */
      type?: string;
    }>;
    /**
     * Configures default item properties.
     */
    defaultItemProperties?: {
      /**
       * Specifies a default item style.
       */
      style?: Object;
      /**
       * Specifies an item&apos;s default text style.
       */
      textStyle?: Object;
      /**
       * Specifies the default type of a connector.
       */
      connectorLineType?: DevExpress.ui.dxDiagram.DiagramConnectorLineType;
      /**
       * Specifies the default tip of a connector&apos;s start point.
       */
      connectorLineStart?: DevExpress.ui.dxDiagram.DiagramConnectorLineEnd;
      /**
       * Specifies the default tip of a connector&apos;s end point.
       */
      connectorLineEnd?: DevExpress.ui.dxDiagram.DiagramConnectorLineEnd;
      /**
       * Specifies the default minimum width of a shape.
       */
      shapeMinWidth?: number;
      /**
       * Specifies the default maximum width of a shape.
       */
      shapeMaxWidth?: number;
      /**
       * Specifies the default minimum height of a shape.
       */
      shapeMinHeight?: number;
      /**
       * Specifies the default maximum height of a shape.
       */
      shapeMaxHeight?: number;
    };
    /**
     * Specifies which editing operations a user can perform.
     */
    editing?: {
      /**
       * Specifies whether a user can add a shape.
       */
      allowAddShape?: boolean;
      /**
       * Specifies whether a user can delete a shape.
       */
      allowDeleteShape?: boolean;
      /**
       * Specifies whether a user can delete a connector.
       */
      allowDeleteConnector?: boolean;
      /**
       * Specifies whether a user can change a connection.
       */
      allowChangeConnection?: boolean;
      /**
       * Specifies whether a user can change connector points.
       */
      allowChangeConnectorPoints?: boolean;
      /**
       * Specifies whether a user can change a connector&apos;s text.
       */
      allowChangeConnectorText?: boolean;
      /**
       * Specifies whether a user can change a shape&apos;s text.
       */
      allowChangeShapeText?: boolean;
      /**
       * Specifies whether a user can resize a shape.
       */
      allowResizeShape?: boolean;
      /**
       * Specifies whether a user can move a shape.
       */
      allowMoveShape?: boolean;
    };
    /**
     * Allows you to bind the collection of diagram edges to a data source. For more information, see the Data Binding section.
     */
    edges?: {
      /**
       * Specifies the name of a data source field or an expression that returns an edge&apos;s custom data.
       */
      customDataExpr?: string | ((data: any, value?: any) => any);
      /**
       * Binds the edges collection to the specified data. Specify this property if you use node and edge data sources.
       */
      dataSource?: DevExpress.data.DataSource.DataSourceLike<any> | null;
      /**
       * Specifies the name of a data source field or an expression that returns an edge&apos;s start node key.
       */
      fromExpr?: string | ((data: any, value?: any) => any);
      /**
       * Specifies the name of a data source field or an expression that returns an edge&apos;s line start tip.
       */
      fromLineEndExpr?: string | ((data: any, value?: any) => any);
      /**
       * Specifies the name of a data source field or an expression that returns an index of a shape connection point where an edge starts.
       */
      fromPointIndexExpr?: string | ((data: any, value?: any) => any);
      /**
       * Specifies the name of a data source field or an expression that returns an edge&apos;s key.
       */
      keyExpr?: string | ((data: any, value?: any) => any);
      /**
       * Specifies the name of a data source field or an expression that returns an edge&apos;s line type.
       */
      lineTypeExpr?: string | ((data: any, value?: any) => any);
      /**
       * Specifies the name of a data source field or an expression whose values indicate whether an edge is locked.
       */
      lockedExpr?: string | ((data: any, value?: any) => any);
      /**
       * Specifies the name of a data source field or an expression that returns an edge&apos;s key points.
       */
      pointsExpr?: string | ((data: any, value?: any) => any);
      /**
       * Specifies the name of a data source field or an expression that returns an edge style.
       */
      styleExpr?: string | ((data: any, value?: any) => any);
      /**
       * Specifies the name of a data source field or an expression that returns edge text.
       */
      textExpr?: string | ((data: any, value?: any) => any);
      /**
       * Specifies the name of a data source field or an expression that returns an edge&apos;s text style.
       */
      textStyleExpr?: string | ((data: any, value?: any) => any);
      /**
       * Specifies the name of a data source field or an expression that returns an edge&apos;s end node key.
       */
      toExpr?: string | ((data: any, value?: any) => any);
      /**
       * Specifies the name of a data source field or an expression that returns an edge&apos;s line end tip.
       */
      toLineEndExpr?: string | ((data: any, value?: any) => any);
      /**
       * Specifies the name of a data source field or an expression that returns an index of a shape connection point where an edge ends.
       */
      toPointIndexExpr?: string | ((data: any, value?: any) => any);
      /**
       * Specifies the name of a data source field or an expression that returns an edge&apos;s z-index.
       */
      zIndexExpr?: string | ((data: any, value?: any) => any);
    };
    /**
     * Configures export settings.
     */
    export?: {
      /**
       * Specifies the name of the file to which the diagram is exported.
       */
      fileName?: string;
      /**
       * Specifies the URL of the server-side proxy that streams the resulting file and enables export in Safari.
       * @deprecated Since v10, Safari browser supports API for saving files, and this property is no longer required.
       */
      proxyUrl?: string;
    };
    /**
     * Specifies whether or not to display the UI component in full-screen mode.
     */
    fullScreen?: boolean;
    /**
     * Specifies the grid pitch.
     */
    gridSize?:
      | number
      | {
          /**
           * An array that specifies the _Grid Size_ combobox items on &apos;Properties&apos; panel.
           */
          items?: Array<number>;
          /**
           * Specifies the grid&apos;s pitch.
           */
          value?: number;
        };
    /**
     * Allows you to bind the collection of diagram nodes to a data source. For more information, see the Data Binding section.
     */
    nodes?: {
      /**
       * Specifies an auto-layout algorithm that the UI component uses to build a diagram.
       */
      autoLayout?:
        | DevExpress.ui.dxDiagram.DiagramDataLayoutType
        | {
            /**
             * Specifies the diagram layout orientation.
             */
            orientation?: DevExpress.common.Orientation;
            /**
             * Specifies an auto-layout algorithm that is used to automatically arrange shapes.
             */
            type?: DevExpress.ui.dxDiagram.DiagramDataLayoutType;
          };
      /**
       * Specifies whether or not a shape size is automatically changed to fit the text when the UI component is bound to a data source.
       */
      autoSizeEnabled?: boolean;
      /**
       * Specifies the name of a data source field or an expression that returns a key of a node&apos;s parent container node.
       */
      containerKeyExpr?: string | ((data: any, value?: any) => any);
      /**
       * Specifies the name of a data source field or an expression that returns a container&apos;s nested items.
       */
      containerChildrenExpr?: string | ((data: any, value?: any) => any);
      /**
       * Specifies the name of a data source field or an expression that returns a node&apos;s custom data.
       */
      customDataExpr?: string | ((data: any, value?: any) => any);
      /**
       * Binds the nodes collection to the specified data. For more information, see the Data Binding section.
       */
      dataSource?: DevExpress.data.DataSource.DataSourceLike<any> | null;
      /**
       * Specifies the name of a data source field or an expression that returns a node&apos;s height.
       */
      heightExpr?: string | ((data: any, value?: any) => any);
      /**
       * Specifies the name of a data source field or an expression that returns an image URL or Base64 encoded image for a node.
       */
      imageUrlExpr?: string | ((data: any, value?: any) => any);
      /**
       * Specifies the name of a data source field or an expression that returns a node&apos;s child items.
       */
      itemsExpr?: string | ((data: any, value?: any) => any);
      /**
       * Specifies the name of a data source field or an expression that returns node keys.
       */
      keyExpr?: string | ((data: any, value?: any) => any);
      /**
       * Specifies the name of a data source field or an expression that returns the x-coordinate of a node&apos;s left border.
       */
      leftExpr?: string | ((data: any, value?: any) => any);
      /**
       * Specifies the name of a data source field or an expression whose values indicate whether a node is locked.
       */
      lockedExpr?: string | ((data: any, value?: any) => any);
      /**
       * Specifies the name of a data source field or an expression that returns a parent node key for a node.
       */
      parentKeyExpr?: string | ((data: any, value?: any) => any);
      /**
       * Specifies the name of a data source field or an expression that returns a node style.
       */
      styleExpr?: string | ((data: any, value?: any) => any);
      /**
       * Specifies the name of a data source field or an expression that returns node texts.
       */
      textExpr?: string | ((data: any, value?: any) => any);
      /**
       * Specifies the name of a data source field or an expression that returns a node&apos;s text style.
       */
      textStyleExpr?: string | ((data: any, value?: any) => any);
      /**
       * Specifies the name of a data source field or an expression that returns the y-coordinate of a node&apos;s top border.
       */
      topExpr?: string | ((data: any, value?: any) => any);
      /**
       * Specifies the name of a data source field or an expression that returns the shape type for a node.
       */
      typeExpr?: string | ((data: any, value?: any) => any);
      /**
       * Specifies the name of a data source field or an expression that returns a node&apos;s width.
       */
      widthExpr?: string | ((data: any, value?: any) => any);
      /**
       * Specifies the name of a data source field or an expression that returns a node&apos;s z-index.
       */
      zIndexExpr?: string | ((data: any, value?: any) => any);
    };
    /**
     * Indicates whether diagram content has been changed.
     */
    hasChanges?: boolean;
    /**
     * A function that is executed after a shape or connector is clicked.
     */
    onItemClick?: (e: DevExpress.ui.dxDiagram.ItemClickEvent) => void;
    /**
     * A function that is executed after a shape or connector is double-clicked.
     */
    onItemDblClick?: (e: DevExpress.ui.dxDiagram.ItemDblClickEvent) => void;
    /**
     * A function that is executed after the selection is changed in the Diagram.
     */
    onSelectionChanged?: (
      e: DevExpress.ui.dxDiagram.SelectionChangedEvent
    ) => void;
    /**
     * A function that allows you to prohibit an edit operation at run time.
     */
    onRequestEditOperation?: (
      e: DevExpress.ui.dxDiagram.RequestEditOperationEvent
    ) => void;
    /**
     * A function that is executed after diagram data is reloaded and allows you to specify whether or not the UI component should update the diagram layout.
     */
    onRequestLayoutUpdate?: (
      e: DevExpress.ui.dxDiagram.RequestLayoutUpdateEvent
    ) => void;
    /**
     * Specifies the color of a diagram page.
     */
    pageColor?: string;
    /**
     * Specifies the page orientation.
     */
    pageOrientation?: DevExpress.common.PageOrientation;
    /**
     * Specifies a size of pages.
     */
    pageSize?: {
      /**
       * Specifies the page height.
       */
      height?: number;
      /**
       * An array that specifies the page size items in the _Page Size_ combobox on _Properties Panel_.
       */
      items?: Array<{
        /**
         * Specifies the page height.
         */
        height?: number;
        /**
         * Specifies the display text.
         */
        text?: string;
        /**
         * Specifies the page width.
         */
        width?: number;
      }>;
      /**
       * Specifies the page width.
       */
      width?: number;
    };
    /**
     * Configures the Properties panel settings.
     */
    propertiesPanel?: {
      /**
       * Contains an array of tabs in the Properties panel.
       */
      tabs?: Array<{
        /**
         * Lists commands in a tab.
         */
        commands?: Array<DevExpress.ui.dxDiagram.DiagramCommand>;
        /**
         * Contains an array of command groups in the tab.
         */
        groups?: Array<{
          /**
           * Lists commands in a group.
           */
          commands?: Array<DevExpress.ui.dxDiagram.DiagramCommand>;
          /**
           * Specifies a title of the group.
           */
          title?: string;
        }>;
        /**
         * Specifies the tab&apos;s title.
         */
        title?: string;
      }>;
      /**
       * Specifies the panel&apos;s visibility.
       */
      visibility?: DevExpress.ui.dxDiagram.DiagramPanelVisibility;
    };
    /**
     * Specifies whether the diagram is read-only.
     */
    readOnly?: boolean;
    /**
     * Specifies whether grid lines are visible.
     */
    showGrid?: boolean;
    /**
     * Switch the Diagram UI component to simple view mode.
     */
    simpleView?: boolean;
    /**
     * Specifies whether or not the UI component uses native scrolling.
     */
    useNativeScrolling?: boolean;
    /**
     * Specifies whether diagram elements should snap to grid lines.
     */
    snapToGrid?: boolean;
    /**
     * Configures the main toolbar settings.
     */
    mainToolbar?: {
      /**
       * Lists commands in the toolbar.
       */
      commands?: Array<DevExpress.ui.dxDiagram.DiagramCommand>;
      /**
       * Specifies the toolbar&apos;s visibility.
       */
      visible?: boolean;
    };
    /**
     * Configures the history toolbar&apos;s settings.
     */
    historyToolbar?: {
      /**
       * Lists commands in the history toolbar.
       */
      commands?: Array<DevExpress.ui.dxDiagram.DiagramCommand>;
      /**
       * Specifies the history toolbar&apos;s visibility.
       */
      visible?: boolean;
    };
    /**
     * Configures the view toolbar settings.
     */
    viewToolbar?: {
      /**
       * Lists commands in the toolbar.
       */
      commands?: Array<DevExpress.ui.dxDiagram.DiagramCommand>;
      /**
       * Specifies the view toolbar&apos;s visibility.
       */
      visible?: boolean;
    };
    /**
     * Configures the toolbox settings.
     */
    toolbox?: {
      /**
       * Lists toolbox groups.
       */
      groups?:
        | Array<{
            /**
             * Specifies the category of shapes that are displayed in the group.
             */
            category?: DevExpress.ui.dxDiagram.DiagramShapeCategory | string;
            /**
             * Specifies how shapes are displayed in the toolbox.
             */
            displayMode?: DevExpress.ui.dxDiagram.DiagramToolboxDisplayMode;
            /**
             * Specifies whether the group is expanded.
             */
            expanded?: boolean;
            /**
             * Lists the shapes in the group. The built-in shape types are shown in the Shape Types section.
             */
            shapes?:
              | Array<DevExpress.ui.dxDiagram.DiagramShapeType>
              | Array<string>;
            /**
             * Specifies the group title in the toolbox.
             */
            title?: string;
          }>
        | Array<DevExpress.ui.dxDiagram.DiagramShapeCategory>;
      /**
       * Specifies the number of shape icons in a row.
       */
      shapeIconsPerRow?: number;
      /**
       * Specifies whether the search box is visible.
       */
      showSearch?: boolean;
      /**
       * Specifies the toolbar&apos;s visibility.
       */
      visibility?: DevExpress.ui.dxDiagram.DiagramPanelVisibility;
      /**
       * Specifies the toolbox&apos;s width in pixels.
       */
      width?: number;
    };
    /**
     * Specifies the measurement unit for size properties.
     */
    units?: DevExpress.ui.dxDiagram.DiagramUnits;
    /**
     * Specifies the measurement unit that is displayed in user interface elements.
     */
    viewUnits?: DevExpress.ui.dxDiagram.DiagramUnits;
    /**
     * Specifies the zoom level.
     */
    zoomLevel?:
      | number
      | {
          /**
           * An array that specifies the zoom level items in the _Zoom Level_ combobox on &apos;Properties&apos; panel.
           */
          items?: Array<number>;
          /**
           * Specifies the zoom level.
           */
          value?: number;
        };
  }
  /**
   * Contains information about the processed shape.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxDiagramResizeShapeArgs {
    /**
     * The processed shape.
     */
    shape?: dxDiagramShape;
    /**
     * The new shape size.
     */
    newSize?: {
      /**
       * The new shape height.
       */
      height?: number;
      /**
       * The new shape width.
       */
      width?: number;
    };
    /**
     * The previous shape size.
     */
    oldSize?: {
      /**
       * The previous shape height.
       */
      height?: number;
      /**
       * The previous shape width.
       */
      width?: number;
    };
  }
  /**
   * An object that provides information about a shape in the Diagram UI component.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxDiagramShape extends DevExpress.ui.dxDiagram.Item {
    /**
     * Specifies the shape&apos;s text.
     */
    text?: string;
    /**
     * Specifies the shape type. The built-in shape types are shown in the Shape Types section.
     */
    type?: DevExpress.ui.dxDiagram.DiagramShapeType | string;
    /**
     * Specifies the position of the top left shape corner relative to the top left corner of the diagram work area.
     */
    position?: {
      /**
       * The horizontal shape position specified in units.
       */
      x?: number;
      /**
       * The vertical shape position specified in units.
       */
      y?: number;
    };

    /**
     * Specifies the shape size.
     */
    size?: {
      /**
       * The shape height specified in units.
       */
      height?: number;
      /**
       * The shape width specified in units.
       */
      width?: number;
    };
    /**
     * Gets an array of attached connector identifiers.
     */
    attachedConnectorIds?: Array<String>;
    /**
     * Gets the identifier of the container that stores the shape.
     */
    containerId?: string;
    /**
     * Gets identifiers of shapes stored in the container.
     */
    containerChildItemIds?: Array<String>;
    /**
     * Gets whether the container is expanded.
     */
    containerExpanded?: boolean;
  }
  /**
   * Draggable is a user interface utility that allows UI component elements to be dragged and dropped.
   */
  export class dxDraggable
    extends DOMComponent<dxDraggableOptions>
    implements DraggableBase {}
  module dxDraggable {
    export type DisposingEvent = DevExpress.events.EventInfo<dxDraggable>;
    export type DragEndEvent = DevExpress.events.Cancelable &
      DevExpress.events.NativeEventInfo<
        dxDraggable,
        PointerEvent | MouseEvent | TouchEvent
      > & {
        readonly itemData?: any;
        readonly itemElement?: DevExpress.core.DxElement;
        readonly fromComponent: dxSortable | dxDraggable;
        readonly toComponent: dxSortable | dxDraggable;
        readonly fromData?: any;
        readonly toData?: any;
      };
    export type DragMoveEvent = DevExpress.events.Cancelable &
      DevExpress.events.NativeEventInfo<
        dxDraggable,
        PointerEvent | MouseEvent | TouchEvent
      > & {
        readonly itemData?: any;
        readonly itemElement?: DevExpress.core.DxElement;
        readonly fromComponent: dxSortable | dxDraggable;
        readonly toComponent: dxSortable | dxDraggable;
        readonly fromData?: any;
        readonly toData?: any;
      };
    export type DragStartEvent = DevExpress.events.Cancelable &
      DevExpress.events.NativeEventInfo<
        dxDraggable,
        PointerEvent | MouseEvent | TouchEvent
      > & {
        itemData?: any;
        readonly itemElement?: DevExpress.core.DxElement;
        readonly fromData?: any;
      };
    export type DragTemplateData = {
      readonly itemData?: any;
      readonly itemElement: DevExpress.core.DxElement;
    };
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxDraggable>;
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxDraggable> &
      DevExpress.events.ChangedOptionInfo;
    export type Properties = dxDraggableOptions;
  }
  /**
   * @deprecated use Properties instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxDraggableOptions
    extends DraggableBaseOptions<dxDraggable> {
    /**
     * Allows a user to drag clones of items instead of actual items.
     */
    clone?: boolean;
    /**
     * Specifies custom markup to be shown instead of the item being dragged.
     */
    dragTemplate?:
      | DevExpress.core.template
      | ((
          dragInfo: DevExpress.ui.dxDraggable.DragTemplateData,
          containerElement: DevExpress.core.DxElement
        ) => string | DevExpress.core.UserDefinedElement);
    /**
     * A function that is called when drag gesture is finished.
     */
    onDragEnd?: (e: DevExpress.ui.dxDraggable.DragEndEvent) => void;
    /**
     * A function that is called every time a draggable item is moved.
     */
    onDragMove?: (e: DevExpress.ui.dxDraggable.DragMoveEvent) => void;
    /**
     * A function that is called when the drag gesture is initialized.
     */
    onDragStart?: (e: DevExpress.ui.dxDraggable.DragStartEvent) => void;
  }
  /**
   * The Drawer is a dismissible or permanently visible panel used for navigation in responsive web application layouts.
   */
  export class dxDrawer extends Widget<dxDrawerOptions> {
    /**
     * Gets the drawer&apos;s content.
     */
    content(): DevExpress.core.DxElement;
    /**
     * Closes the drawer.
     */
    hide(): DevExpress.core.utils.DxPromise<void>;
    /**
     * Opens the drawer.
     */
    show(): DevExpress.core.utils.DxPromise<void>;
    /**
     * Opens or closes the drawer, reversing the current state.
     */
    toggle(): DevExpress.core.utils.DxPromise<void>;
  }
  module dxDrawer {
    export type DisposingEvent = DevExpress.events.EventInfo<dxDrawer>;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxDrawer>;
    export type OpenedStateMode = 'overlap' | 'shrink' | 'push';
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxDrawer> &
      DevExpress.events.ChangedOptionInfo;
    export type PanelLocation =
      | 'left'
      | 'right'
      | 'top'
      | 'bottom'
      | 'before'
      | 'after';
    export type Properties = dxDrawerOptions;
    export type RevealMode = 'slide' | 'expand';
  }
  /**
   * @deprecated use Properties instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxDrawerOptions extends WidgetOptions<dxDrawer> {
    /**
     * Specifies the duration of the drawer&apos;s opening and closing animation (in milliseconds). Applies only if animationEnabled is true.
     */
    animationDuration?: number;
    /**
     * Specifies whether to use an opening and closing animation.
     */
    animationEnabled?: boolean;
    /**
     * Specifies whether to close the drawer if a user clicks or taps the view area.
     */
    closeOnOutsideClick?:
      | boolean
      | ((
          event: DevExpress.events.DxEvent<
            MouseEvent | PointerEvent | TouchEvent
          >
        ) => boolean);
    /**
     * Specifies the drawer&apos;s width or height (depending on the drawer&apos;s position) in the opened state.
     */
    maxSize?: number;
    /**
     * Specifies the drawer&apos;s width or height (depending on the drawer&apos;s position) in the closed state.
     */
    minSize?: number;
    /**
     * Specifies whether the drawer is opened.
     */
    opened?: boolean;
    /**
     * Specifies how the drawer interacts with the view in the opened state.
     */
    openedStateMode?: DevExpress.ui.dxDrawer.OpenedStateMode;
    /**
     * Specifies the drawer&apos;s position in relation to the view.
     */
    position?: DevExpress.ui.dxDrawer.PanelLocation;
    /**
     * Specifies the drawer&apos;s reveal mode.
     */
    revealMode?: DevExpress.ui.dxDrawer.RevealMode;
    /**
     * Specifies whether to shade the view when the drawer is opened.
     */
    shading?: boolean;
    /**
     * Specifies a CSS selector for the element in which the drawer should be rendered. Applies only when the openedStateMode is &apos;overlap&apos;.
     * @deprecated 
     */
    target?: string | DevExpress.core.UserDefinedElement;
    /**
     * Specifies the drawer&apos;s content.
     */
    template?:
      | DevExpress.core.template
      | ((Element: DevExpress.core.DxElement) => any);
  }
  /**
   * The DropDownBox UI component consists of a text field, which displays the current value, and a drop-down field, which can contain any UI element.
   */
  export class dxDropDownBox extends dxDropDownEditor<dxDropDownBoxOptions> {
    getDataSource(): DevExpress.data.DataSource;
  }
  module dxDropDownBox {
    export type ChangeEvent = DevExpress.events.NativeEventInfo<
      dxDropDownBox,
      Event
    >;
    export type ClosedEvent = DevExpress.events.EventInfo<dxDropDownBox>;
    export type ContentTemplateData = {
      component: dxDropDownBox;
      readonly value?: any;
    };
    export type CopyEvent = DevExpress.events.NativeEventInfo<
      dxDropDownBox,
      ClipboardEvent
    >;
    export type CutEvent = DevExpress.events.NativeEventInfo<
      dxDropDownBox,
      ClipboardEvent
    >;
    export type DisposingEvent = DevExpress.events.EventInfo<dxDropDownBox>;
    export type DropDownButtonTemplateData =
      DevExpress.ui.dxDropDownEditor.DropDownButtonTemplateDataModel;
    export type EnterKeyEvent = DevExpress.events.NativeEventInfo<
      dxDropDownBox,
      KeyboardEvent
    >;
    export type FocusInEvent = DevExpress.events.NativeEventInfo<
      dxDropDownBox,
      FocusEvent
    >;
    export type FocusOutEvent = DevExpress.events.NativeEventInfo<
      dxDropDownBox,
      FocusEvent
    >;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxDropDownBox>;
    export type InputEvent = DevExpress.events.NativeEventInfo<
      dxDropDownBox,
      UIEvent & { target: HTMLInputElement }
    >;
    export type KeyDownEvent = DevExpress.events.NativeEventInfo<
      dxDropDownBox,
      KeyboardEvent
    >;
    export type KeyPressEvent = DevExpress.events.NativeEventInfo<
      dxDropDownBox,
      KeyboardEvent
    >;
    export type KeyUpEvent = DevExpress.events.NativeEventInfo<
      dxDropDownBox,
      KeyboardEvent
    >;
    export type OpenedEvent = DevExpress.events.EventInfo<dxDropDownBox>;
    export type OptionChangedEvent =
      DevExpress.events.EventInfo<dxDropDownBox> &
        DevExpress.events.ChangedOptionInfo;
    export type PasteEvent = DevExpress.events.NativeEventInfo<
      dxDropDownBox,
      ClipboardEvent
    >;
    export type Properties = dxDropDownBoxOptions;
    export type ValueChangedEvent = DevExpress.events.NativeEventInfo<
      dxDropDownBox,
      KeyboardEvent | MouseEvent | PointerEvent | Event
    > &
      DevExpress.ui.Editor.ValueChangedInfo;
  }
  /**
   * @deprecated use Properties instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxDropDownBoxOptions
    extends DataExpressionMixinOptions<dxDropDownBox>,
      dxDropDownEditorOptions<dxDropDownBox> {
    /**
     * Specifies whether the UI component allows a user to enter a custom value.
     */
    acceptCustomValue?: boolean;
    /**
     * Specifies a custom template for the drop-down content.
     */
    contentTemplate?:
      | DevExpress.core.template
      | ((
          templateData: DevExpress.ui.dxDropDownBox.ContentTemplateData,
          contentElement: DevExpress.core.DxElement
        ) => string | DevExpress.core.UserDefinedElement);
    /**
     * Binds the UI component to data.
     */
    dataSource?: DevExpress.data.DataSource.DataSourceLike<any> | null;
    /**
     * Customizes text before it is displayed in the input field.
     */
    displayValueFormatter?: (value: string | Array<any>) => string;
    /**
     * Specifies a custom template for the text field. Must contain the TextBox UI component.
     */
    fieldTemplate?:
      | DevExpress.core.template
      | ((
          value: any,
          fieldElement: DevExpress.core.DxElement
        ) => string | DevExpress.core.UserDefinedElement);
    /**
     * An array of items used to synchronize the DropDownBox with an embedded UI component.
     */
    items?: Array<any>;
    /**
     * Specifies whether a user can open the drop-down list by clicking a text field.
     */
    openOnFieldClick?: boolean;
    /**
     * Specifies the DOM events after which the UI component&apos;s value should be updated.
     */
    valueChangeEvent?: string;

    /**
     * Configures the drop-down field which holds the content.
     */
    dropDownOptions?: DevExpress.ui.dxPopup.Properties;
  }
  /**
   * The DropDownButton is a button that opens a drop-down menu.
   */
  export class dxDropDownButton extends Widget<dxDropDownButtonOptions> {
    /**
     * Closes the drop-down menu.
     */
    close(): DevExpress.core.utils.DxPromise<void>;
    getDataSource(): DevExpress.data.DataSource;
    /**
     * Opens the drop-down menu.
     */
    open(): DevExpress.core.utils.DxPromise<void>;
    /**
     * Opens or closes the drop-down menu, reversing the current state.
     */
    toggle(): DevExpress.core.utils.DxPromise<void>;
    /**
     * Opens or closes the drop-down menu, depending on the argument.
     */
    toggle(visibility: boolean): DevExpress.core.utils.DxPromise<void>;
  }
  module dxDropDownButton {
    export type ButtonClickEvent = DevExpress.events.NativeEventInfo<
      dxDropDownButton,
      KeyboardEvent | MouseEvent | PointerEvent
    > & {
      readonly selectedItem?: any;
    };
    export type ContentReadyEvent =
      DevExpress.events.EventInfo<dxDropDownButton>;
    export type DisposingEvent = DevExpress.events.EventInfo<dxDropDownButton>;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxDropDownButton>;
    export type ItemClickEvent = DevExpress.events.NativeEventInfo<
      dxDropDownButton,
      KeyboardEvent | MouseEvent | PointerEvent
    > & {
      readonly itemData?: any;
      readonly itemElement: DevExpress.core.DxElement;
    };
    export type OptionChangedEvent =
      DevExpress.events.EventInfo<dxDropDownButton> &
        DevExpress.events.ChangedOptionInfo;
    export type Properties = dxDropDownButtonOptions;
    export type SelectionChangedEvent =
      DevExpress.events.EventInfo<dxDropDownButton> & {
        readonly item: any;
        readonly previousItem: any;
      };
  }
  /**
   * @deprecated Use Item instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxDropDownButtonItem extends DevExpress.ui.dxList.Item {
    /**
     * A handler for the click event raised for a certain item in the drop-down field.
     */
    onClick?:
      | ((e: DevExpress.ui.dxDropDownButton.ItemClickEvent) => void)
      | string;
  }
  /**
   * @deprecated use Properties instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxDropDownButtonOptions
    extends WidgetOptions<dxDropDownButton> {
    /**
     * Provides data for the drop-down menu.
     */
    dataSource?: DevExpress.data.DataSource.DataSourceLike<
      DevExpress.ui.dxDropDownButton.Item | any
    > | null;
    /**
     * Specifies whether to wait until the drop-down menu is opened the first time to render its content.
     */
    deferRendering?: boolean;
    /**
     * Specifies the data field whose values should be displayed in the drop-down menu.
     */
    displayExpr?: string | ((itemData: any) => string);
    /**
     * Specifies custom content for the drop-down field.
     */
    dropDownContentTemplate?:
      | DevExpress.core.template
      | ((
          data: Array<string | number | any> | DevExpress.data.DataSource,
          contentElement: DevExpress.core.DxElement
        ) => string | DevExpress.core.UserDefinedElement);
    /**
     * Configures the drop-down field.
     */
    dropDownOptions?: DevExpress.ui.dxPopup.Properties;
    /**
     * Specifies whether users can use keyboard to focus the UI component.
     */
    focusStateEnabled?: boolean;
    /**
     * Specifies whether the UI component changes its state when a user hovers the mouse pointer over it.
     */
    hoverStateEnabled?: boolean;
    /**
     * Specifies the button&apos;s icon.
     */
    icon?: string;
    /**
     * Specifies a custom template for drop-down menu items.
     */
    itemTemplate?:
      | DevExpress.core.template
      | ((
          itemData: any,
          itemIndex: number,
          itemElement: DevExpress.core.DxElement
        ) => string | DevExpress.core.UserDefinedElement);
    /**
     * Provides drop-down menu items.
     */
    items?: Array<DevExpress.ui.dxDropDownButton.Item | any>;
    /**
     * Specifies which data field provides keys used to distinguish between the selected drop-down menu items.
     */
    keyExpr?: string;
    /**
     * Specifies the text or HTML markup displayed in the drop-down menu when it does not contain any items.
     */
    noDataText?: string;
    /**
     * A function that is executed when the button is clicked or tapped. If splitButton is true, this function is executed for the action button only.
     */
    onButtonClick?:
      | ((e: DevExpress.ui.dxDropDownButton.ButtonClickEvent) => void)
      | string;
    /**
     * A function that is executed when a drop-down menu item is clicked.
     */
    onItemClick?:
      | ((e: DevExpress.ui.dxDropDownButton.ItemClickEvent) => void)
      | string;
    /**
     * A function that is executed when an item is selected or selection is canceled. In effect when useSelectMode is true.
     */
    onSelectionChanged?:
      | ((e: DevExpress.ui.dxDropDownButton.SelectionChangedEvent) => void)
      | string;
    /**
     * Specifies whether the drop-down menu is opened.
     */
    opened?: boolean;
    /**
     * Contains the selected item&apos;s data. Available when useSelectMode is true.
     */
    selectedItem?: string | number | any;
    /**
     * Contains the selected item&apos;s key and allows you to specify the initially selected item. Applies when useSelectMode is true.
     */
    selectedItemKey?: string | number;
    /**
     * Specifies whether the arrow icon should be displayed.
     */
    showArrowIcon?: boolean;
    /**
     * Specifies whether to split the button in two: one executes an action, the other opens and closes the drop-down menu.
     */
    splitButton?: boolean;
    /**
     * Specifies how the button is styled.
     */
    stylingMode?: DevExpress.common.ButtonStyle;
    /**
     * Specifies the button&apos;s text. Applies only if useSelectMode is false.
     */
    text?: string;
    /**
     * Specifies whether the UI component stores the selected drop-down menu item.
     */
    useSelectMode?: boolean;
    /**
     * Specifies whether text that exceeds the drop-down list width should be wrapped.
     */
    wrapItemText?: boolean;
    /**
     * Specifies whether the widget uses item&apos;s text a title attribute.
     */
    useItemTextAsTitle?: boolean;
  }
  /**
   * A drop-down editor UI component.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export class dxDropDownEditor<TProperties> extends dxTextBox<TProperties> {
    /**
     * Closes the drop-down editor.
     */
    close(): void;
    /**
     * Gets the popup window&apos;s content.
     */
    content(): DevExpress.core.DxElement;
    /**
     * Gets the UI component&apos;s `` element.
     */
    field(): DevExpress.core.DxElement;
    /**
     * Opens the drop-down editor.
     */
    open(): void;
  }
  module dxDropDownEditor {
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export interface DropDownButtonTemplateDataModel {
      readonly text?: string;
      readonly icon?: string;
    }
    export type DropDownPredefinedButton = 'clear' | 'dropDown';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxDropDownEditorOptions<TComponent>
    extends dxTextBoxOptions<TComponent> {
    /**
     * Specifies whether or not the UI component allows an end-user to enter a custom value.
     */
    acceptCustomValue?: boolean;
    /**
     * Specifies whether or not the UI component changes its state when interacting with a user.
     */
    activeStateEnabled?: boolean;
    /**
     * Specifies the way an end-user applies the selected value.
     */
    applyValueMode?: DevExpress.common.ApplyValueMode;
    /**
     * Configures the drop-down field which holds the content.
     */
    dropDownOptions?:
      | DevExpress.ui.dxPopup.Properties
      | DevExpress.ui.dxPopover.Properties;
    /**
     * Allows you to add custom buttons to the input text field.
     */
    buttons?: Array<
      | DevExpress.ui.dxDropDownEditor.DropDownPredefinedButton
      | dxTextEditorButton
    >;
    /**
     * Specifies whether to render the drop-down field&apos;s content when it is displayed. If false, the content is rendered immediately.
     */
    deferRendering?: boolean;
    /**
     * Specifies a custom template for the drop-down button.
     */
    dropDownButtonTemplate?:
      | DevExpress.core.template
      | ((
          buttonData: DevExpress.ui.dxDropDownEditor.DropDownButtonTemplateDataModel,
          contentElement: DevExpress.core.DxElement
        ) => string | DevExpress.core.UserDefinedElement);
    /**
     * A function that is executed once the drop-down editor is closed.
     */
    onClosed?: (e: DevExpress.events.EventInfo<TComponent>) => void;
    /**
     * A function that is executed once the drop-down editor is opened.
     */
    onOpened?: (e: DevExpress.events.EventInfo<TComponent>) => void;
    /**
     * Specifies whether a user can open the drop-down list by clicking a text field.
     */
    openOnFieldClick?: boolean;
    /**
     * Specifies whether or not the drop-down editor is displayed.
     */
    opened?: boolean;
    /**
     * Specifies whether the drop-down button is visible.
     */
    showDropDownButton?: boolean;
    /**
     * Specifies the currently selected value.
     */
    value?: any;
  }
  /**
   * A base class for drop-down list UI components.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export class dxDropDownList<
    TProperties
  > extends dxDropDownEditor<TProperties> {
    getDataSource(): DevExpress.data.DataSource;
  }
  module dxDropDownList {
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export interface SelectionChangedInfo<T = any> {
      readonly selectedItem: T;
    }
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxDropDownListOptions<TComponent>
    extends DataExpressionMixinOptions<TComponent>,
      dxDropDownEditorOptions<TComponent> {
    /**
     * Returns the value currently displayed by the UI component.
     */
    displayValue?: string;
    /**
     * Specifies a custom template for group captions.
     */
    groupTemplate?:
      | DevExpress.core.template
      | ((
          itemData: any,
          itemIndex: number,
          itemElement: DevExpress.core.DxElement
        ) => string | DevExpress.core.UserDefinedElement);
    /**
     * Specifies whether data items should be grouped.
     */
    grouped?: boolean;
    /**
     * The minimum number of characters that must be entered into the text box to begin a search. Applies only if searchEnabled is true.
     */
    minSearchLength?: number;
    /**
     * Specifies the text or HTML markup displayed by the UI component if the item collection is empty.
     */
    noDataText?: string;
    /**
     * A function that is executed when a list item is clicked or tapped.
     */
    onItemClick?: (
      e: DevExpress.events.NativeEventInfo<
        TComponent,
        KeyboardEvent | MouseEvent | PointerEvent
      > &
        DevExpress.events.ItemInfo
    ) => void;
    /**
     * A function that is executed when a list item is selected or selection is canceled.
     */
    onSelectionChanged?: (
      e: DevExpress.events.EventInfo<TComponent> &
        DevExpress.ui.dxDropDownList.SelectionChangedInfo
    ) => void;
    /**
     * A function that is executed after the UI component&apos;s value is changed.
     */
    onValueChanged?: (
      e: DevExpress.events.NativeEventInfo<
        TComponent,
        KeyboardEvent | MouseEvent | PointerEvent | Event
      > &
        DevExpress.ui.Editor.ValueChangedInfo
    ) => void;
    /**
     * Specifies whether to allow searching.
     */
    searchEnabled?: boolean;
    /**
     * Specifies the name of a data source item field or an expression whose value is compared to the search criterion.
     */
    searchExpr?: string | Function | Array<string | Function>;
    /**
     * Specifies a comparison operation used to search UI component items.
     */
    searchMode?: DevExpress.common.SimplifiedSearchMode;
    /**
     * Specifies the time delay, in milliseconds, after the last character has been typed in, before a search is executed.
     */
    searchTimeout?: number;
    /**
     * Gets the currently selected item.
     */
    selectedItem?: any;
    /**
     * Specifies whether or not the UI component displays unfiltered values until a user types a number of characters exceeding the minSearchLength property value.
     */
    showDataBeforeSearch?: boolean;
    /**
     * Specifies the currently selected value. May be an object if dataSource contains objects and valueExpr is not set.
     */
    value?: any;
    /**
     * Specifies the DOM events after which the UI component&apos;s value should be updated.
     */
    valueChangeEvent?: string;
    /**
     * Specifies whether text that exceeds the drop-down list width should be wrapped.
     */
    wrapItemText?: boolean;
    /**
     * Specifies whether the widget uses item&apos;s text a title attribute.
     */
    useItemTextAsTitle?: boolean;
  }
  /**
   * The FileManager is a UI component that allows users to upload, select, and manage files and directories in different file storages.
   */
  export class dxFileManager extends Widget<dxFileManagerOptions> {
    /**
     * Gets the current directory object.
     */
    getCurrentDirectory(): any;
    /**
     * Gets the selected items.
     */
    getSelectedItems(): Array<any>;
    /**
     * Reloads data and repaints the UI component.
     */
    refresh(): DevExpress.core.utils.DxPromise<any>;
  }
  module dxFileManager {
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    interface ActionEventInfo {
      errorCode?: number;
      errorText: string;
      cancel: boolean | PromiseLike<void>;
    }
    export type ContentReadyEvent = DevExpress.events.EventInfo<dxFileManager>;
    export type ContextMenuItemClickEvent = DevExpress.events.NativeEventInfo<
      dxFileManager,
      KeyboardEvent | PointerEvent | MouseEvent
    > & {
      readonly itemData: any;
      readonly itemElement: DevExpress.core.DxElement;
      readonly itemIndex: number;
      readonly fileSystemItem?: DevExpress.fileManagement.FileSystemItem;
      readonly viewArea: FileManagerViewArea;
    };
    export type ContextMenuShowingEvent = DevExpress.events.Cancelable &
      DevExpress.events.NativeEventInfo<
        dxFileManager,
        KeyboardEvent | PointerEvent | MouseEvent
      > & {
        readonly fileSystemItem?: DevExpress.fileManagement.FileSystemItem;
        readonly targetElement?: DevExpress.core.DxElement;
        readonly viewArea: FileManagerViewArea;
      };
    export type CurrentDirectoryChangedEvent =
      DevExpress.events.EventInfo<dxFileManager> & {
        readonly directory: DevExpress.fileManagement.FileSystemItem;
      };
    export type DirectoryCreatedEvent =
      DevExpress.events.EventInfo<dxFileManager> & {
        readonly parentDirectory: DevExpress.fileManagement.FileSystemItem;
        readonly name: string;
      };
    export type DirectoryCreatingEvent =
      DevExpress.events.EventInfo<dxFileManager> &
        ActionEventInfo & {
          readonly parentDirectory: DevExpress.fileManagement.FileSystemItem;
          readonly name: string;
        };
    export type DisposingEvent = DevExpress.events.EventInfo<dxFileManager>;
    export type ErrorOccurredEvent =
      DevExpress.events.EventInfo<dxFileManager> & {
        readonly errorCode?: number;
        errorText?: string;
        readonly fileSystemItem?: DevExpress.fileManagement.FileSystemItem;
      };
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export type FileManagerItemViewMode = 'details' | 'thumbnails';
    export type FileManagerPredefinedContextMenuItem =
      | 'create'
      | 'upload'
      | 'refresh'
      | 'download'
      | 'move'
      | 'copy'
      | 'rename'
      | 'delete';
    export type FileManagerPredefinedToolbarItem =
      | 'showNavPane'
      | 'create'
      | 'upload'
      | 'refresh'
      | 'switchView'
      | 'download'
      | 'move'
      | 'copy'
      | 'rename'
      | 'delete'
      | 'clearSelection'
      | 'separator';
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export type FileManagerViewArea = 'navPane' | 'itemView';
    export type FileUploadedEvent =
      DevExpress.events.EventInfo<dxFileManager> & {
        readonly fileData: File;
        readonly parentDirectory: DevExpress.fileManagement.FileSystemItem;
      };
    export type FileUploadingEvent =
      DevExpress.events.EventInfo<dxFileManager> &
        ActionEventInfo & {
          readonly fileData: File;
          readonly destinationDirectory: DevExpress.fileManagement.FileSystemItem;
        };
    export type FocusedItemChangedEvent =
      DevExpress.events.EventInfo<dxFileManager> & {
        readonly item?: DevExpress.fileManagement.FileSystemItem;
        readonly itemElement?: DevExpress.core.DxElement;
      };
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxFileManager>;
    export type ItemCopiedEvent = DevExpress.events.EventInfo<dxFileManager> & {
      readonly sourceItem: DevExpress.fileManagement.FileSystemItem;
      readonly parentDirectory: DevExpress.fileManagement.FileSystemItem;
      readonly itemName: string;
      readonly itemPath: string;
    };
    export type ItemCopyingEvent = DevExpress.events.EventInfo<dxFileManager> &
      ActionEventInfo & {
        readonly item: DevExpress.fileManagement.FileSystemItem;
        readonly destinationDirectory: DevExpress.fileManagement.FileSystemItem;
      };
    export type ItemDeletedEvent =
      DevExpress.events.EventInfo<dxFileManager> & {
        readonly item: DevExpress.fileManagement.FileSystemItem;
      };
    export type ItemDeletingEvent = DevExpress.events.EventInfo<dxFileManager> &
      ActionEventInfo & {
        readonly item: DevExpress.fileManagement.FileSystemItem;
      };
    export type ItemDownloadingEvent =
      DevExpress.events.EventInfo<dxFileManager> &
        ActionEventInfo & {
          readonly item: DevExpress.fileManagement.FileSystemItem;
        };
    export type ItemMovedEvent = DevExpress.events.EventInfo<dxFileManager> & {
      readonly sourceItem: DevExpress.fileManagement.FileSystemItem;
      readonly parentDirectory: DevExpress.fileManagement.FileSystemItem;
      readonly itemName: string;
      readonly itemPath: string;
    };
    export type ItemMovingEvent = DevExpress.events.EventInfo<dxFileManager> &
      ActionEventInfo & {
        readonly item: DevExpress.fileManagement.FileSystemItem;
        readonly destinationDirectory: DevExpress.fileManagement.FileSystemItem;
      };
    export type ItemRenamedEvent =
      DevExpress.events.EventInfo<dxFileManager> & {
        readonly sourceItem: DevExpress.fileManagement.FileSystemItem;
        readonly itemName: string;
      };
    export type ItemRenamingEvent = DevExpress.events.EventInfo<dxFileManager> &
      ActionEventInfo & {
        readonly item: DevExpress.fileManagement.FileSystemItem;
        readonly newName: string;
      };
    export type OptionChangedEvent =
      DevExpress.events.EventInfo<dxFileManager> &
        DevExpress.events.ChangedOptionInfo;
    export type Properties = dxFileManagerOptions;
    export type SelectedFileOpenedEvent =
      DevExpress.events.EventInfo<dxFileManager> & {
        readonly file: DevExpress.fileManagement.FileSystemItem;
      };
    export type SelectionChangedEvent =
      DevExpress.events.EventInfo<dxFileManager> & {
        readonly currentSelectedItemKeys: Array<string>;
        readonly currentDeselectedItemKeys: Array<string>;
        readonly selectedItems: Array<DevExpress.fileManagement.FileSystemItem>;
        readonly selectedItemKeys: Array<string>;
      };
    export type ToolbarItemClickEvent = DevExpress.events.NativeEventInfo<
      dxFileManager,
      PointerEvent | MouseEvent
    > & {
      readonly itemData: any;
      readonly itemElement: DevExpress.core.DxElement;
      readonly itemIndex: number;
    };
  }
  /**
   * Configures the context menu.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxFileManagerContextMenu {
    /**
     * Configures context menu items&apos; settings.
     */
    items?: Array<
      | DevExpress.ui.dxFileManager.ContextMenuItem
      | DevExpress.ui.dxFileManager.FileManagerPredefinedContextMenuItem
    >;
  }
  /**
   * @deprecated Use DevExpress.ui.dxFileManager.ContextMenuItem instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxFileManagerContextMenuItem
    extends DevExpress.ui.dxContextMenu.Item {
    /**
     * Configures settings of a context menu item&apos;s subitems.
     */
    items?: Array<DevExpress.ui.dxFileManager.ContextMenuItem>;
    /**
     * Specifies the context menu item&apos;s name.
     */
    name?:
      | DevExpress.ui.dxFileManager.FileManagerPredefinedContextMenuItem
      | string;
    /**
     * Specifies the context menu item&apos;s visibility.
     */
    visible?: boolean;
    /**
     * 
     */
    template?:
      | DevExpress.core.template
      | (() => string | DevExpress.core.UserDefinedElement);
  }
  /**
   * Configures the column.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxFileManagerDetailsColumn {
    /**
     * Specifies the column alignment.
     */
    alignment?: DevExpress.common.HorizontalAlignment | undefined;
    /**
     * Specifies the column caption.
     */
    caption?: string;
    /**
     * Specifies a CSS class to be applied to the column.
     */
    cssClass?: string;
    /**
     * Specifies which data field provides data for the column.
     */
    dataField?: string;
    /**
     * Casts column values to a specific data type.
     */
    dataType?: DevExpress.common.DataType;
    /**
     * Specifies the order in which columns are hidden when the UI component adapts to the screen or container size.
     */
    hidingPriority?: number;
    /**
     * Specifies the order in which the column is sorted.
     */
    sortIndex?: number;
    /**
     * Specifies the sort order of column values.
     */
    sortOrder?: DevExpress.common.SortOrder | undefined;
    /**
     * Specifies the column visibility.
     */
    visible?: boolean;
    /**
     * Specifies the position of the column in the resulting UI component.
     */
    visibleIndex?: number;
    /**
     * Specifies the column width.
     */
    width?: number | string;
  }
  /**
   * @deprecated use Properties instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxFileManagerOptions extends WidgetOptions<dxFileManager> {
    /**
     * Specifies the allowed upload file extensions.
     */
    allowedFileExtensions?: Array<string>;
    /**
     * Configures the context menu settings.
     */
    contextMenu?: dxFileManagerContextMenu;
    /**
     * Specifies the path that is used when the FileManager is initialized.
     */
    currentPath?: string;
    /**
     * Specifies an array of path keys to the current location.
     */
    currentPathKeys?: Array<string>;
    /**
     * Customizes columns in details view. Applies only if itemView.mode is &apos;details&apos;.
     */
    customizeDetailColumns?: (
      columns: Array<dxFileManagerDetailsColumn>
    ) => Array<dxFileManagerDetailsColumn>;
    /**
     * Allows you to provide custom icons to be used as thumbnails.
     */
    customizeThumbnail?: (
      fileSystemItem: DevExpress.fileManagement.FileSystemItem
    ) => string;
    /**
     * Specifies the file system provider.
     */
    fileSystemProvider?: any;
    /**
     * Configures the file and directory view.
     */
    itemView?: {
      /**
       * Configures the &apos;Details&apos; file system representation mode.
       */
      details?: {
        /**
         * Configures the columns.
         */
        columns?: Array<dxFileManagerDetailsColumn | string>;
      };
      /**
       * Specifies the file system representation mode.
       */
      mode?: DevExpress.ui.dxFileManager.FileManagerItemViewMode;
      /**
       * Specifies whether to display folders in the view. When this property is false, folders are displayed in the navigation pane only.
       */
      showFolders?: boolean;
      /**
       * Specifies whether to display the parent directory in the view.
       */
      showParentFolder?: boolean;
    };
    /**
     * Configures notification settings.
     */
    notifications?: {
      /**
       * Specifies whether to show the progress panel.
       */
      showPanel?: boolean;
      /**
       * Specifies whether to show the pop-up notification window.
       */
      showPopup?: boolean;
    };
    /**
     * A function that is executed when a context menu item is clicked.
     */
    onContextMenuItemClick?: (
      e: DevExpress.ui.dxFileManager.ContextMenuItemClickEvent
    ) => void;
    /**
     * A function that is executed before a context menu is displayed.
     */
    onContextMenuShowing?: (
      e: DevExpress.ui.dxFileManager.ContextMenuShowingEvent
    ) => void;
    /**
     * A function that is executed when the current directory is changed.
     */
    onCurrentDirectoryChanged?: (
      e: DevExpress.ui.dxFileManager.CurrentDirectoryChangedEvent
    ) => void;
    /**
     * A function that is executed when the selected file is opened.
     */
    onSelectedFileOpened?: (
      e: DevExpress.ui.dxFileManager.SelectedFileOpenedEvent
    ) => void;
    /**
     * A function that is executed when a file system item is selected or selection is canceled.
     */
    onSelectionChanged?: (
      e: DevExpress.ui.dxFileManager.SelectionChangedEvent
    ) => void;
    /**
     * A function that is executed when a toolbar item is clicked.
     */
    onToolbarItemClick?: (
      e: DevExpress.ui.dxFileManager.ToolbarItemClickEvent
    ) => void;
    /**
     * A function that is executed when the focused item is changed.
     */
    onFocusedItemChanged?: (
      e: DevExpress.ui.dxFileManager.FocusedItemChangedEvent
    ) => void;
    /**
     * A function that is executed when an error occurs.
     */
    onErrorOccurred?: (
      e: DevExpress.ui.dxFileManager.ErrorOccurredEvent
    ) => void;
    /**
     * A function that is executed before a directory is created.
     */
    onDirectoryCreating?: (
      e: DevExpress.ui.dxFileManager.DirectoryCreatingEvent
    ) => void;
    /**
     * A function that is executed when a directory is created.
     */
    onDirectoryCreated?: (
      e: DevExpress.ui.dxFileManager.DirectoryCreatedEvent
    ) => void;
    /**
     * A function that is executed before a file or directory is renamed.
     */
    onItemRenaming?: (e: DevExpress.ui.dxFileManager.ItemRenamingEvent) => void;
    /**
     * A function that is executed when a file or directory is renamed.
     */
    onItemRenamed?: (e: DevExpress.ui.dxFileManager.ItemRenamedEvent) => void;
    /**
     * A function that is executed before a file or directory is moved.
     */
    onItemMoving?: (e: DevExpress.ui.dxFileManager.ItemMovingEvent) => void;
    /**
     * A function that is executed when a file or directory is moved.
     */
    onItemMoved?: (e: DevExpress.ui.dxFileManager.ItemMovedEvent) => void;
    /**
     * A function that is executed before a file or directory is copied.
     */
    onItemCopying?: (e: DevExpress.ui.dxFileManager.ItemCopyingEvent) => void;
    /**
     * A function that is executed when a file or directory is copied.
     */
    onItemCopied?: (e: DevExpress.ui.dxFileManager.ItemCopiedEvent) => void;
    /**
     * A function that is executed before a file or directory is deleted.
     */
    onItemDeleting?: (e: DevExpress.ui.dxFileManager.ItemDeletingEvent) => void;
    /**
     * A function that is executed when a file or directory is deleted.
     */
    onItemDeleted?: (e: DevExpress.ui.dxFileManager.ItemDeletedEvent) => void;
    /**
     * A function that is executed before the file is uploaded.
     */
    onFileUploading?: (
      e: DevExpress.ui.dxFileManager.FileUploadingEvent
    ) => void;
    /**
     * A function that is executed when a file is successfully uploaded.
     */
    onFileUploaded?: (e: DevExpress.ui.dxFileManager.FileUploadedEvent) => void;
    /**
     * A function that is executed before a file is downloaded.
     */
    onItemDownloading?: (
      e: DevExpress.ui.dxFileManager.ItemDownloadingEvent
    ) => void;
    /**
     * Specifies actions that a user is allowed to perform on files and directories.
     */
    permissions?: {
      /**
       * Specifies whether a user is allowed to copy files and directories.
       */
      copy?: boolean;
      /**
       * Specifies whether a user is allowed to create files and directories.
       */
      create?: boolean;
      /**
       * Specifies whether a user is allowed to download files.
       */
      download?: boolean;
      /**
       * Specifies whether a user is allowed to move files and directories.
       */
      move?: boolean;
      /**
       * Specifies whether a user is allowed to delete files and directories.
       */
      delete?: boolean;
      /**
       * Specifies whether a user is allowed to rename files and directories.
       */
      rename?: boolean;
      /**
       * Specifies whether a user is allowed to upload files.
       */
      upload?: boolean;
    };
    /**
     * Specifies the root directory name.
     */
    rootFolderName?: string;
    /**
     * Specifies whether a user can select a single or multiple files and directories in the item view simultaneously.
     */
    selectionMode?: DevExpress.common.SingleOrMultiple;
    /**
     * Contains an array of initially or currently selected files and directories&apos; keys.
     */
    selectedItemKeys?: Array<string>;
    /**
     * Specifies a key of the initially or currently focused item.
     */
    focusedItemKey?: string;
    /**
     * Configures toolbar settings.
     */
    toolbar?: dxFileManagerToolbar;
    /**
     * Configures upload settings.
     */
    upload?: {
      /**
       * Specifies the maximum upload file size, in bytes.
       */
      maxFileSize?: number;
      /**
       * Specifies a chunk size, in bytes.
       */
      chunkSize?: number;
    };
  }
  /**
   * Configures the toolbar.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxFileManagerToolbar {
    /**
     * Configures settings of the toolbar items that are visible when users select files.
     */
    fileSelectionItems?: Array<
      | DevExpress.ui.dxFileManager.ToolbarItem
      | DevExpress.ui.dxFileManager.FileManagerPredefinedToolbarItem
    >;
    /**
     * Configures toolbar items&apos; settings.
     */
    items?: Array<
      | DevExpress.ui.dxFileManager.ToolbarItem
      | DevExpress.ui.dxFileManager.FileManagerPredefinedToolbarItem
    >;
  }
  /**
   * @deprecated Use ToolbarItem instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxFileManagerToolbarItem
    extends DevExpress.ui.dxToolbar.Item {
    /**
     * Specifies the icon to be displayed on the toolbar item.
     */
    icon?: string;
    /**
     * Specifies the toolbar item&apos;s location.
     */
    location?: DevExpress.common.ToolbarItemLocation;
    /**
     * Specifies the toolbar item&apos;s name.
     */
    name?:
      | DevExpress.ui.dxFileManager.FileManagerPredefinedToolbarItem
      | string;
    /**
     * Specifies the toolbar item&apos;s visibility.
     */
    visible?: boolean;
    /**
     * 
     */
    html?: string;
    /**
     * 
     */
    template?:
      | DevExpress.core.template
      | (() => string | DevExpress.core.UserDefinedElement);
    /**
     * 
     */
    menuItemTemplate?:
      | DevExpress.core.template
      | (() => string | DevExpress.core.UserDefinedElement);
  }
  /**
   * The FileUploader UI component enables an end user to upload files to the server. An end user can select files in the file explorer or drag and drop files to the FileUploader area on the page.
   */
  export class dxFileUploader extends Editor<dxFileUploaderOptions> {
    /**
     * Uploads all the selected files.
     */
    upload(): void;
    /**
     * Uploads a file with the specified index.
     */
    upload(fileIndex: number): void;
    /**
     * Uploads the specified file.
     */
    upload(file: File): void;
    /**
     * Cancels the file upload.
     */
    abortUpload(): void;
    /**
     * Cancels the file upload.
     */
    abortUpload(fileIndex: number): void;
    /**
     * Cancels the file upload.
     */
    abortUpload(file: File): void;
    /**
     * Removes a file with the specified index.
     */
    removeFile(fileIndex: number): void;
    /**
     * Removes a file.
     */
    removeFile(file: File): void;
  }
  module dxFileUploader {
    export type BeforeSendEvent =
      DevExpress.events.EventInfo<dxFileUploader> & {
        readonly request: XMLHttpRequest;
        readonly file: File;
        readonly uploadInfo?: DevExpress.fileManagement.UploadInfo;
      };
    export type ContentReadyEvent = DevExpress.events.EventInfo<dxFileUploader>;
    export type DisposingEvent = DevExpress.events.EventInfo<dxFileUploader>;
    export type DropZoneEnterEvent = DevExpress.events.NativeEventInfo<
      dxFileUploader,
      PointerEvent | MouseEvent
    > & {
      readonly dropZoneElement: DevExpress.core.DxElement;
    };
    export type DropZoneLeaveEvent = DevExpress.events.NativeEventInfo<
      dxFileUploader,
      PointerEvent | MouseEvent
    > & {
      readonly dropZoneElement: DevExpress.core.DxElement;
    };
    export type FilesUploadedEvent =
      DevExpress.events.EventInfo<dxFileUploader>;
    export type FileUploadMode = 'instantly' | 'useButtons' | 'useForm';
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxFileUploader>;
    export type OptionChangedEvent =
      DevExpress.events.EventInfo<dxFileUploader> &
        DevExpress.events.ChangedOptionInfo;
    export type ProgressEvent =
      DevExpress.events.NativeEventInfo<dxFileUploader> & {
        readonly file: File;
        readonly segmentSize: number;
        readonly bytesLoaded: number;
        readonly bytesTotal: number;
        readonly request: XMLHttpRequest;
      };
    export type Properties = dxFileUploaderOptions;
    export type UploadAbortedEvent =
      DevExpress.events.NativeEventInfo<dxFileUploader> & {
        readonly file: File;
        readonly request: XMLHttpRequest;
        message: string;
      };
    export type UploadedEvent =
      DevExpress.events.NativeEventInfo<dxFileUploader> & {
        readonly file: File;
        readonly request: XMLHttpRequest;
        message: string;
      };
    export type UploadErrorEvent =
      DevExpress.events.NativeEventInfo<dxFileUploader> & {
        readonly file: File;
        readonly request: XMLHttpRequest;
        readonly error: any;
        message: string;
      };
    export type UploadHttpMethod = 'POST' | 'PUT';
    export type UploadStartedEvent =
      DevExpress.events.NativeEventInfo<dxFileUploader> & {
        readonly file: File;
        readonly request: XMLHttpRequest;
      };
    export type ValueChangedEvent =
      DevExpress.events.NativeEventInfo<dxFileUploader> & {
        readonly value?: Array<File>;
        readonly previousValue?: Array<File>;
      };
  }
  /**
   * @deprecated use Properties instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxFileUploaderOptions extends EditorOptions<dxFileUploader> {
    /**
     * A function that cancels the file upload.
     */
    abortUpload?: (
      file: File,
      uploadInfo?: DevExpress.fileManagement.UploadInfo
    ) => PromiseLike<any> | any;
    /**
     * Specifies a file type or several types accepted by the UI component.
     */
    accept?: string;
    /**
     * Specifies if an end user can remove a file from the selection and interrupt uploading.
     */
    allowCanceling?: boolean;
    /**
     * Restricts file extensions that can be uploaded to the server.
     */
    allowedFileExtensions?: Array<string>;
    /**
     * Specifies the chunk size in bytes. Applies only if uploadMode is &apos;instantly&apos; or &apos;useButtons&apos;. Requires a server that can process file chunks.
     */
    chunkSize?: number;
    /**
     * Specifies whether the UI component can be focused using keyboard navigation.
     */
    focusStateEnabled?: boolean;
    /**
     * Specifies whether the FileUploader component changes the state of all its buttons when users hover over them.
     */
    hoverStateEnabled?: boolean;
    /**
     * The text displayed when the extension of the file being uploaded is not an allowed file extension.
     */
    invalidFileExtensionMessage?: string;
    /**
     * The text displayed when the size of the file being uploaded is greater than the maxFileSize.
     */
    invalidMaxFileSizeMessage?: string;
    /**
     * The text displayed when the size of the file being uploaded is less than the minFileSize.
     */
    invalidMinFileSizeMessage?: string;
    /**
     * Specifies the attributes to be passed on to the underlying `` element of the `file` type.
     */
    inputAttr?: any;
    /**
     * Specifies the text displayed on the area to which an end-user can drop a file.
     */
    labelText?: string;
    /**
     * Specifies the maximum file size (in bytes) allowed for uploading. Applies only if uploadMode is &apos;instantly&apos; or &apos;useButtons&apos;.
     */
    maxFileSize?: number;
    /**
     * Specifies the minimum file size (in bytes) allowed for uploading. Applies only if uploadMode is &apos;instantly&apos; or &apos;useButtons&apos;.
     */
    minFileSize?: number;
    /**
     * Specifies whether the UI component enables an end-user to select a single file or multiple files.
     */
    multiple?: boolean;
    /**
     * Specifies the value passed to the name attribute of the underlying input element. Required to access uploaded files on the server.
     */
    name?: string;
    /**
     * A function that allows you to customize the request before it is sent to the server.
     */
    onBeforeSend?: (e: DevExpress.ui.dxFileUploader.BeforeSendEvent) => void;
    /**
     * A function that is executed when the mouse enters a drop zone while dragging a file.
     */
    onDropZoneEnter?: (
      e: DevExpress.ui.dxFileUploader.DropZoneEnterEvent
    ) => void;
    /**
     * A function that is executed when the mouse leaves a drop zone as it drags a file.
     */
    onDropZoneLeave?: (
      e: DevExpress.ui.dxFileUploader.DropZoneLeaveEvent
    ) => void;
    /**
     * A function that is executed when all files are successfully uploaded.
     */
    onFilesUploaded?: (
      e: DevExpress.ui.dxFileUploader.FilesUploadedEvent
    ) => void;
    /**
     * A function that is executed when a file segment is uploaded.
     */
    onProgress?: (e: DevExpress.ui.dxFileUploader.ProgressEvent) => void;
    /**
     * A function that is executed when the file upload is aborted.
     */
    onUploadAborted?: (
      e: DevExpress.ui.dxFileUploader.UploadAbortedEvent
    ) => void;
    /**
     * A function that is executed when an error occurs during the file upload.
     */
    onUploadError?: (e: DevExpress.ui.dxFileUploader.UploadErrorEvent) => void;
    /**
     * A function that is executed when the file upload is started.
     */
    onUploadStarted?: (
      e: DevExpress.ui.dxFileUploader.UploadStartedEvent
    ) => void;
    /**
     * A function that is executed when a file is successfully uploaded.
     */
    onUploaded?: (e: DevExpress.ui.dxFileUploader.UploadedEvent) => void;
    /**
     * A function that is executed when one or several files are added to or removed from the selection.
     */
    onValueChanged?: (
      e: DevExpress.ui.dxFileUploader.ValueChangedEvent
    ) => void;
    /**
     * Gets the current progress in percentages.
     */
    progress?: number;
    /**
     * The message displayed by the UI component when it is ready to upload the specified files.
     */
    readyToUploadMessage?: string;
    /**
     * The text displayed on the button that opens the file browser.
     */
    selectButtonText?: string;
    /**
     * Specifies whether or not the UI component displays the list of selected files.
     */
    showFileList?: boolean;
    /**
     * Specifies the HTML element which invokes the file upload dialog.
     */
    dialogTrigger?: string | DevExpress.core.UserDefinedElement;
    /**
     * Specifies the HTML element in which users can drag and drop files for upload.
     */
    dropZone?: string | DevExpress.core.UserDefinedElement;
    /**
     * The text displayed on the button that starts uploading.
     */
    uploadButtonText?: string;
    /**
     * A function that uploads a file in chunks.
     */
    uploadChunk?: (
      file: File,
      uploadInfo: DevExpress.fileManagement.UploadInfo
    ) => PromiseLike<any> | any;
    /**
     * The message displayed by the UI component on uploading failure.
     */
    uploadFailedMessage?: string;
    /**
     * The message displayed by the UI component when the file upload is cancelled.
     */
    uploadAbortedMessage?: string;
    /**
     * A function that uploads a file.
     */
    uploadFile?: (
      file: File,
      progressCallback: Function
    ) => PromiseLike<any> | any;
    /**
     * Specifies headers for the upload request.
     */
    uploadHeaders?: any;
    /**
     * Specifies custom data for the upload request.
     */
    uploadCustomData?: any;
    /**
     * Specifies the method for the upload request.
     */
    uploadMethod?: DevExpress.ui.dxFileUploader.UploadHttpMethod;
    /**
     * Specifies how the UI component uploads files.
     */
    uploadMode?: DevExpress.ui.dxFileUploader.FileUploadMode;
    /**
     * Specifies a target Url for the upload request.
     */
    uploadUrl?: string;
    /**
     * The message displayed by the UI component when uploading is finished.
     */
    uploadedMessage?: string;
    /**
     * Specifies a File instance representing the selected file. Read-only when uploadMode is &apos;useForm&apos;.
     */
    value?: Array<File>;
  }
  /**
   * The FilterBuilder UI component allows a user to build complex filter expressions with an unlimited number of filter conditions, combined by logical operations using the UI.
   */
  export class dxFilterBuilder extends Widget<dxFilterBuilderOptions> {
    /**
     * Gets a filter expression that contains only operations supported by the DataSource.
     */
    getFilterExpression(): string | Array<any> | Function;
  }
  module dxFilterBuilder {
    export type ContentReadyEvent =
      DevExpress.events.EventInfo<dxFilterBuilder>;
    export type CustomOperation = dxFilterBuilderCustomOperation;
    export type CustomOperationEditorTemplate = {
      readonly value?: string | number | Date;
      readonly field: Field;
      readonly setValue: Function;
    };
    export type DisposingEvent = DevExpress.events.EventInfo<dxFilterBuilder>;
    export type EditorPreparedEvent =
      DevExpress.events.EventInfo<dxFilterBuilder> & {
        readonly value?: any;
        readonly setValue: any;
        readonly editorElement: DevExpress.core.DxElement;
        readonly editorName: string;
        readonly dataField?: string;
        readonly filterOperation?: string;
        readonly updateValueTimeout?: number;
        readonly width?: number;
        readonly readOnly: boolean;
        readonly disabled: boolean;
        readonly rtlEnabled: boolean;
      };
    export type EditorPreparingEvent = DevExpress.events.Cancelable &
      DevExpress.events.EventInfo<dxFilterBuilder> & {
        readonly value?: any;
        readonly setValue: any;
        readonly editorElement?: DevExpress.core.DxElement;
        editorName: string;
        editorOptions?: any;
        readonly dataField?: string;
        readonly filterOperation?: string;
        updateValueTimeout?: number;
        readonly width?: number;
        readonly readOnly: boolean;
        readonly disabled: boolean;
        readonly rtlEnabled: boolean;
      };
    export type Field = dxFilterBuilderField;
    export type FieldEditorTemplate = {
      readonly value?: string | number | Date;
      readonly filterOperation?: string;
      readonly field: Field;
      readonly setValue: Function;
    };
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export type FilterBuilderOperation =
      | '='
      | '<>'
      | '<'
      | '<='
      | '>'
      | '>='
      | 'contains'
      | 'endswith'
      | 'isblank'
      | 'isnotblank'
      | 'notcontains'
      | 'startswith'
      | 'between';
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export type FilterLookupDataSource<T> = Exclude<
      DevExpress.data.DataSource.DataSourceLike<T>,
      string | DevExpress.data.DataSource
    >;
    export type GroupOperation = 'and' | 'or' | 'notAnd' | 'notOr';
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxFilterBuilder>;
    export type OptionChangedEvent =
      DevExpress.events.EventInfo<dxFilterBuilder> &
        DevExpress.events.ChangedOptionInfo;
    export type Properties = dxFilterBuilderOptions;
    export type ValueChangedEvent =
      DevExpress.events.EventInfo<dxFilterBuilder> & {
        readonly value?: any;
        readonly previousValue?: any;
      };
  }
  /**
   * @deprecated Use the CustomOperation type instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxFilterBuilderCustomOperation {
    /**
     * Specifies a function that returns a filter expression for this custom operation.
     */
    calculateFilterExpression?: (
      filterValue: any,
      field: DevExpress.ui.dxFilterBuilder.Field
    ) => string | Array<any> | Function;
    /**
     * Specifies the operation&apos;s caption.
     */
    caption?: string;
    /**
     * Customizes the field value&apos;s text representation.
     */
    customizeText?: (fieldInfo: {
      value?: string | number | Date;
      valueText?: string;
      field?: DevExpress.ui.dxFilterBuilder.Field;
    }) => string;
    /**
     * Specifies for which data types the operation is available by default.
     */
    dataTypes?: Array<DevExpress.common.DataType>;
    /**
     * Specifies a custom template for the UI component used to edit the field value.
     */
    editorTemplate?:
      | DevExpress.core.template
      | ((
          conditionInfo: DevExpress.ui.dxFilterBuilder.CustomOperationEditorTemplate,
          container: DevExpress.core.DxElement
        ) => string | DevExpress.core.UserDefinedElement);
    /**
     * Specifies whether the operation can have a value. If it can, the editor is displayed.
     */
    hasValue?: boolean;
    /**
     * Specifies the icon that should represent the filter operation.
     */
    icon?: string;
    /**
     * Specifies the operation&apos;s identifier.
     */
    name?: string;
  }
  /**
   * @deprecated Use the Field type instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxFilterBuilderField {
    /**
     * Specifies the field&apos;s custom rules to filter data.
     */
    calculateFilterExpression?: (
      filterValue: any,
      selectedFilterOperation: string
    ) => string | Array<any> | Function;
    /**
     * Specifies the data field&apos;s caption.
     */
    caption?: string;
    /**
     * Customizes the input value&apos;s display text.
     */
    customizeText?: (fieldInfo: {
      value?: string | number | Date;
      valueText?: string;
    }) => string;
    /**
     * Specifies the name of a field to be filtered.
     */
    dataField?: string;
    /**
     * Casts field values to a specific data type.
     */
    dataType?: DevExpress.common.DataType;
    /**
     * Configures the UI component used to edit the field value.
     */
    editorOptions?: any;
    /**
     * Specifies the editor&apos;s custom template.
     */
    editorTemplate?:
      | DevExpress.core.template
      | ((
          conditionInfo: DevExpress.ui.dxFilterBuilder.FieldEditorTemplate,
          container: DevExpress.core.DxElement
        ) => string | DevExpress.core.UserDefinedElement);
    /**
     * Specifies the false value text. Applies only if dataType is &apos;boolean&apos;.
     */
    falseText?: string;
    /**
     * Specifies a set of available filter operations.
     */
    filterOperations?: Array<
      DevExpress.ui.dxFilterBuilder.FilterBuilderOperation | string
    >;
    /**
     * Formats a value before it is displayed.
     */
    format?: Format;
    /**
     * Configures the lookup field.
     */
    lookup?: {
      /**
       * Specifies whether to display the Clear button in the lookup field while it is being edited.
       */
      allowClearing?: boolean;
      /**
       * Specifies the lookup data source.
       */
      dataSource?: DevExpress.ui.dxFilterBuilder.FilterLookupDataSource<any> | null;
      /**
       * Specifies the data field whose values should be displayed.
       */
      displayExpr?: string | ((data: any) => string);
      /**
       * Specifies the data field whose values should be replaced with values from the displayExpr field.
       */
      valueExpr?: string | ((data: any) => string | number | boolean);
    };
    /**
     * Specifies the field&apos;s name. Use it to distinguish the field from other fields when they have identical dataField values.
     */
    name?: string;
    /**
     * Specifies the true value text. Applies only if dataType is &apos;boolean&apos;.
     */
    trueText?: string;
  }
  /**
   * @deprecated use Properties instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxFilterBuilderOptions
    extends WidgetOptions<dxFilterBuilder> {
    /**
     * Specifies whether the UI component can display hierarchical data fields.
     */
    allowHierarchicalFields?: boolean;
    /**
     * Configures custom filter operations.
     */
    customOperations?: Array<DevExpress.ui.dxFilterBuilder.CustomOperation>;
    /**
     * Configures fields.
     */
    fields?: Array<DevExpress.ui.dxFilterBuilder.Field>;
    /**
     * Specifies filter operation descriptions.
     */
    filterOperationDescriptions?: {
      /**
       * The &apos;between&apos; operation&apos;s description.
       */
      between?: string;
      /**
       * The &apos;contains&apos; operation&apos;s description.
       */
      contains?: string;
      /**
       * The &apos;endswith&apos; operation&apos;s description.
       */
      endsWith?: string;
      /**
       * The &apos;=&apos; operation&apos;s description.
       */
      equal?: string;
      /**
       * The &apos;&gt;&apos; operation&apos;s description.
       */
      greaterThan?: string;
      /**
       * The &apos;&gt;=&apos; operation&apos;s description.
       */
      greaterThanOrEqual?: string;
      /**
       * The &apos;isblank&apos; operation&apos;s description.
       */
      isBlank?: string;
      /**
       * The &apos;isnotblank&apos; operation&apos;s description.
       */
      isNotBlank?: string;
      /**
       * The &apos;&lt;&apos; operation&apos;s description.
       */
      lessThan?: string;
      /**
       * The &apos;&lt;=&apos; operation&apos;s description.
       */
      lessThanOrEqual?: string;
      /**
       * The &apos;notcontains&apos; operation&apos;s description.
       */
      notContains?: string;
      /**
       * The &apos;&lt;&gt;&apos; operation&apos;s description.
       */
      notEqual?: string;
      /**
       * The &apos;startswith&apos; operation&apos;s description.
       */
      startsWith?: string;
    };
    /**
     * Specifies group operation descriptions.
     */
    groupOperationDescriptions?: {
      /**
       * The &apos;and&apos; operation&apos;s description.
       */
      and?: string;
      /**
       * The &apos;notand&apos; operation&apos;s description.
       */
      notAnd?: string;
      /**
       * The &apos;notor&apos; operation&apos;s description.
       */
      notOr?: string;
      /**
       * The &apos;or&apos; operation&apos;s description.
       */
      or?: string;
    };
    /**
     * Specifies a set of available group operations.
     */
    groupOperations?: Array<DevExpress.ui.dxFilterBuilder.GroupOperation>;
    /**
     * Specifies groups&apos; maximum nesting level.
     */
    maxGroupLevel?: number;
    /**
     * A function that is executed after an editor is created.
     */
    onEditorPrepared?: (
      e: DevExpress.ui.dxFilterBuilder.EditorPreparedEvent
    ) => void;
    /**
     * A function that is executed before an editor is created.
     */
    onEditorPreparing?: (
      e: DevExpress.ui.dxFilterBuilder.EditorPreparingEvent
    ) => void;
    /**
     * A function that is executed after the UI component&apos;s value is changed.
     */
    onValueChanged?: (
      e: DevExpress.ui.dxFilterBuilder.ValueChangedEvent
    ) => void;
    /**
     * Allows you to specify a filter.
     */
    value?: string | Array<any> | Function;
  }
  /**
   * The Form UI component represents fields of a data object as a collection of label-editor pairs. These pairs can be arranged in several groups, tabs and columns.
   */
  export class dxForm extends Widget<dxFormOptions> {
    /**
     * Gets a button&apos;s instance.
     */
    getButton(name: string): dxButton | undefined;
    /**
     * Gets an editor instance. Takes effect only if the form item is visible.
     */
    getEditor(dataField: string): Editor | undefined;
    /**
     * Gets a form item&apos;s configuration.
     */
    itemOption(id: string): any;
    /**
     * Updates the value of a single item option.
     */
    itemOption(id: string, option: string, value: any): void;
    /**
     * Updates the values of several item properties.
     */
    itemOption(id: string, options: any): void;
    /**
     * Resets the editor&apos;s value to undefined.
     */
    resetValues(): void;
    /**
     * Merges the passed `data` object with formData. Matching properties in formData are overwritten and new properties added.
     */
    updateData(data: any): void;
    /**
     * Updates a formData field and the corresponding editor.
     */
    updateData(dataField: string, value: any): void;
    /**
     * Updates the dimensions of the UI component contents.
     */
    updateDimensions(): DevExpress.core.utils.DxPromise<void>;
    /**
     * Validates the values of all editors on the form against the list of the validation rules specified for each form item.
     */
    validate(): DevExpress.ui.dxValidationGroup.ValidationResult;
  }
  module dxForm {
    export type ContentReadyEvent = DevExpress.events.EventInfo<dxForm>;
    export type DisposingEvent = DevExpress.events.EventInfo<dxForm>;
    export type EditorEnterKeyEvent = DevExpress.events.EventInfo<dxForm> & {
      readonly dataField?: string;
    };
    export type FieldDataChangedEvent = DevExpress.events.EventInfo<dxForm> & {
      readonly dataField?: string;
      readonly value?: any;
    };
    export type FormItemComponent =
      | 'dxAutocomplete'
      | 'dxCalendar'
      | 'dxCheckBox'
      | 'dxColorBox'
      | 'dxDateBox'
      | 'dxDropDownBox'
      | 'dxHtmlEditor'
      | 'dxLookup'
      | 'dxNumberBox'
      | 'dxRadioGroup'
      | 'dxRangeSlider'
      | 'dxSelectBox'
      | 'dxSlider'
      | 'dxSwitch'
      | 'dxTagBox'
      | 'dxTextArea'
      | 'dxTextBox';
    export type FormItemType =
      | 'empty'
      | 'group'
      | 'simple'
      | 'tabbed'
      | 'button';
    export type FormLabelMode = 'static' | 'floating' | 'hidden' | 'outside';
    export type GroupItemTemplateData = {
      readonly component: dxForm;
      readonly formData?: any;
    };
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxForm>;
    export type LabelLocation = 'left' | 'right' | 'top';
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxForm> &
      DevExpress.events.ChangedOptionInfo;
    export type Properties = dxFormOptions;
    export type SimpleItemTemplateData = {
      readonly component: dxForm;
      readonly dataField?: string;
      readonly editorOptions?: any;
      readonly editorType?: string;
      readonly name?: string;
    };
  }
  /**
   * @deprecated Use ButtonItem instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxFormButtonItem {
    /**
     * Configures the button.
     */
    buttonOptions?: dxButtonOptions;
    /**
     * Specifies how many columns the item spans.
     */
    colSpan?: number;
    /**
     * Specifies a CSS class to be applied to the item.
     */
    cssClass?: string;
    /**
     * Specifies the button&apos;s horizontal alignment.
     */
    horizontalAlignment?: DevExpress.common.HorizontalAlignment;
    /**
     * Specifies the item&apos;s type. Set it to &apos;button&apos; to create a button item.
     */
    itemType?: DevExpress.ui.dxForm.FormItemType;
    /**
     * Specifies the item&apos;s identifier.
     */
    name?: string;
    /**
     * Specifies the button&apos;s vertical alignment.
     */
    verticalAlignment?: DevExpress.common.VerticalAlignment;
    /**
     * Specifies whether the item is visible.
     */
    visible?: boolean;
    /**
     * Specifies the item&apos;s position regarding other items in a group, tab, or the whole UI component.
     */
    visibleIndex?: number;
  }
  /**
   * @deprecated Use EmptyItem instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxFormEmptyItem {
    /**
     * Specifies the number of columns spanned by the item.
     */
    colSpan?: number;
    /**
     * Specifies a CSS class to be applied to the form item.
     */
    cssClass?: string;
    /**
     * Specifies the item&apos;s type. Set it to &apos;empty&apos; to create an empty item.
     */
    itemType?: DevExpress.ui.dxForm.FormItemType;
    /**
     * Specifies a name that identifies the form item.
     */
    name?: string;
    /**
     * Specifies whether or not the current form item is visible.
     */
    visible?: boolean;
    /**
     * Specifies the sequence number of the item in a form, group or tab.
     */
    visibleIndex?: number;
  }
  /**
   * @deprecated Use GroupItem instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxFormGroupItem {
    /**
     * Specifies whether or not all group item labels are aligned.
     */
    alignItemLabels?: boolean;
    /**
     * Specifies the group caption.
     */
    caption?: string;
    /**
     * The count of columns in the group layout.
     */
    colCount?: number;
    /**
     * Specifies the relation between the screen size qualifier and the number of columns in the grouped layout.
     */
    colCountByScreen?: any;
    /**
     * Specifies the number of columns spanned by the item.
     */
    colSpan?: number;
    /**
     * Specifies a CSS class to be applied to the form item.
     */
    cssClass?: string;
    /**
     * Specifies the item&apos;s type. Set it to &apos;group&apos; to create a group item.
     */
    itemType?: DevExpress.ui.dxForm.FormItemType;
    /**
     * Holds an array of form items displayed within the group.
     */
    items?: Array<DevExpress.ui.dxForm.Item>;
    /**
     * Specifies a name that identifies the form item.
     */
    name?: string;
    /**
     * A template to be used for rendering a group item.
     */
    template?:
      | DevExpress.core.template
      | ((
          data: DevExpress.ui.dxForm.GroupItemTemplateData,
          itemElement: DevExpress.core.DxElement
        ) => string | DevExpress.core.UserDefinedElement);
    /**
     * Specifies whether or not the current form item is visible.
     */
    visible?: boolean;
    /**
     * Specifies the sequence number of the item in a form, group or tab.
     */
    visibleIndex?: number;
  }
  /**
   * @deprecated use Properties instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxFormOptions extends WidgetOptions<dxForm> {
    /**
     * Specifies whether all item labels are aligned. Applies only if the labelMode is &apos;outside&apos;.
     */
    alignItemLabels?: boolean;
    /**
     * Specifies whether item labels in all groups are aligned. Applies only if the labelMode is &apos;outside&apos;.
     */
    alignItemLabelsInAllGroups?: boolean;
    /**
     * The count of columns in the form layout.
     */
    colCount?: number | DevExpress.common.Mode;
    /**
     * Specifies dependency between the screen factor and the count of columns in the form layout.
     */
    colCountByScreen?: any;
    /**
     * Specifies a function that customizes a form item after it has been created.
     */
    customizeItem?: (item: DevExpress.ui.dxForm.Item) => void;
    /**
     * Provides the Form&apos;s data. Gets updated every time form fields change.
     */
    formData?: any;
    /**
     * Holds an array of form items.
     */
    items?: Array<DevExpress.ui.dxForm.Item>;
    /**
     * Specifies the location of a label against the editor. Applies only if the labelMode is &apos;outside&apos;.
     */
    labelLocation?: DevExpress.ui.dxForm.LabelLocation;
    /**
     * Specifies a display mode for item labels.
     */
    labelMode?: DevExpress.ui.dxForm.FormLabelMode;
    /**
     * The minimum column width used for calculating column count in the form layout. Applies only if colCount property is &apos;auto&apos;.
     */
    minColWidth?: number;
    /**
     * A function that is executed when the Enter key has been pressed while an editor is focused.
     */
    onEditorEnterKey?: (e: DevExpress.ui.dxForm.EditorEnterKeyEvent) => void;
    /**
     * A function that is executed when the value of a formData object field is changed.
     */
    onFieldDataChanged?: (
      e: DevExpress.ui.dxForm.FieldDataChangedEvent
    ) => void;
    /**
     * The text displayed for optional fields.
     */
    optionalMark?: string;
    /**
     * Specifies whether all editors on the form are read-only. Applies only to non-templated items.
     */
    readOnly?: boolean;
    /**
     * The text displayed for required fields.
     */
    requiredMark?: string;
    /**
     * Specifies the message that is shown for end-users if a required field value is not specified.
     */
    requiredMessage?: string;
    /**
     * Specifies a function that categorizes screens by their width.
     */
    screenByWidth?: Function;
    /**
     * A Boolean value specifying whether to enable or disable form scrolling.
     */
    scrollingEnabled?: boolean;
    /**
     * Specifies whether or not a colon is displayed at the end of form labels.
     */
    showColonAfterLabel?: boolean;
    /**
     * Specifies whether or not the optional mark is displayed for optional fields.
     */
    showOptionalMark?: boolean;
    /**
     * Specifies whether or not the required mark is displayed for required fields.
     */
    showRequiredMark?: boolean;
    /**
     * Specifies whether or not the total validation summary is displayed on the form.
     */
    showValidationSummary?: boolean;
    /**
     * Gives a name to the internal validation group.
     */
    validationGroup?: string;
  }
  /**
   * @deprecated Use SimpleItem instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxFormSimpleItem {
    /**
     * Specifies the number of columns spanned by the item.
     */
    colSpan?: number;
    /**
     * Specifies a CSS class to be applied to the form item.
     */
    cssClass?: string;
    /**
     * Specifies the path to the formData object field bound to the current form item.
     */
    dataField?: string;
    /**
     * Configures the form item&apos;s editor.
     */
    editorOptions?: any;
    /**
     * Specifies which editor UI component is used to display and edit the form item value.
     */
    editorType?: DevExpress.ui.dxForm.FormItemComponent;
    /**
     * Specifies the help text displayed for the current form item.
     */
    helpText?: string;
    /**
     * Specifies whether the current form item is required.
     */
    isRequired?: boolean;
    /**
     * Specifies the item&apos;s type. Set it to &apos;simple&apos; to create a simple item.
     */
    itemType?: DevExpress.ui.dxForm.FormItemType;
    /**
     * Specifies properties for the form item label.
     */
    label?: {
      /**
       * Specifies the label&apos;s horizontal alignment. Applies only if the labelMode is &apos;outside&apos;.
       */
      alignment?: DevExpress.common.HorizontalAlignment;
      /**
       * Specifies the location of a label against the editor. Applies only if the labelMode is &apos;outside&apos;.
       */
      location?: DevExpress.ui.dxForm.LabelLocation;
      /**
       * Specifies whether or not a colon is displayed at the end of the current label.
       */
      showColon?: boolean;
      /**
       * Specifies the label text.
       */
      text?: string;
      /**
       * Specifies whether or not the label is visible.
       */
      visible?: boolean;
    };
    /**
     * Specifies a name that identifies the form item.
     */
    name?: string;
    /**
     * A template that can be used to replace the default editor with custom content.
     */
    template?:
      | DevExpress.core.template
      | ((
          data: DevExpress.ui.dxForm.SimpleItemTemplateData,
          itemElement: DevExpress.core.DxElement
        ) => string | DevExpress.core.UserDefinedElement);
    /**
     * An array of validation rules to be checked for the form item editor.
     */
    validationRules?: Array<
      | RequiredRule
      | NumericRule
      | RangeRule
      | StringLengthRule
      | CustomRule
      | CompareRule
      | PatternRule
      | EmailRule
      | AsyncRule
    >;
    /**
     * Specifies whether or not the current form item is visible.
     */
    visible?: boolean;
    /**
     * Specifies the sequence number of the item in a form, group or tab.
     */
    visibleIndex?: number;
  }
  /**
   * @deprecated Use TabbedItem instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxFormTabbedItem {
    /**
     * Specifies the number of columns spanned by the item.
     */
    colSpan?: number;
    /**
     * Specifies a CSS class to be applied to the form item.
     */
    cssClass?: string;
    /**
     * Specifies the item&apos;s type. Set it to &apos;tabbed&apos; to create a tabbed item.
     */
    itemType?: DevExpress.ui.dxForm.FormItemType;
    /**
     * Specifies a name that identifies the form item.
     */
    name?: string;
    /**
     * Holds a configuration object for the TabPanel UI component used to display the current form item.
     */
    tabPanelOptions?: dxTabPanelOptions;
    /**
     * An array of tab configuration objects.
     */
    tabs?: Array<{
      /**
       * Specifies whether or not labels of items displayed within the current tab are aligned.
       */
      alignItemLabels?: boolean;
      /**
       * Specifies a badge text for the tab.
       */
      badge?: string;
      /**
       * The count of columns in the tab layout.
       */
      colCount?: number;
      /**
       * Specifies the relation between the screen size qualifier and the number of columns in the tabbed layout.
       */
      colCountByScreen?: any;
      /**
       * Specifies whether the tab responds to user interaction.
       */
      disabled?: boolean;
      /**
       * Specifies the icon to be displayed on the tab.
       */
      icon?: string;
      /**
       * Holds an array of form items displayed within the tab.
       */
      items?: Array<DevExpress.ui.dxForm.Item>;
      /**
       * The template to be used for rendering the tab.
       */
      tabTemplate?:
        | DevExpress.core.template
        | ((
            tabData: any,
            tabIndex: number,
            tabElement: DevExpress.core.DxElement
          ) => any);
      /**
       * The template to be used for rendering the tab content.
       */
      template?:
        | DevExpress.core.template
        | ((
            tabData: any,
            tabIndex: number,
            tabElement: DevExpress.core.DxElement
          ) => any);
      /**
       * Specifies the tab title.
       */
      title?: string;
    }>;
    /**
     * Specifies whether or not the current form item is visible.
     */
    visible?: boolean;
    /**
     * Specifies the sequence number of the item in a form, group or tab.
     */
    visibleIndex?: number;
  }
  /**
   * The Gallery is a UI component that displays a collection of images in a carousel. The UI component is supplied with various navigation controls that allow a user to switch between images.
   */
  export class dxGallery<
    TItem extends DevExpress.ui.dxGallery.ItemLike = any,
    TKey = any
  > extends CollectionWidget<dxGalleryOptions<TItem, TKey>, TItem, TKey> {
    /**
     * Shows a specific image.
     */
    goToItem(
      itemIndex: number,
      animation: boolean
    ): DevExpress.core.utils.DxPromise<void>;
    /**
     * Shows the next image.
     */
    nextItem(animation: boolean): DevExpress.core.utils.DxPromise<void>;
    /**
     * Shows the previous image.
     */
    prevItem(animation: boolean): DevExpress.core.utils.DxPromise<void>;
  }
  module dxGallery {
    export type ContentReadyEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxGallery<TItem, TKey>>;
    export type DisposingEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxGallery<TItem, TKey>>;
    export type ExplicitTypes<TItem extends ItemLike, TKey> = {
      Properties: Properties<TItem, TKey>;
      ContentReadyEvent: ContentReadyEvent<TItem, TKey>;
      DisposingEvent: DisposingEvent<TItem, TKey>;
      InitializedEvent: InitializedEvent<TItem, TKey>;
      ItemClickEvent: ItemClickEvent<TItem, TKey>;
      ItemContextMenuEvent: ItemContextMenuEvent<TItem, TKey>;
      ItemHoldEvent: ItemHoldEvent<TItem, TKey>;
      ItemRenderedEvent: ItemRenderedEvent<TItem, TKey>;
      OptionChangedEvent: OptionChangedEvent<TItem, TKey>;
      SelectionChangedEvent: SelectionChangedEvent<TItem, TKey>;
    };
    export type InitializedEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.InitializedEventInfo<dxGallery<TItem, TKey>>;
    export type ItemClickEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.NativeEventInfo<
      dxGallery<TItem, TKey>,
      KeyboardEvent | MouseEvent | PointerEvent
    > &
      DevExpress.events.ItemInfo<TItem>;
    export type ItemContextMenuEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.NativeEventInfo<
      dxGallery<TItem, TKey>,
      MouseEvent | PointerEvent | TouchEvent
    > &
      DevExpress.events.ItemInfo<TItem>;
    export type ItemHoldEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.NativeEventInfo<
      dxGallery<TItem, TKey>,
      MouseEvent | PointerEvent | TouchEvent
    > &
      DevExpress.events.ItemInfo<TItem>;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    type ItemLike = string | Item | any;
    export type ItemRenderedEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxGallery<TItem, TKey>> &
      DevExpress.events.ItemInfo<TItem>;
    export type OptionChangedEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxGallery<TItem, TKey>> &
      DevExpress.events.ChangedOptionInfo;
    export type Properties<
      TItem extends ItemLike = any,
      TKey = any
    > = dxGalleryOptions<TItem, TKey>;
    export type SelectionChangedEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxGallery<TItem, TKey>> &
      DevExpress.ui.CollectionWidget.SelectionChangedInfo<TItem>;
  }
  /**
   * @deprecated Use Item instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxGalleryItem extends CollectionWidgetItem {
    /**
     * Specifies the text passed to the alt attribute of the image markup element.
     */
    imageAlt?: string;
    /**
     * Specifies the URL of the image displayed by the item.
     */
    imageSrc?: string;
  }
  /**
   * @deprecated use Properties instead
   */
  export interface dxGalleryOptions<
    TItem extends DevExpress.ui.dxGallery.ItemLike = any,
    TKey = any
  > extends CollectionWidgetOptions<dxGallery<TItem, TKey>, TItem, TKey> {
    /**
     * The time, in milliseconds, spent on slide animation.
     */
    animationDuration?: number;
    /**
     * Specifies whether or not to animate the displayed item change.
     */
    animationEnabled?: boolean;
    /**
     * Binds the UI component to data.
     */
    dataSource?: DevExpress.data.DataSource.DataSourceLike<TItem, TKey> | null;
    /**
     * Specifies whether the UI component can be focused using keyboard navigation.
     */
    focusStateEnabled?: boolean;
    /**
     * A Boolean value specifying whether or not to allow users to switch between items by clicking an indicator.
     */
    indicatorEnabled?: boolean;
    /**
     * Specifies the width of an area used to display a single image.
     */
    initialItemWidth?: number;
    /**
     * An array of items displayed by the UI component.
     */
    items?: Array<TItem>;
    /**
     * A Boolean value specifying whether or not to scroll back to the first item after the last item is swiped.
     */
    loop?: boolean;
    /**
     * Specifies the text or HTML markup displayed by the UI component if the item collection is empty.
     */
    noDataText?: string;
    /**
     * The index of the currently active gallery item.
     */
    selectedIndex?: number;
    /**
     * A Boolean value specifying whether or not to display an indicator that points to the selected gallery item.
     */
    showIndicator?: boolean;
    /**
     * A Boolean value that specifies the availability of the &apos;Forward&apos; and &apos;Back&apos; navigation buttons.
     */
    showNavButtons?: boolean;
    /**
     * The time interval in milliseconds, after which the gallery switches to the next item.
     */
    slideshowDelay?: number;
    /**
     * Specifies if the UI component stretches images to fit the total gallery width.
     */
    stretchImages?: boolean;
    /**
     * A Boolean value specifying whether or not to allow users to switch between items by swiping.
     */
    swipeEnabled?: boolean;
    /**
     * Specifies whether or not to display parts of previous and next images along the sides of the current image.
     */
    wrapAround?: boolean;
  }
  /**
   * The Gantt is a UI component that displays the task flow and dependencies between tasks.
   */
  export class dxGantt extends Widget<dxGanttOptions> {
    /**
     * Gets the task data.
     */
    getTaskData(key: any): any;
    /**
     * Gets the dependency data.
     */
    getDependencyData(key: any): any;
    /**
     * Gets the resource data.
     */
    getResourceData(key: any): any;
    /**
     * Gets the resource assignment data.
     */
    getResourceAssignmentData(key: any): any;
    /**
     * Inserts a new task.
     */
    insertTask(data: any): void;
    /**
     * Deletes a task.
     */
    deleteTask(key: any): void;
    /**
     * Updates the task data.
     */
    updateTask(key: any, data: any): void;
    /**
     * Inserts a new dependency.
     */
    insertDependency(data: any): void;
    /**
     * Deletes a dependency.
     */
    deleteDependency(key: any): void;
    /**
     * Inserts a new resource.
     */
    insertResource(data: any, taskKeys?: Array<any>): void;
    /**
     * Deletes a resource.
     */
    deleteResource(key: any): void;
    /**
     * Assigns a resource to a task.
     */
    assignResourceToTask(resourceKey: any, taskKey: any): void;
    /**
     * Removes a resource from the task.
     */
    unassignResourceFromTask(resourceKey: any, taskKey: any): void;
    /**
     * Gets resources assigned to a task.
     */
    getTaskResources(key: any): Array<any>;
    /**
     * Gets the keys of the visible tasks.
     */
    getVisibleTaskKeys(): Array<any>;
    /**
     * Gets the keys of the visible dependencies.
     */
    getVisibleDependencyKeys(): Array<any>;
    /**
     * Gets the keys of the visible resources.
     */
    getVisibleResourceKeys(): Array<any>;
    /**
     * Gets the keys of the visible resource assignments.
     */
    getVisibleResourceAssignmentKeys(): Array<any>;
    /**
     * Updates the dimensions of the UI component contents.
     */
    updateDimensions(): void;
    /**
     * Scrolls the Gantt chart to the specified date.
     */
    scrollToDate(date: Date | Number | string): void;
    /**
     * Invokes the &apos;Resource Manager&apos; dialog.
     */
    showResourceManagerDialog(): void;
    /**
     * Expands all tasks.
     */
    expandAll(): void;
    /**
     * Collapses all tasks.
     */
    collapseAll(): void;
    /**
     * Expands all tasks down to the specified hierarchical level.
     */
    expandAllToLevel(level: Number): void;
    /**
     * Expands a task&apos;s parent tasks.
     */
    expandToTask(key: any): void;
    /**
     * Collapses a task.
     */
    collapseTask(key: any): void;
    /**
     * Expands a task.
     */
    expandTask(key: any): void;
    /**
     * Reloads data and repaints the Gantt component.
     */
    refresh(): DevExpress.core.utils.DxPromise<void>;
    /**
     * Shows or hides task resources.
     */
    showResources(value: boolean): void;
    /**
     * Shows or hides dependencies between tasks.
     */
    showDependencies(value: boolean): void;
    /**
     * Zooms in the Gantt chart.
     */
    zoomIn(): void;
    /**
     * Zooms out the Gantt chart.
     */
    zoomOut(): void;
    /**
     * Removes all resources from the task.
     */
    unassignAllResourcesFromTask(taskKey: any): void;
    /**
     * Invokes the &apos;Task Details&apos; dialog.
     */
    showTaskDetailsDialog(taskKey: any): void;
  }
  module dxGantt {
    export type Column<TRowData = any, TKey = any> = dxGanttColumn<
      TRowData,
      TKey
    >;
    export type ContentReadyEvent = DevExpress.events.EventInfo<dxGantt>;
    export type ContextMenuPreparingEvent = DevExpress.events.Cancelable & {
      readonly component?: dxGantt;
      readonly element?: DevExpress.core.DxElement;
      readonly event?: DevExpress.events.DxEvent<
        PointerEvent | MouseEvent | TouchEvent
      >;
      readonly targetKey?: any;
      readonly targetType?: string;
      readonly data?: any;
      readonly items?: Array<any>;
    };
    export type CustomCommandEvent = {
      readonly component?: dxGantt;
      readonly element?: DevExpress.core.DxElement;
      readonly name: string;
    };
    export type DependencyDeletedEvent =
      DevExpress.events.EventInfo<dxGantt> & {
        readonly values: any;
        readonly key: any;
      };
    export type DependencyDeletingEvent = DevExpress.events.Cancelable &
      DevExpress.events.EventInfo<dxGantt> & {
        readonly values: any;
        readonly key: any;
      };
    export type DependencyInsertedEvent =
      DevExpress.events.EventInfo<dxGantt> & {
        readonly values: any;
        readonly key: any;
      };
    export type DependencyInsertingEvent = DevExpress.events.Cancelable &
      DevExpress.events.EventInfo<dxGantt> & {
        readonly values: any;
      };
    export type DisposingEvent = DevExpress.events.EventInfo<dxGantt>;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export type GanttPdfExportDateRange = 'all' | 'visible';
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export type GanttPdfExportMode = 'all' | 'treeList' | 'chart';
    export type GanttPredefinedContextMenuItem =
      | 'undo'
      | 'redo'
      | 'expandAll'
      | 'collapseAll'
      | 'addTask'
      | 'deleteTask'
      | 'zoomIn'
      | 'zoomOut'
      | 'deleteDependency'
      | 'taskDetails'
      | 'resourceManager';
    export type GanttPredefinedToolbarItem =
      | 'separator'
      | 'undo'
      | 'redo'
      | 'expandAll'
      | 'collapseAll'
      | 'addTask'
      | 'deleteTask'
      | 'zoomIn'
      | 'zoomOut'
      | 'taskDetails'
      | 'fullScreen'
      | 'resourceManager'
      | 'showResources'
      | 'showDependencies';
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export type GanttRenderScaleType =
      | 'minutes'
      | 'hours'
      | 'sixHours'
      | 'days'
      | 'weeks'
      | 'months'
      | 'quarters'
      | 'years'
      | 'fiveYears';
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export type GanttScaleType =
      | 'auto'
      | 'minutes'
      | 'hours'
      | 'sixHours'
      | 'days'
      | 'weeks'
      | 'months'
      | 'quarters'
      | 'years';
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export type GanttTaskTitlePosition = 'inside' | 'outside' | 'none';
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxGantt>;
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxGantt> &
      DevExpress.events.ChangedOptionInfo;
    export type ProgressTooltipTemplateData = {
      readonly progress: number;
    };
    export type Properties = dxGanttOptions;
    export type ResourceAssignedEvent = DevExpress.events.EventInfo<dxGantt> & {
      readonly values: any;
      readonly key: any;
    };
    export type ResourceAssigningEvent = DevExpress.events.Cancelable &
      DevExpress.events.EventInfo<dxGantt> & {
        readonly values: any;
      };
    export type ResourceDeletedEvent = DevExpress.events.EventInfo<dxGantt> & {
      readonly values: any;
      readonly key: any;
    };
    export type ResourceDeletingEvent = DevExpress.events.Cancelable &
      DevExpress.events.EventInfo<dxGantt> & {
        readonly values: any;
        readonly key: any;
      };
    export type ResourceInsertedEvent = DevExpress.events.EventInfo<dxGantt> & {
      readonly values: any;
      readonly key: any;
    };
    export type ResourceInsertingEvent = DevExpress.events.Cancelable &
      DevExpress.events.EventInfo<dxGantt> & {
        readonly values: any;
      };
    export type ResourceManagerDialogShowingEvent =
      DevExpress.events.Cancelable &
        DevExpress.events.EventInfo<dxGantt> & {
          readonly values: Array<any>;
        };
    export type ResourceUnassignedEvent =
      DevExpress.events.EventInfo<dxGantt> & {
        readonly values: any;
        readonly key: any;
      };
    export type ResourceUnassigningEvent = DevExpress.events.Cancelable &
      DevExpress.events.EventInfo<dxGantt> & {
        readonly values: any;
        readonly key: any;
      };
    export type ScaleCellPreparedEvent =
      DevExpress.events.InitializedEventInfo<dxGantt> & {
        readonly scaleIndex: number;
        readonly scaleType: GanttRenderScaleType;
        readonly scaleElement: DevExpress.core.DxElement;
        readonly separatorElement: DevExpress.core.DxElement;
        readonly startDate: Date;
        readonly endDate: Date;
      };
    export type SelectionChangedEvent = DevExpress.events.EventInfo<dxGantt> & {
      readonly selectedRowKey?: any;
    };
    export type TaskClickEvent = DevExpress.events.NativeEventInfo<
      dxGantt,
      PointerEvent | MouseEvent
    > & {
      readonly key?: any;
      readonly data?: any;
    };
    export type TaskContentTemplateData = {
      readonly cellSize: any;
      readonly isMilestone: boolean;
      readonly taskData: any;
      readonly taskHTML: any;
      readonly taskPosition: any;
      readonly taskResources: Array<any>;
      readonly taskSize: any;
    };
    export type TaskDblClickEvent = DevExpress.events.Cancelable &
      DevExpress.events.NativeEventInfo<dxGantt, PointerEvent | MouseEvent> & {
        readonly key?: any;
        readonly data?: any;
      };
    export type TaskDeletedEvent = DevExpress.events.EventInfo<dxGantt> & {
      readonly values: any;
      readonly key: any;
    };
    export type TaskDeletingEvent = DevExpress.events.Cancelable &
      DevExpress.events.EventInfo<dxGantt> & {
        readonly values: any;
        readonly key: any;
      };
    export type TaskEditDialogShowingEvent = DevExpress.events.Cancelable &
      DevExpress.events.EventInfo<dxGantt> & {
        readonly values: any;
        readonly key: any;
        readonly readOnlyFields?: Array<string>;
        readonly hiddenFields?: Array<string>;
      };
    export type TaskInsertedEvent = DevExpress.events.EventInfo<dxGantt> & {
      readonly values?: any;
      readonly key: any;
    };
    export type TaskInsertingEvent = DevExpress.events.Cancelable &
      DevExpress.events.EventInfo<dxGantt> & {
        readonly values: any;
      };
    export type TaskMovingEvent = DevExpress.events.Cancelable &
      DevExpress.events.EventInfo<dxGantt> & {
        readonly newValues: any;
        readonly values: any;
        readonly key: any;
      };
    export type TaskUpdatedEvent = DevExpress.events.EventInfo<dxGantt> & {
      readonly values: any;
      readonly key: any;
    };
    export type TaskUpdatingEvent = DevExpress.events.Cancelable &
      DevExpress.events.EventInfo<dxGantt> & {
        readonly newValues: any;
        readonly values: any;
        readonly key: any;
      };
    export type TimeTooltipTemplateData = {
      readonly start: Date;
      readonly end: Date;
    };
  }
  /**
   * @deprecated Use the Column type instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export type dxGanttColumn<TRowData = any, TKey = any> = DevExpress.core.Skip<
    dxGanttColumnBlank<TRowData, TKey>,
    | 'allowEditing'
    | 'allowFixing'
    | 'allowHiding'
    | 'allowReordering'
    | 'allowResizing'
    | 'allowSearch'
    | 'buttons'
    | 'columns'
    | 'editCellTemplate'
    | 'editorOptions'
    | 'fixed'
    | 'fixedPosition'
    | 'formItem'
    | 'hidingPriority'
    | 'isBand'
    | 'lookup'
    | 'name'
    | 'ownerBand'
    | 'renderAsync'
    | 'setCellValue'
    | 'showEditorAlways'
    | 'showInColumnChooser'
    | 'type'
    | 'validationRules'
  >;
  /**
   * 
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  interface dxGanttColumnBlank<TRowData = any, TKey = any>
    extends DevExpress.ui.dxTreeList.Column<TRowData, TKey> {
    /**
     * 
     */
    allowEditing: any;
    /**
     * 
     */
    allowFixing: any;
    /**
     * 
     */
    allowHiding: any;
    /**
     * 
     */
    allowReordering: any;
    /**
     * 
     */
    allowResizing: any;
    /**
     * 
     */
    allowSearch: any;
    /**
     * 
     */
    buttons: any;
    /**
     * 
     */
    columns: any;
    /**
     * 
     */
    editorOptions: any;
    /**
     * 
     */
    editCellTemplate: any;
    /**
     * 
     */
    fixed: any;
    /**
     * 
     */
    fixedPosition: any;
    /**
     * 
     */
    formItem: any;
    /**
     * 
     */
    hidingPriority: any;
    /**
     * 
     */
    isBand: any;
    /**
     * 
     */
    lookup: any;
    /**
     * 
     */
    name: any;
    /**
     * 
     */
    ownerBand: any;
    /**
     * 
     */
    renderAsync: any;
    /**
     * 
     */
    setCellValue: any;
    /**
     * 
     */
    showEditorAlways: any;
    /**
     * 
     */
    showInColumnChooser: any;
    /**
     * 
     */
    validationRules: any;
    /**
     * 
     */
    type: any;
  }
  /**
   * Configures the context menu.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxGanttContextMenu {
    /**
     * Specifies whether the context menu is enabled in the UI component.
     */
    enabled?: boolean;
    /**
     * Configures context menu item settings.
     */
    items?: Array<
      | DevExpress.ui.dxGantt.ContextMenuItem
      | DevExpress.ui.dxGantt.GanttPredefinedContextMenuItem
    >;
  }
  /**
   * @deprecated Use ContextMenuItem instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxGanttContextMenuItem
    extends DevExpress.ui.dxContextMenu.Item {
    /**
     * Specifies the context menu item name.
     */
    name?: DevExpress.ui.dxGantt.GanttPredefinedContextMenuItem | string;
  }
  /**
   * Configures the filter row.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxGanttFilterRow {
    /**
     * Specifies the null text for the editor that sets the end of a range for the &apos;between&apos; filter operation.
     */
    betweenEndText?: string;
    /**
     * Specifies the null text for the editor that sets the start of a range for the &apos;between&apos; filter operation.
     */
    betweenStartText?: string;
    /**
     * Specifies descriptions for filter operations in the filter list.
     */
    operationDescriptions?: dxGanttFilterRowOperationDescriptions;
    /**
     * Specifies text for the &apos;reset&apos; operation.
     */
    resetOperationText?: string;
    /**
     * Specifies text for the &apos;All&apos; filter operation.
     */
    showAllText?: string;
    /**
     * Specifies whether to display filter icons.
     */
    showOperationChooser?: boolean;
    /**
     * Specifies whether the filter row is visible.
     */
    visible?: boolean;
  }
  /**
   * Contains descriptions for filter operations in the filter list.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxGanttFilterRowOperationDescriptions {
    /**
     * Text for the &apos;Between&apos; operation.
     */
    between?: string;
    /**
     * Text for the &apos;Contains&apos; operation.
     */
    contains?: string;
    /**
     * Text for the &apos;Ends with&apos; operation.
     */
    endsWith?: string;
    /**
     * Text for the &apos;Equals&apos; operation.
     */
    equal?: string;
    /**
     * Text for the &apos;Greater than&apos; operation.
     */
    greaterThan?: string;
    /**
     * Text for the &apos;Greater than or equal to&apos; operation.
     */
    greaterThanOrEqual?: string;
    /**
     * Text for the &apos;Less than&apos; operation.
     */
    lessThan?: string;
    /**
     * Text for the &apos;Less than or equal to&apos; operation.
     */
    lessThanOrEqual?: string;
    /**
     * Text for the &apos;Does not contain&apos; operation.
     */
    notContains?: string;
    /**
     * Text for the &apos;Does not equal&apos; operation.
     */
    notEqual?: string;
    /**
     * Text for the &apos;Starts with&apos; operation.
     */
    startsWith?: string;
  }
  /**
   * Configures the header filter.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxGanttHeaderFilter {
    /**
     * Specifies whether to enable searching in the header filter.
     */
    allowSearch?: boolean;
    /**
     * Specifies the height of the popup window that contains values for filtering.
     */
    height?: number;
    /**
     * Specifies a delay in milliseconds between typing a search string and the search execution.
     */
    searchTimeout?: number;
    /**
     * Contains properties that specify text for various elements of the popup window.
     */
    texts?: dxGanttHeaderFilterTexts;
    /**
     * Specifies whether to show header filter icons.
     */
    visible?: boolean;
    /**
     * Specifies the width of the popup window that contains values for filtering.
     */
    width?: number;
  }
  /**
   * 
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxGanttHeaderFilterTexts {
    /**
     * Specifies text for the &apos;Cancel&apos; button in the popup window.
     */
    cancel?: string;
    /**
     * Specifies text for the &apos;(Blank)&apos; item in the popup window.
     */
    emptyValue?: string;
    /**
     * Specifies text for the &apos;OK&apos; button in the popup window.
     */
    ok?: string;
  }
  /**
   * @deprecated use Properties instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxGanttOptions extends WidgetOptions<dxGantt> {
    /**
     * Specifies whether users can select tasks in the Gantt.
     */
    allowSelection?: boolean;
    /**
     * An array of columns in the Gantt.
     */
    columns?: Array<DevExpress.ui.dxGantt.Column | string>;
    /**
     * Configures dependencies.
     */
    dependencies?: {
      /**
       * Binds the UI component to the data source which contains dependencies.
       */
      dataSource?: DevExpress.data.DataSource.DataSourceLike<any> | null;
      /**
       * Specifies the data field that provides keys for dependencies.
       */
      keyExpr?: string | Function;
      /**
       * Specifies the data field that provides predecessor IDs.
       */
      predecessorIdExpr?: string | Function;
      /**
       * Specifies the data field that provides successor IDs.
       */
      successorIdExpr?: string | Function;
      /**
       * Specifies the data field that provides dependency types.
       */
      typeExpr?: string | Function;
    };
    /**
     * Configures edit properties.
     */
    editing?: {
      /**
       * Specifies whether a user can add dependencies.
       */
      allowDependencyAdding?: boolean;
      /**
       * Specifies whether a user can delete dependencies.
       */
      allowDependencyDeleting?: boolean;
      /**
       * Specifies whether a user can add resources. tasks.
       */
      allowResourceAdding?: boolean;
      /**
       * Specifies whether a user can delete resources.
       */
      allowResourceDeleting?: boolean;
      /**
       * For internal use only.
       */
      allowResourceUpdating?: boolean;
      /**
       * Specifies whether a user can add tasks.
       */
      allowTaskAdding?: boolean;
      /**
       * Specifies whether a user can delete tasks.
       */
      allowTaskDeleting?: boolean;
      /**
       * Specifies whether users can update a task&apos;s resources.
       */
      allowTaskResourceUpdating?: boolean;
      /**
       * Specifies whether a user can update tasks.
       */
      allowTaskUpdating?: boolean;
      /**
       * Specifies whether a user can edit tasks, resources and dependencies.
       */
      enabled?: boolean;
    };
    /**
     * Configures validation properties.
     */
    validation?: {
      /**
       * Enables task dependencies validation.
       */
      validateDependencies?: boolean;
      /**
       * Specifies whether to recalculate the parent task&apos;s duration and progress when its child tasks are modified.
       */
      autoUpdateParentTasks?: boolean;
      /**
       * Specifies whether users can move or resize a predecessor to change a gap before a successor according to the dependency rules.
       */
      enablePredecessorGap?: boolean;
    };
    /**
     * Configures sort settings.
     */
    sorting?: dxGanttSorting;
    /**
     * Configures filter row settings.
     */
    filterRow?: dxGanttFilterRow;
    /**
     * Configures the header filter settings.
     */
    headerFilter?: dxGanttHeaderFilter;
    /**
     * A function that is executed after users select a task or clear its selection.
     */
    onSelectionChanged?: (
      e: DevExpress.ui.dxGantt.SelectionChangedEvent
    ) => void;
    /**
     * A function that is executed after a custom command item was clicked. Allows you to implement a custom command&apos;s functionality.
     */
    onCustomCommand?: (e: DevExpress.ui.dxGantt.CustomCommandEvent) => void;
    /**
     * A function that is executed before the context menu is rendered.
     */
    onContextMenuPreparing?: (
      e: DevExpress.ui.dxGantt.ContextMenuPreparingEvent
    ) => void;
    /**
     * A function that is executed before a task is inserted.
     */
    onTaskInserting?: (e: DevExpress.ui.dxGantt.TaskInsertingEvent) => void;
    /**
     * A function that is executed when a task is inserted.
     */
    onTaskInserted?: (e: DevExpress.ui.dxGantt.TaskInsertedEvent) => void;
    /**
     * A function that is executed before a task is deleted.
     */
    onTaskDeleting?: (e: DevExpress.ui.dxGantt.TaskDeletingEvent) => void;
    /**
     * A function that is executed when a task is deleted.
     */
    onTaskDeleted?: (e: DevExpress.ui.dxGantt.TaskDeletedEvent) => void;
    /**
     * A function that is executed before a task is updated.
     */
    onTaskUpdating?: (e: DevExpress.ui.dxGantt.TaskUpdatingEvent) => void;
    /**
     * A function that is executed when a task is updated.
     */
    onTaskUpdated?: (e: DevExpress.ui.dxGantt.TaskUpdatedEvent) => void;
    /**
     * A function that is executed before a task is moved.
     */
    onTaskMoving?: (e: DevExpress.ui.dxGantt.TaskMovingEvent) => void;
    /**
     * A function that is executed before the edit dialog is shown.
     */
    onTaskEditDialogShowing?: (
      e: DevExpress.ui.dxGantt.TaskEditDialogShowingEvent
    ) => void;
    /**
     * A function that is executed before the Resource Manager dialog is shown.
     */
    onResourceManagerDialogShowing?: (
      e: DevExpress.ui.dxGantt.ResourceManagerDialogShowingEvent
    ) => void;
    /**
     * A function that is executed before a dependency is inserted.
     */
    onDependencyInserting?: (
      e: DevExpress.ui.dxGantt.DependencyInsertingEvent
    ) => void;
    /**
     * A function that is executed when a dependency is inserted.
     */
    onDependencyInserted?: (
      e: DevExpress.ui.dxGantt.DependencyInsertedEvent
    ) => void;
    /**
     * A function that is executed before a dependency is deleted.
     */
    onDependencyDeleting?: (
      e: DevExpress.ui.dxGantt.DependencyDeletingEvent
    ) => void;
    /**
     * A function that is executed when a dependency is deleted.
     */
    onDependencyDeleted?: (
      e: DevExpress.ui.dxGantt.DependencyDeletedEvent
    ) => void;
    /**
     * A function that is executed before a resource is inserted.
     */
    onResourceInserting?: (
      e: DevExpress.ui.dxGantt.ResourceInsertingEvent
    ) => void;
    /**
     * A function that is executed when a resource is inserted.
     */
    onResourceInserted?: (
      e: DevExpress.ui.dxGantt.ResourceInsertedEvent
    ) => void;
    /**
     * A function that is executed before a resource is deleted.
     */
    onResourceDeleting?: (
      e: DevExpress.ui.dxGantt.ResourceDeletingEvent
    ) => void;
    /**
     * A function that is executed when a resource is deleted.
     */
    onResourceDeleted?: (e: DevExpress.ui.dxGantt.ResourceDeletedEvent) => void;
    /**
     * A function that is executed before a resource is assigned to a task.
     */
    onResourceAssigning?: (
      e: DevExpress.ui.dxGantt.ResourceAssigningEvent
    ) => void;
    /**
     * A function that is executed when a resource is assigned to a task.
     */
    onResourceAssigned?: (
      e: DevExpress.ui.dxGantt.ResourceAssignedEvent
    ) => void;
    /**
     * A function that is executed before a resource is unassigned from a task.
     */
    onResourceUnassigning?: (
      e: DevExpress.ui.dxGantt.ResourceUnassigningEvent
    ) => void;
    /**
     * A function that is executed when a resource is unassigned from a task.
     */
    onResourceUnassigned?: (
      e: DevExpress.ui.dxGantt.ResourceUnassignedEvent
    ) => void;
    /**
     * A function that is executed when a user clicks a task.
     */
    onTaskClick?: (e: DevExpress.ui.dxGantt.TaskClickEvent) => void;
    /**
     * A function that is executed when a user double-clicks a task.
     */
    onTaskDblClick?: (e: DevExpress.ui.dxGantt.TaskDblClickEvent) => void;
    /**
     * 
     */
    onScaleCellPrepared?: (
      e: DevExpress.ui.dxGantt.ScaleCellPreparedEvent
    ) => void;

    /**
     * Configures resource assignments.
     */
    resourceAssignments?: {
      /**
       * Binds the UI component to the data source, which contains resource assignments.
       */
      dataSource?: DevExpress.data.DataSource.DataSourceLike<any> | null;
      /**
       * Specifies the data field that provides keys for resource assignments.
       */
      keyExpr?: string | Function;
      /**
       * Specifies the data field that provides resource IDs.
       */
      resourceIdExpr?: string | Function;
      /**
       * Specifies the data field that provides task IDs.
       */
      taskIdExpr?: string | Function;
    };
    /**
     * Configures task resources.
     */
    resources?: {
      /**
       * Specifies the data field that provides resources&apos; color.
       */
      colorExpr?: string | Function;
      /**
       * Binds the UI component to the data source, which contains resources.
       */
      dataSource?: DevExpress.data.DataSource.DataSourceLike<any> | null;
      /**
       * Specifies the data field that provides keys for resources.
       */
      keyExpr?: string | Function;
      /**
       * Specifies the data field that provides resource texts.
       */
      textExpr?: string | Function;
    };
    /**
     * Specifies the zoom level of tasks in the Gantt chart.
     */
    scaleType?: DevExpress.ui.dxGantt.GanttScaleType;
    /**
     * Configures zoom range settings.
     */
    scaleTypeRange?: {
      /**
       * Specifies the minimum zoom level of tasks in the Gantt chart.
       */
      min?: DevExpress.ui.dxGantt.GanttScaleType;
      /**
       * Specifies the maximum zoom level of tasks in the Gantt chart.
       */
      max?: DevExpress.ui.dxGantt.GanttScaleType;
    };
    /**
     * Allows you to select a row or determine which row is selected.
     */
    selectedRowKey?: any;
    /**
     * Specifies whether to display task resources.
     */
    showResources?: boolean;
    /**
     * Specifies whether to display dependencies between tasks.
     */
    showDependencies?: boolean;
    /**
     * Specifies whether to show/hide horizontal faint lines that separate tasks.
     */
    showRowLines?: boolean;
    /**
     * Specifies the width of the task list in pixels.
     */
    taskListWidth?: number;
    /**
     * Specifies a task&apos;s title position.
     */
    taskTitlePosition?: DevExpress.ui.dxGantt.GanttTaskTitlePosition;
    /**
     * Specifies the first day of a week.
     */
    firstDayOfWeek?: DevExpress.common.FirstDayOfWeek;
    /**
     * Configures tasks.
     */
    tasks?: {
      /**
       * Specifies the data field that provides tasks&apos; color.
       */
      colorExpr?: string | Function;
      /**
       * Binds the UI component to the data source which contains tasks.
       */
      dataSource?: DevExpress.data.DataSource.DataSourceLike<any> | null;
      /**
       * Specifies the data field that provides tasks&apos; end dates.
       */
      endExpr?: string | Function;
      /**
       * Specifies the data field that provides keys for tasks.
       */
      keyExpr?: string | Function;
      /**
       * Specifies the data field that provides tasks&apos; parent IDs.
       */
      parentIdExpr?: string | Function;
      /**
       * Specifies the data field that provides tasks&apos; progress.
       */
      progressExpr?: string | Function;
      /**
       * Specifies the data field that provides tasks&apos; start dates.
       */
      startExpr?: string | Function;
      /**
       * Specifies the data field that provides task titles.
       */
      titleExpr?: string | Function;
    };
    /**
     * Configures toolbar settings.
     */
    toolbar?: dxGanttToolbar;
    /**
     * Configures the context menu settings.
     */
    contextMenu?: dxGanttContextMenu;
    /**
     * Configures strip lines.
     */
    stripLines?: Array<dxGanttStripLine>;
    /**
     * Specifies custom content for the task tooltip.
     */
    taskTooltipContentTemplate?:
      | DevExpress.core.template
      | ((
          container: DevExpress.core.DxElement,
          task: any
        ) => string | DevExpress.core.UserDefinedElement);
    /**
     * Specifies custom content for the tooltip that displays the task&apos;s start and end time while the task is resized in the UI.
     */
    taskTimeTooltipContentTemplate?:
      | DevExpress.core.template
      | ((
          container: DevExpress.core.DxElement,
          item: DevExpress.ui.dxGantt.TimeTooltipTemplateData
        ) => string | DevExpress.core.UserDefinedElement);
    /**
     * Specifies custom content for the tooltip that displays the task&apos;s progress while the progress handler is resized in the UI.
     */
    taskProgressTooltipContentTemplate?:
      | DevExpress.core.template
      | ((
          container: DevExpress.core.DxElement,
          item: DevExpress.ui.dxGantt.ProgressTooltipTemplateData
        ) => string | DevExpress.core.UserDefinedElement);
    /**
     * Specifies custom content for the task.
     */
    taskContentTemplate?:
      | DevExpress.core.template
      | ((
          container: DevExpress.core.DxElement,
          item: DevExpress.ui.dxGantt.TaskContentTemplateData
        ) => string | DevExpress.core.UserDefinedElement);
    /**
     * Specifies the root task&apos;s identifier.
     */
    rootValue?: any;
    /**
     * Specifies the start date of the date interval in the Gantt chart.
     */
    startDateRange?: Date;
    /**
     * Specifies the end date of the date interval in the Gantt chart.
     */
    endDateRange?: Date;
  }
  /**
   * Configures sorting.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxGanttSorting {
    /**
     * Specifies text for the context menu item that sets an ascending sort order in a column.
     */
    ascendingText?: string;
    /**
     * Specifies text for the context menu item that clears sorting settings for a column.
     */
    clearText?: string;
    /**
     * Specifies text for the context menu item that sets a descending sort order in a column.
     */
    descendingText?: string;
    /**
     * Specifies sort mode.
     */
    mode?: DevExpress.common.SingleMultipleOrNone | string;
    /**
     * Specifies whether to display sort indexes in column headers. Applies only when sorting.mode is &apos;multiple&apos; and data is sorted by two or more columns.
     */
    showSortIndexes?: boolean;
  }
  /**
   * Configures a strip line.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxGanttStripLine {
    /**
     * Specifies the name of the cascading style sheet (CSS) class associated with the strip line.
     */
    cssClass?: string;
    /**
     * Specifies the end point of the strip line.
     */
    end?: Date | number | string | (() => Date | number | string);
    /**
     * Specifies the start point of the strip line.
     */
    start?: Date | number | string | (() => Date | number | string);
    /**
     * Specifies the strip line&apos;s title.
     */
    title?: string;
  }
  /**
   * Configures the toolbar.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxGanttToolbar {
    /**
     * Configures toolbar items&apos; settings.
     */
    items?: Array<
      | DevExpress.ui.dxGantt.ToolbarItem
      | DevExpress.ui.dxGantt.GanttPredefinedToolbarItem
    >;
  }
  /**
   * @deprecated Use ToolbarItem instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxGanttToolbarItem extends DevExpress.ui.dxToolbar.Item {
    /**
     * Specifies the toolbar item&apos;s name.
     */
    name?: DevExpress.ui.dxGantt.GanttPredefinedToolbarItem | string;
    /**
     * Specifies the toolbar item&apos;s location.
     */
    location?: DevExpress.common.ToolbarItemLocation;
  }
  /**
   * HtmlEditor is a WYSIWYG editor that allows you to format textual and visual content and to output it in HTML or Markdown. HtmlEditor is built on top of and requires the DevExtreme Quill.
   */
  export class dxHtmlEditor extends Editor<dxHtmlEditorOptions> {
    /**
     * Removes focus from the content field of the editor.
     */
    blur(): void;
    /**
     * Clears the history of changes.
     */
    clearHistory(): void;
    /**
     * Deletes content from the given range.
     */
    delete(index: number, length: number): void;
    /**
     * Applies a format to the selected content. Cannot be used with embedded formats.
     */
    format(
      formatName: DevExpress.ui.dxHtmlEditor.HtmlEditorFormat | string,
      formatValue: any
    ): void;
    /**
     * Applies a single block format to all lines in the given range.
     */
    formatLine(
      index: number,
      length: number,
      formatName: DevExpress.ui.dxHtmlEditor.HtmlEditorFormat | string,
      formatValue: any
    ): void;
    /**
     * Applies several block formats to all lines in the given range.
     */
    formatLine(index: number, length: number, formats: any): void;
    /**
     * Applies a single text format to all characters in the given range.
     */
    formatText(
      index: number,
      length: number,
      formatName: DevExpress.ui.dxHtmlEditor.HtmlEditorFormat | string,
      formatValue: any
    ): void;
    /**
     * Applies several text formats to all characters in the given range.
     */
    formatText(index: number, length: number, formats: any): void;
    /**
     * Gets a format, module, or Parchment.
     */
    get(componentPath: string): any;
    /**
     * Retrieves the pixel position and size of a selection at a specified location.
     */
    getBounds(index: number, length: number): any;
    /**
     * Retrieves formatting of the text within the current selection range.
     */
    getFormat(): any;
    /**
     * Gets formats applied to the content in the specified range.
     */
    getFormat(index: number, length: number): any;
    /**
     * Gets the entire content&apos;s length.
     */
    getLength(): number;
    /**
     * Gets the instance of a module.
     */
    getModule(moduleName: string): any;
    /**
     * Gets the DevExtreme Quill&apos;s instance.
     */
    getQuillInstance(): any;
    /**
     * Gets the selected content&apos;s position and length.
     */
    getSelection(focus?: boolean | undefined): any;
    /**
     * Retrieves text content from the HtmlEditor.
     */
    getText(index: number, length: number): string;
    /**
     * Inserts an embedded content at the specified position.
     */
    insertEmbed(index: number, type: string, config: any): void;
    /**
     * Inserts text into the HtmlEditor.
     */
    insertText(
      index: number,
      text: string,
      formatName: DevExpress.ui.dxHtmlEditor.HtmlEditorFormat | string,
      formatValue: any
    ): void;
    /**
     * Inserts formatted text at the specified position. Used with all formats except embedded.
     */
    insertText(index: number, text: string, formats: any): void;
    /**
     * Reapplies the most recent undone change. Repeated calls reapply preceding undone changes.
     */
    redo(): void;
    /**
     * Registers custom formats and modules.
     */
    register(modules: any): void;
    /**
     * Removes all formatting and embedded content from the specified range.
     */
    removeFormat(index: number, length: number): void;
    /**
     * Selects and highlights content in the specified range.
     */
    setSelection(index: number, length: number): void;
    /**
     * Reverses the most recent change. Repeated calls reverse preceding changes.
     */
    undo(): void;
  }
  module dxHtmlEditor {
    export type ContentReadyEvent = DevExpress.events.EventInfo<dxHtmlEditor>;
    export type DisposingEvent = DevExpress.events.EventInfo<dxHtmlEditor>;
    export type FocusInEvent = DevExpress.events.NativeEventInfo<
      dxHtmlEditor,
      FocusEvent
    >;
    export type FocusOutEvent = DevExpress.events.NativeEventInfo<
      dxHtmlEditor,
      FocusEvent
    >;
    export type HtmlEditorFormat =
      | 'background'
      | 'bold'
      | 'color'
      | 'font'
      | 'italic'
      | 'link'
      | 'size'
      | 'strike'
      | 'script'
      | 'underline'
      | 'blockquote'
      | 'header'
      | 'indent'
      | 'list'
      | 'align'
      | 'code-block';
    export type HtmlEditorImageUploadMode = 'base64' | 'server' | 'both';
    export type HtmlEditorImageUploadTab = 'url' | 'file';
    export type HtmlEditorPredefinedContextMenuItem =
      | 'background'
      | 'bold'
      | 'color'
      | 'font'
      | 'italic'
      | 'link'
      | 'image'
      | 'strike'
      | 'subscript'
      | 'superscript'
      | 'underline'
      | 'blockquote'
      | 'increaseIndent'
      | 'decreaseIndent'
      | 'orderedList'
      | 'bulletList'
      | 'alignLeft'
      | 'alignCenter'
      | 'alignRight'
      | 'alignJustify'
      | 'codeBlock'
      | 'variable'
      | 'undo'
      | 'redo'
      | 'clear'
      | 'insertTable'
      | 'insertHeaderRow'
      | 'insertRowAbove'
      | 'insertRowBelow'
      | 'insertColumnLeft'
      | 'insertColumnRight'
      | 'deleteColumn'
      | 'deleteRow'
      | 'deleteTable'
      | 'cellProperties'
      | 'tableProperties';
    export type HtmlEditorPredefinedToolbarItem =
      | 'background'
      | 'bold'
      | 'color'
      | 'font'
      | 'italic'
      | 'link'
      | 'image'
      | 'size'
      | 'strike'
      | 'subscript'
      | 'superscript'
      | 'underline'
      | 'blockquote'
      | 'header'
      | 'increaseIndent'
      | 'decreaseIndent'
      | 'orderedList'
      | 'bulletList'
      | 'alignLeft'
      | 'alignCenter'
      | 'alignRight'
      | 'alignJustify'
      | 'codeBlock'
      | 'variable'
      | 'separator'
      | 'undo'
      | 'redo'
      | 'clear'
      | 'cellProperties'
      | 'tableProperties'
      | 'insertTable'
      | 'insertHeaderRow'
      | 'insertRowAbove'
      | 'insertRowBelow'
      | 'insertColumnLeft'
      | 'insertColumnRight'
      | 'deleteColumn'
      | 'deleteRow'
      | 'deleteTable';
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxHtmlEditor>;
    export type MarkupType = 'html' | 'markdown';
    export interface MentionTemplateData {
      readonly marker: string;
      readonly id?: string | number;
      readonly value?: any;
    }
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxHtmlEditor> &
      DevExpress.events.ChangedOptionInfo;
    export type Properties = dxHtmlEditorOptions;
    export type ValueChangedEvent = DevExpress.events.NativeEventInfo<
      dxHtmlEditor,
      KeyboardEvent | ClipboardEvent | Event
    > &
      DevExpress.ui.Editor.ValueChangedInfo;
  }
  /**
   * 
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxHtmlEditorImageUpload {
    /**
     * 
     */
    uploadUrl?: string;
    /**
     * 
     */
    uploadDirectory?: string;
    /**
     * 
     */
    fileUploadMode?: DevExpress.ui.dxHtmlEditor.HtmlEditorImageUploadMode;
    /**
     * 
     */
    tabs?: Array<
      | DevExpress.ui.dxHtmlEditor.ImageUploadTab
      | DevExpress.ui.dxHtmlEditor.HtmlEditorImageUploadTab
    >;
    /**
     * 
     */
    fileUploaderOptions?: DevExpress.ui.dxFileUploader.Properties;
  }
  /**
   * @deprecated Use ImageUploadTab instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxHtmlEditorImageUploadTabItem {
    /**
     * 
     */
    name?: DevExpress.ui.dxHtmlEditor.HtmlEditorImageUploadTab;
  }
  /**
   * 
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxHtmlEditorMediaResizing {
    /**
     * Specifies media types that can be resized. Currently, only images are supported.
     */
    allowedTargets?: Array<string>;
    /**
     * Enables media resizing.
     */
    enabled?: boolean;
  }
  /**
   * 
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxHtmlEditorMention {
    /**
     * Provides data for the suggestion list.
     */
    dataSource?: DevExpress.data.DataSource.DataSourceLike<string> | null;
    /**
     * Specifies the data field whose values should be displayed in the suggestion list.
     */
    displayExpr?: string | ((item: any) => string);
    /**
     * Specifies a custom template for suggestion list items.
     */
    itemTemplate?:
      | DevExpress.core.template
      | ((
          itemData: any,
          itemIndex: number,
          itemElement: DevExpress.core.DxElement
        ) => string | DevExpress.core.UserDefinedElement);
    /**
     * Specifies the prefix that a user enters to activate mentions. You can use different prefixes with different dataSources.
     */
    marker?: string;
    /**
     * Specifies the minimum number of characters that a user should type to trigger the search.
     */
    minSearchLength?: number;
    /**
     * Specifies one or several data fields to search.
     */
    searchExpr?: string | Function | Array<string | Function>;
    /**
     * Specifies the delay between when a user stops typing and when the search is executed.
     */
    searchTimeout?: number;
    /**
     * Specifies a custom template for mentions.
     */
    template?:
      | DevExpress.core.template
      | ((
          mentionData: DevExpress.ui.dxHtmlEditor.MentionTemplateData,
          contentElement: DevExpress.core.DxElement
        ) => string | DevExpress.core.UserDefinedElement);
    /**
     * Specifies which data field provides unique values to the template&apos;s `id` parameter.
     */
    valueExpr?: string | Function;
  }
  /**
   * @deprecated use Properties instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxHtmlEditorOptions extends EditorOptions<dxHtmlEditor> {
    /**
     * Allows users to break content into multiple lines within a single block element. The Shift + Enter key combination generates the new line.
     */
    allowSoftLineBreak?: boolean;
    /**
     * Allows you to customize the DevExtreme Quill and 3rd-party modules.
     */
    customizeModules?: (config: any) => void;
    /**
     * Specifies whether the UI component can be focused using keyboard navigation.
     */
    focusStateEnabled?: boolean;
    /**
     * Configures media resizing.
     */
    mediaResizing?: dxHtmlEditorMediaResizing;
    /**
     * Configures table resize.
     */
    tableResizing?: dxHtmlEditorTableResizing;
    /**
     * Configures mentions.
     */
    mentions?: Array<dxHtmlEditorMention>;
    /**
     * Configures table context menu settings.
     */
    tableContextMenu?: dxHtmlEditorTableContextMenu;
    /**
     * 
     */
    imageUpload?: dxHtmlEditorImageUpload;
    /**
     * The value to be assigned to the `name` attribute of the underlying HTML element.
     */
    name?: string;
    /**
     * A function that is executed when the UI component gets focus.
     */
    onFocusIn?: (e: DevExpress.ui.dxHtmlEditor.FocusInEvent) => void;
    /**
     * A function that is executed when the UI component loses focus.
     */
    onFocusOut?: (e: DevExpress.ui.dxHtmlEditor.FocusOutEvent) => void;
    /**
     * Specifies the text displayed when the input field is empty.
     */
    placeholder?: string;
    /**
     * Configures the UI component&apos;s toolbar.
     */
    toolbar?: dxHtmlEditorToolbar;
    /**
     * Specifies in which markup language the value is stored.
     */
    valueType?: DevExpress.ui.dxHtmlEditor.MarkupType;
    /**
     * Configures variables, which are placeholders to be replaced with actual values when processing text.
     */
    variables?: dxHtmlEditorVariables;
    /**
     * Specifies how the HtmlEditor&apos;s toolbar and content field are styled.
     */
    stylingMode?: DevExpress.common.EditorStyle;
  }
  /**
   * Configures table context menu settings.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxHtmlEditorTableContextMenu {
    /**
     * Specifies whether to enable the table context menu.
     */
    enabled?: boolean;
    /**
     * Configures context menu items.
     */
    items?: Array<
      | DevExpress.ui.dxHtmlEditor.ContextMenuItem
      | DevExpress.ui.dxHtmlEditor.HtmlEditorPredefinedContextMenuItem
    >;
  }
  /**
   * @deprecated Use DevExpress.ui.dxHtmlEditor.ContextMenuItem instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxHtmlEditorTableContextMenuItem
    extends DevExpress.ui.dxMenu.MenuBasePlainItem {
    /**
     * A name used to identify the context menu item.
     */
    name?: DevExpress.ui.dxHtmlEditor.HtmlEditorPredefinedContextMenuItem;
    /**
     * Configures nested context menu items.
     */
    items?: Array<
      | DevExpress.ui.dxHtmlEditor.ContextMenuItem
      | DevExpress.ui.dxHtmlEditor.HtmlEditorPredefinedContextMenuItem
    >;
  }
  /**
   * 
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxHtmlEditorTableResizing {
    /**
     * The minimum column width.
     */
    minColumnWidth?: number;
    /**
     * The minimum row height.
     */
    minRowHeight?: number;
    /**
     * Enables users to resize tables.
     */
    enabled?: boolean;
  }
  /**
   * 
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxHtmlEditorToolbar {
    /**
     * Specifies the container in which to place the toolbar.
     */
    container?: string | DevExpress.core.UserDefinedElement;
    /**
     * Configures toolbar items. These items allow users to format text and execute commands.
     */
    items?: Array<
      | DevExpress.ui.dxHtmlEditor.ToolbarItem
      | DevExpress.ui.dxHtmlEditor.HtmlEditorPredefinedToolbarItem
    >;
    /**
     * Specifies whether or not items are arranged into multiple lines when their combined width exceeds the toolbar width.
     */
    multiline?: boolean;
  }
  /**
   * @deprecated Use ToolbarItem instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxHtmlEditorToolbarItem
    extends DevExpress.ui.dxToolbar.Item {
    /**
     * Specifies the predefined item that this object customizes or a format with multiple choices.
     */
    name?: DevExpress.ui.dxHtmlEditor.HtmlEditorPredefinedToolbarItem | string;
    /**
     * Specifies the predefined item that this object customizes or a format with multiple choices.
     * @deprecated Use name instead.
     */
    formatName?:
      | DevExpress.ui.dxHtmlEditor.HtmlEditorPredefinedToolbarItem
      | string;
    /**
     * Specifies values for a format with multiple choices. Should be used with the name.
     */
    acceptedValues?: Array<string | number | boolean>;
    /**
     * Specifies values for a format with multiple choices.
     * @deprecated Use acceptedValues instead.
     */
    formatValues?: Array<string | number | boolean>;
    /**
     * Specifies a location for the item on the toolbar.
     */
    location?: DevExpress.common.ToolbarItemLocation;
  }
  /**
   * 
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxHtmlEditorVariables {
    /**
     * Specifies a collection of variables available for a user.
     */
    dataSource?: DevExpress.data.DataSource.DataSourceLike<string> | null;
    /**
     * Specifies the special character(s) that should surround the variables.
     */
    escapeChar?: string | Array<string>;
  }
  /**
   * Specifies markup for a UI component item.
   */
  export var dxItem: any;
  /**
   * The List is a UI component that represents a collection of items in a scrollable list.
   */
  export class dxList<
    TItem extends DevExpress.ui.dxList.ItemLike = any,
    TKey = any
  > extends CollectionWidget<dxListOptions<TItem, TKey>, TItem, TKey> {
    /**
     * Gets the UI component&apos;s height in pixels.
     */
    clientHeight(): number;
    /**
     * Collapses a group with a specific index.
     */
    collapseGroup(groupIndex: number): DevExpress.core.utils.DxPromise<void>;
    /**
     * Removes an item found using its DOM node.
     */
    deleteItem(itemElement: Element): DevExpress.core.utils.DxPromise<void>;
    /**
     * Removes an item with a specific index.
     */
    deleteItem(itemIndex: number | any): DevExpress.core.utils.DxPromise<void>;
    /**
     * Expands a group with a specific index.
     */
    expandGroup(groupIndex: number): DevExpress.core.utils.DxPromise<void>;
    /**
     * Checks whether an item found using its DOM node is selected.
     */
    isItemSelected(itemElement: Element): boolean;
    /**
     * Checks whether an item with a specific index is selected.
     */
    isItemSelected(itemIndex: number | any): boolean;
    /**
     * Reloads list data.
     */
    reload(): void;
    /**
     * Reorders items found using their DOM nodes.
     */
    reorderItem(
      itemElement: Element,
      toItemElement: Element
    ): DevExpress.core.utils.DxPromise<void>;
    /**
     * Reorders items with specific indexes.
     */
    reorderItem(
      itemIndex: number | any,
      toItemIndex: number | any
    ): DevExpress.core.utils.DxPromise<void>;
    /**
     * Scrolls the content by a specified distance.
     */
    scrollBy(distance: number): void;
    /**
     * Gets the content&apos;s height in pixels.
     */
    scrollHeight(): number;
    /**
     * Scrolls the content to a specific position.
     */
    scrollTo(location: number): void;
    /**
     * Scrolls the content to an item found using its DOM node.
     */
    scrollToItem(itemElement: Element): void;
    /**
     * Scrolls the content to an item with a specific index.
     */
    scrollToItem(itemIndex: number | any): void;
    /**
     * Gets the top scroll offset.
     */
    scrollTop(): number;
    /**
     * Selects all items.
     */
    selectAll(): void;
    /**
     * Selects an item found using its DOM node.
     */
    selectItem(itemElement: Element): void;
    /**
     * Selects an item with a specific index.
     */
    selectItem(itemIndex: number | any): void;
    /**
     * Cancels the selection of all items.
     */
    unselectAll(): void;
    /**
     * Cancels the selection of an item found using its DOM node.
     */
    unselectItem(itemElement: Element): void;
    /**
     * Cancels the selection of an item with a specific index.
     */
    unselectItem(itemIndex: number | any): void;
    /**
     * Updates the UI component scrollbar according to UI component content size.
     */
    updateDimensions(): DevExpress.core.utils.DxPromise<void>;
  }
  module dxList {
    export type ContentReadyEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxList<TItem, TKey>>;
    export type DisposingEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxList<TItem, TKey>>;
    export type ExplicitTypes<TItem extends ItemLike, TKey> = {
      Properties: Properties<TItem, TKey>;
      ContentReadyEvent: ContentReadyEvent<TItem, TKey>;
      DisposingEvent: DisposingEvent<TItem, TKey>;
      GroupRenderedEvent: GroupRenderedEvent<TItem, TKey>;
      InitializedEvent: InitializedEvent<TItem, TKey>;
      ItemClickEvent: ItemClickEvent<TItem, TKey>;
      ItemContextMenuEvent: ItemContextMenuEvent<TItem, TKey>;
      ItemDeletedEvent: ItemDeletedEvent<TItem, TKey>;
      ItemDeletingEvent: ItemDeletingEvent<TItem, TKey>;
      ItemHoldEvent: ItemHoldEvent<TItem, TKey>;
      ItemRenderedEvent: ItemRenderedEvent<TItem, TKey>;
      ItemReorderedEvent: ItemReorderedEvent<TItem, TKey>;
      ItemSwipeEvent: ItemSwipeEvent<TItem, TKey>;
      OptionChangedEvent: OptionChangedEvent<TItem, TKey>;
      PageLoadingEvent: PageLoadingEvent<TItem, TKey>;
      PullRefreshEvent: PullRefreshEvent<TItem, TKey>;
      ScrollEvent: ScrollEvent<TItem, TKey>;
      SelectAllValueChangedEvent: SelectAllValueChangedEvent<TItem, TKey>;
      SelectionChangedEvent: SelectionChangedEvent<TItem, TKey>;
    };
    export type GroupRenderedEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxList<TItem, TKey>> & {
      readonly groupData?: any;
      readonly groupElement?: DevExpress.core.DxElement;
      readonly groupIndex?: number;
    };
    export type InitializedEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.InitializedEventInfo<dxList<TItem, TKey>>;
    export type ItemClickEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.NativeEventInfo<
      dxList<TItem, TKey>,
      KeyboardEvent | MouseEvent | PointerEvent
    > &
      ListItemInfo<TItem>;
    export type ItemContextMenuEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.NativeEventInfo<
      dxList<TItem, TKey>,
      MouseEvent | PointerEvent | TouchEvent
    > &
      ListItemInfo<TItem>;
    export type ItemDeletedEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxList<TItem, TKey>> & ListItemInfo<TItem>;
    export type ItemDeleteMode =
      | 'context'
      | 'slideButton'
      | 'slideItem'
      | 'static'
      | 'swipe'
      | 'toggle';
    export type ItemDeletingEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxList<TItem, TKey>> &
      ListItemInfo<TItem> & {
        cancel?: boolean | PromiseLike<boolean> | PromiseLike<void>;
      };
    export type ItemHoldEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.NativeEventInfo<
      dxList<TItem, TKey>,
      MouseEvent | PointerEvent | TouchEvent
    > &
      ListItemInfo<TItem>;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    type ItemLike = string | Item | any;
    export type ItemRenderedEvent<
      TItem extends Item | any = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxList<TItem, TKey>> &
      DevExpress.events.ItemInfo<TItem>;
    export type ItemReorderedEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxList<TItem, TKey>> &
      ListItemInfo<TItem> & {
        readonly fromIndex: number;
        readonly toIndex: number;
      };
    export type ItemSwipeEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.NativeEventInfo<
      dxList<TItem, TKey>,
      MouseEvent | PointerEvent | TouchEvent
    > &
      ListItemInfo<TItem> & {
        readonly direction: string;
      };
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    interface ListItemInfo<TItem extends ItemLike> {
      readonly itemData?: TItem;
      readonly itemElement: DevExpress.core.DxElement;
      readonly itemIndex: number | { group: number; item: number };
    }
    export type ListMenuMode = 'context' | 'slide';
    export type OptionChangedEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxList<TItem, TKey>> &
      DevExpress.events.ChangedOptionInfo;
    export type PageLoadingEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxList<TItem, TKey>>;
    export type Properties<
      TItem extends ItemLike = any,
      TKey = any
    > = dxListOptions<TItem, TKey>;
    export type PullRefreshEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxList<TItem, TKey>>;
    export type ScrollEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.NativeEventInfo<dxList<TItem, TKey>, Event> &
      ScrollInfo;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export interface ScrollInfo {
      readonly scrollOffset?: any;
      readonly reachedLeft: boolean;
      readonly reachedRight: boolean;
      readonly reachedTop: boolean;
      readonly reachedBottom: boolean;
    }
    export type SelectAllValueChangedEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxList<TItem, TKey>> & {
      readonly value: boolean;
    };
    export type SelectionChangedEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxList<TItem, TKey>> &
      DevExpress.ui.CollectionWidget.SelectionChangedInfo<TItem>;
  }
  /**
   * @deprecated Use Item instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxListItem extends CollectionWidgetItem {
    /**
     * Specifies the text of a badge displayed for the list item.
     */
    badge?: string;
    /**
     * Specifies the list item&apos;s icon.
     */
    icon?: string;
    /**
     * Specifies the name of the list items group in a grouped list.
     */
    key?: string;
    /**
     * Specifies whether or not to display a chevron for the list item.
     */
    showChevron?: boolean;
  }
  /**
   * @deprecated use Properties instead
   */
  export interface dxListOptions<
    TItem extends DevExpress.ui.dxList.ItemLike = any,
    TKey = any
  > extends CollectionWidgetOptions<dxList<TItem, TKey>, TItem, TKey>,
      SearchBoxMixinOptions {
    /**
     * Specifies whether or not the UI component changes its state when interacting with a user.
     */
    activeStateEnabled?: boolean;
    /**
     * Specifies whether or not an end user can delete list items.
     */
    allowItemDeleting?: boolean;
    /**
     * A Boolean value specifying whether to enable or disable the bounce-back effect.
     */
    bounceEnabled?: boolean;
    /**
     * Specifies whether or not an end-user can collapse groups.
     */
    collapsibleGroups?: boolean;
    /**
     * Binds the UI component to data.
     */
    dataSource?: DevExpress.data.DataSource.DataSourceLike<TItem, TKey> | null;
    /**
     * Specifies the data field whose values should be displayed. Defaults to &apos;text&apos; when the data source contains objects.
     */
    displayExpr?: string | ((item: TItem) => string);
    /**
     * Specifies whether the UI component can be focused using keyboard navigation.
     */
    focusStateEnabled?: boolean;
    /**
     * Specifies a custom template for group captions.
     */
    groupTemplate?:
      | DevExpress.core.template
      | ((
          groupData: any,
          groupIndex: number,
          groupElement: DevExpress.core.DxElement
        ) => string | DevExpress.core.UserDefinedElement);
    /**
     * Specifies whether data items should be grouped.
     */
    grouped?: boolean;
    /**
     * Specifies whether the UI component changes its state when a user pauses on it.
     */
    hoverStateEnabled?: boolean;
    /**
     * Specifies whether or not to show the loading panel when the DataSource bound to the UI component is loading data.
     */
    indicateLoading?: boolean;
    /**
     * Specifies the way a user can delete items from the list.
     */
    itemDeleteMode?: DevExpress.ui.dxList.ItemDeleteMode;
    /**
     * Configures item reordering using drag and drop gestures.
     */
    itemDragging?: dxSortableOptions;
    /**
     * An array of items displayed by the UI component.
     */
    items?: Array<TItem>;
    /**
     * Specifies the array of items for a context menu called for a list item.
     */
    menuItems?: Array<{
      /**
       * Holds on a function called when the item is clicked.
       */
      action?: (itemElement: DevExpress.core.DxElement, itemData: TItem) => any;
      /**
       * Specifies the menu item text.
       */
      text?: string;
    }>;
    /**
     * Specifies whether an item context menu is shown when a user holds or swipes an item.
     */
    menuMode?: DevExpress.ui.dxList.ListMenuMode;
    /**
     * The text displayed on the button used to load the next page from the data source.
     */
    nextButtonText?: string;
    /**
     * A function that is executed when a group element is rendered.
     */
    onGroupRendered?: (
      e: DevExpress.ui.dxList.GroupRenderedEvent<TItem, TKey>
    ) => void;
    /**
     * A function that is executed when a collection item is clicked or tapped.
     */
    onItemClick?:
      | ((e: DevExpress.ui.dxList.ItemClickEvent<TItem, TKey>) => void)
      | string;
    /**
     * A function that is executed when a collection item is right-clicked or pressed.
     */
    onItemContextMenu?: (
      e: DevExpress.ui.dxList.ItemContextMenuEvent<TItem, TKey>
    ) => void;
    /**
     * A function that is executed after a list item is deleted from the data source.
     */
    onItemDeleted?: (
      e: DevExpress.ui.dxList.ItemDeletedEvent<TItem, TKey>
    ) => void;
    /**
     * A function that is executed before a collection item is deleted from the data source.
     */
    onItemDeleting?: (
      e: DevExpress.ui.dxList.ItemDeletingEvent<TItem, TKey>
    ) => void;
    /**
     * A function that is executed when a collection item has been held for a specified period.
     */
    onItemHold?: (e: DevExpress.ui.dxList.ItemHoldEvent<TItem, TKey>) => void;
    /**
     * A function that is executed after a list item is moved to another position.
     */
    onItemReordered?: (
      e: DevExpress.ui.dxList.ItemReorderedEvent<TItem, TKey>
    ) => void;
    /**
     * A function that is executed when a list item is swiped.
     */
    onItemSwipe?: (e: DevExpress.ui.dxList.ItemSwipeEvent<TItem, TKey>) => void;
    /**
     * A function that is executed before the next page is loaded.
     */
    onPageLoading?: (
      e: DevExpress.ui.dxList.PageLoadingEvent<TItem, TKey>
    ) => void;
    /**
     * A function that is executed when the &apos;pull to refresh&apos; gesture is performed. Supported on mobile devices only.
     */
    onPullRefresh?: (
      e: DevExpress.ui.dxList.PullRefreshEvent<TItem, TKey>
    ) => void;
    /**
     * A function that is executed on each scroll gesture.
     */
    onScroll?: (e: DevExpress.ui.dxList.ScrollEvent<TItem, TKey>) => void;
    /**
     * A function that is executed when the &apos;Select All&apos; check box value is changed. Applies only if the selectionMode is &apos;all&apos;.
     */
    onSelectAllValueChanged?: (
      e: DevExpress.ui.dxList.SelectAllValueChangedEvent<TItem, TKey>
    ) => void;
    /**
     * Specifies whether the next page is loaded when a user scrolls the UI component to the bottom or when the &apos;next&apos; button is clicked.
     */
    pageLoadMode?: DevExpress.common.PageLoadMode;
    /**
     * Specifies the text shown in the pullDown panel, which is displayed when the list is scrolled to the bottom.
     */
    pageLoadingText?: string;
    /**
     * A Boolean value specifying whether or not the UI component supports the &apos;pull down to refresh&apos; gesture.
     */
    pullRefreshEnabled?: boolean;
    /**
     * Specifies the text displayed in the pullDown panel when the list is pulled below the refresh threshold.
     */
    pulledDownText?: string;
    /**
     * Specifies the text shown in the pullDown panel while the list is being pulled down to the refresh threshold.
     */
    pullingDownText?: string;
    /**
     * Specifies the text displayed in the pullDown panel while the list is being refreshed.
     */
    refreshingText?: string;
    /**
     * Specifies whether to repaint only those elements whose data changed.
     */
    repaintChangesOnly?: boolean;
    /**
     * A Boolean value specifying if the list is scrolled by content.
     */
    scrollByContent?: boolean;
    /**
     * Specifies whether a user can scroll the content with the scrollbar. Applies only if useNativeScrolling is false.
     */
    scrollByThumb?: boolean;
    /**
     * A Boolean value specifying whether to enable or disable list scrolling.
     */
    scrollingEnabled?: boolean;
    /**
     * Specifies the mode in which all items are selected.
     */
    selectAllMode?: DevExpress.common.SelectAllMode;
    /**
     * Specifies item selection mode.
     */
    selectionMode?: DevExpress.common.SingleMultipleAllOrNone;
    /**
     * Specifies when the UI component shows the scrollbar.
     */
    showScrollbar?: DevExpress.common.ScrollbarMode;
    /**
     * Specifies whether or not to display controls used to select list items.
     */
    showSelectionControls?: boolean;
    /**
     * Specifies the text displayed at the &apos;Select All&apos; check box.
     */
    selectAllText?: string;
    /**
     * Specifies whether or not the UI component uses native scrolling.
     */
    useNativeScrolling?: boolean;
  }
  /**
   * The LoadIndicator is a UI element notifying the viewer that a process is in progress.
   */
  export class dxLoadIndicator extends Widget<dxLoadIndicatorOptions> {}
  module dxLoadIndicator {
    export type ContentReadyEvent =
      DevExpress.events.EventInfo<dxLoadIndicator>;
    export type DisposingEvent = DevExpress.events.EventInfo<dxLoadIndicator>;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxLoadIndicator>;
    export type OptionChangedEvent =
      DevExpress.events.EventInfo<dxLoadIndicator> &
        DevExpress.events.ChangedOptionInfo;
    export type Properties = dxLoadIndicatorOptions;
  }
  /**
   * @deprecated use Properties instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxLoadIndicatorOptions
    extends WidgetOptions<dxLoadIndicator> {
    /**
     * Specifies the path to an image used as the indicator.
     */
    indicatorSrc?: string;
  }
  /**
   * The LoadPanel is an overlay UI component notifying the viewer that loading is in progress.
   */
  export class dxLoadPanel extends dxOverlay<dxLoadPanelOptions> {}
  module dxLoadPanel {
    export type ContentReadyEvent = DevExpress.events.EventInfo<dxLoadPanel>;
    export type DisposingEvent = DevExpress.events.EventInfo<dxLoadPanel>;
    export type HiddenEvent = DevExpress.events.EventInfo<dxLoadPanel>;
    export type HidingEvent = DevExpress.events.Cancelable &
      DevExpress.events.EventInfo<dxLoadPanel>;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxLoadPanel>;
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxLoadPanel> &
      DevExpress.events.ChangedOptionInfo;
    export type Properties = dxLoadPanelOptions;
    export type ShowingEvent = DevExpress.events.Cancelable &
      DevExpress.events.EventInfo<dxLoadPanel>;
    export type ShownEvent = DevExpress.events.EventInfo<dxLoadPanel>;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxLoadPanelAnimation extends dxOverlayAnimation {
    /**
     * An object that defines the animation properties used when the UI component is being hidden.
     */
    hide?: AnimationConfig;
    /**
     * An object that defines the animation properties used when the UI component is being shown.
     */
    show?: AnimationConfig;
  }
  /**
   * @deprecated use Properties instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxLoadPanelOptions extends dxOverlayOptions<dxLoadPanel> {
    /**
     * Configures UI component visibility animations. This object contains two fields: show and hide.
     */
    animation?: dxLoadPanelAnimation;
    /**
     * Specifies the UI component&apos;s container.
     */
    container?: string | DevExpress.core.UserDefinedElement;
    /**
     * The delay in milliseconds after which the load panel is displayed.
     */
    delay?: number;
    /**
     * Specifies whether or not the UI component can be focused.
     */
    focusStateEnabled?: boolean;
    /**
     * Specifies the UI component&apos;s height in pixels.
     */
    height?: number | string | (() => number | string);
    /**
     * A URL pointing to an image to be used as a load indicator.
     */
    indicatorSrc?: string;
    /**
     * Specifies the maximum height the UI component can reach while resizing.
     */
    maxHeight?: number | string | (() => number | string);
    /**
     * Specifies the maximum width the UI component can reach while resizing.
     */
    maxWidth?: number | string | (() => number | string);
    /**
     * Specifies the text displayed in the load panel. Ignored in the Material Design theme.
     */
    message?: string;
    /**
     * Positions the UI component.
     */
    position?: DevExpress.common.PositionAlignment | PositionConfig | Function;
    /**
     * Specifies the shading color. Applies only if shading is enabled.
     */
    shadingColor?: string;
    /**
     * A Boolean value specifying whether or not to show a load indicator.
     */
    showIndicator?: boolean;
    /**
     * A Boolean value specifying whether or not to show the pane behind the load indicator.
     */
    showPane?: boolean;
    /**
     * Specifies the UI component&apos;s width in pixels.
     */
    width?: number | string | (() => number | string);
  }
  /**
   * The Lookup is a UI component that allows an end user to search for an item in a collection shown in a drop-down menu.
   */
  export class dxLookup extends dxDropDownList<dxLookupOptions> {}
  module dxLookup {
    export type ClosedEvent = DevExpress.events.EventInfo<dxLookup>;
    export type ContentReadyEvent = DevExpress.events.EventInfo<dxLookup>;
    export type DisposingEvent = DevExpress.events.EventInfo<dxLookup>;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxLookup>;
    export type ItemClickEvent = DevExpress.events.NativeEventInfo<
      dxLookup,
      KeyboardEvent | MouseEvent | PointerEvent
    > &
      DevExpress.events.ItemInfo;
    export type OpenedEvent = DevExpress.events.EventInfo<dxLookup>;
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxLookup> &
      DevExpress.events.ChangedOptionInfo;
    export type PageLoadingEvent = DevExpress.events.EventInfo<dxLookup>;
    export type Properties = dxLookupOptions;
    export type PullRefreshEvent = DevExpress.events.EventInfo<dxLookup>;
    export type ScrollEvent = DevExpress.events.NativeEventInfo<
      dxLookup,
      MouseEvent | Event
    > &
      DevExpress.ui.dxList.ScrollInfo;
    export type SelectionChangedEvent = DevExpress.events.EventInfo<dxLookup> &
      DevExpress.ui.dxDropDownList.SelectionChangedInfo;
    export type TitleRenderedEvent = DevExpress.events.EventInfo<dxLookup> &
      DevExpress.ui.dxPopup.TitleRenderedInfo;
    export type ValueChangedEvent = DevExpress.events.NativeEventInfo<
      dxLookup,
      KeyboardEvent | MouseEvent | PointerEvent | Event
    > &
      DevExpress.ui.Editor.ValueChangedInfo;
  }
  /**
   * @deprecated use Properties instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxLookupOptions extends dxDropDownListOptions<dxLookup> {
    /**
     * The text displayed on the Apply button.
     */
    applyButtonText?: string;
    /**
     * Specifies the way an end-user applies the selected value.
     */
    applyValueMode?: DevExpress.common.ApplyValueMode;
    /**
     * The text displayed on the Cancel button.
     */
    cancelButtonText?: string;
    /**
     * Specifies whether or not the UI component cleans the search box when the popup window is displayed.
     */
    cleanSearchOnOpening?: boolean;
    /**
     * The text displayed on the Clear button.
     */
    clearButtonText?: string;
    /**
     * Specifies a custom template for the input field.
     */
    fieldTemplate?:
      | DevExpress.core.template
      | ((
          selectedItem: any,
          fieldElement: DevExpress.core.DxElement
        ) => string | DevExpress.core.UserDefinedElement);
    /**
     * Specifies whether the UI component can be focused using keyboard navigation.
     */
    focusStateEnabled?: boolean;
    /**
     * A Boolean value specifying whether or not to display the lookup in full-screen mode.
     * @deprecated Use the dropDownOptions option instead.
     */
    fullScreen?: boolean;
    /**
     * Specifies a custom template for group captions.
     */
    groupTemplate?:
      | DevExpress.core.template
      | ((
          itemData: any,
          itemIndex: number,
          itemElement: DevExpress.core.DxElement
        ) => string | DevExpress.core.UserDefinedElement);
    /**
     * A Boolean value specifying whether or not to group UI component items.
     */
    grouped?: boolean;
    /**
     * The text displayed on the button used to load the next page from the data source.
     */
    nextButtonText?: string;
    /**
     * A function that is executed before the next page is loaded.
     */
    onPageLoading?: (e: DevExpress.ui.dxLookup.PageLoadingEvent) => void;
    /**
     * A function that is executed when the &apos;pull to refresh&apos; gesture is performed on the drop-down item list. Supported on mobile devices only.
     */
    onPullRefresh?: (e: DevExpress.ui.dxLookup.PullRefreshEvent) => void;
    /**
     * A function that is executed on each scroll gesture performed on the drop-down item list.
     */
    onScroll?: (e: DevExpress.ui.dxLookup.ScrollEvent) => void;
    /**
     * A function that is executed after the UI component&apos;s value is changed.
     */
    onValueChanged?: (e: DevExpress.ui.dxLookup.ValueChangedEvent) => void;
    /**
     * Specifies whether the next page is loaded when a user scrolls the UI component to the bottom or when the &apos;next&apos; button is clicked.
     */
    pageLoadMode?: DevExpress.common.PageLoadMode;
    /**
     * Specifies the text shown in the pullDown panel, which is displayed when the UI component is scrolled to the bottom.
     */
    pageLoadingText?: string;
    /**
     * The text displayed by the UI component when nothing is selected.
     */
    placeholder?: string;
    /**
     * A Boolean value specifying whether or not the UI component supports the &apos;pull down to refresh&apos; gesture.
     */
    pullRefreshEnabled?: boolean;
    /**
     * Specifies the text displayed in the pullDown panel when the UI component is pulled below the refresh threshold.
     */
    pulledDownText?: string;
    /**
     * Specifies the text shown in the pullDown panel while the list is being pulled down to the refresh threshold.
     */
    pullingDownText?: string;
    /**
     * Specifies the text displayed in the pullDown panel while the UI component is being refreshed.
     */
    refreshingText?: string;
    /**
     * Specifies whether the search box is visible.
     */
    searchEnabled?: boolean;
    /**
     * The text that is provided as a hint in the lookup&apos;s search bar.
     */
    searchPlaceholder?: string;
    /**
     * Specifies whether to display the Cancel button in the lookup window.
     */
    showCancelButton?: boolean;
    /**
     * Specifies whether to display the Clear button in the lookup window.
     */
    showClearButton?: boolean;
    /**
     * 
     */
    searchStartEvent?: string;
    /**
     * Specifies whether or not the UI component uses native scrolling.
     */
    useNativeScrolling?: boolean;
    /**
     * Specifies whether to show lookup contents in the Popover UI component.
     */
    usePopover?: boolean;
    /**
     * 
     * @deprecated 
     */
    valueChangeEvent?: string;
    /**
     * Specifies whether to vertically align the drop-down menu so that the selected item is in its center. Applies only in Material Design themes.
     */
    dropDownCentered?: boolean;
    /**
     * Configures the drop-down field.
     */
    dropDownOptions?: DevExpress.ui.dxPopover.Properties;
  }
  /**
   * The Map is an interactive UI component that displays a geographic map with markers and routes.
   */
  export class dxMap extends Widget<dxMapOptions> {
    /**
     * Adds a marker to the map.
     */
    addMarker(
      markerOptions: any | Array<any>
    ): DevExpress.core.utils.DxPromise<any>;
    /**
     * Adds a route to the map.
     */
    addRoute(options: any | Array<any>): DevExpress.core.utils.DxPromise<any>;
    /**
     * Removes a marker from the map.
     */
    removeMarker(
      marker: any | number | Array<any>
    ): DevExpress.core.utils.DxPromise<void>;
    /**
     * Removes a route from the map.
     */
    removeRoute(
      route: any | number | Array<any>
    ): DevExpress.core.utils.DxPromise<void>;
  }
  module dxMap {
    export type ClickEvent = DevExpress.events.NativeEventInfo<
      dxMap,
      MouseEvent | PointerEvent
    >;
    export type DisposingEvent = DevExpress.events.EventInfo<dxMap>;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxMap>;
    export type MapProvider = 'bing' | 'google' | 'googleStatic';
    export type MapType = 'hybrid' | 'roadmap' | 'satellite';
    export type MarkerAddedEvent = DevExpress.events.EventInfo<dxMap> & {
      readonly options: any;
      originalMarker: any;
    };
    export type MarkerRemovedEvent = DevExpress.events.EventInfo<dxMap> & {
      readonly options?: any;
    };
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxMap> &
      DevExpress.events.ChangedOptionInfo;
    export type Properties = dxMapOptions;
    export type ReadyEvent = DevExpress.events.EventInfo<dxMap> & {
      originalMap: any;
    };
    export type RouteAddedEvent = DevExpress.events.EventInfo<dxMap> & {
      readonly options: any;
      originalRoute: any;
    };
    export type RouteMode = 'driving' | 'walking';
    export type RouteRemovedEvent = DevExpress.events.EventInfo<dxMap> & {
      readonly options?: any;
    };
  }
  /**
   * @deprecated use Properties instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxMapOptions extends WidgetOptions<dxMap> {
    /**
     * Keys to authenticate the component within map providers.
     */
    apiKey?:
      | string
      | {
          /**
           * A key used to authenticate the component within Bing Maps.
           */
          bing?: string;
          /**
           * A key used to authenticate the component within Google Maps.
           */
          google?: string;
          /**
           * A key used to authenticate the component within Google Maps Static.
           */
          googleStatic?: string;
        };
    /**
     * Specifies whether the UI component automatically adjusts center and zoom property values when adding a new marker or route, or if a new UI component contains markers or routes by default.
     */
    autoAdjust?: boolean;
    /**
     * An object, a string, or an array specifying which part of the map is displayed at the UI component&apos;s center using coordinates. The UI component can change this value if autoAdjust is enabled.
     */
    center?: any | string | Array<number>;
    /**
     * Specifies whether or not map UI component controls are available.
     */
    controls?: boolean;
    /**
     * Specifies whether the UI component can be focused using keyboard navigation.
     */
    focusStateEnabled?: boolean;
    /**
     * Specifies the UI component&apos;s height.
     */
    height?: number | string | (() => number | string);
    /**
     * A URL pointing to the custom icon to be used for map markers.
     */
    markerIconSrc?: string;
    /**
     * An array of markers displayed on a map.
     */
    markers?: Array<{
      /**
       * A URL pointing to the custom icon to be used for the marker.
       */
      iconSrc?: string;
      /**
       * Specifies the marker location.
       */
      location?: any | string | Array<number>;
      /**
       * A callback function performed when the marker is clicked.
       */
      onClick?: Function;
      /**
       * A tooltip to be used for the marker.
       */
      tooltip?:
        | string
        | {
            /**
             * Specifies whether a tooltip is visible by default or not.
             */
            isShown?: boolean;
            /**
             * Specifies the text or HTML markup displayed in the tooltip.
             */
            text?: string;
          };
    }>;
    /**
     * A function that is executed when any location on the map is clicked or tapped.
     */
    onClick?: ((e: DevExpress.ui.dxMap.ClickEvent) => void) | string;
    /**
     * A function that is executed when a marker is created on the map.
     */
    onMarkerAdded?: (e: DevExpress.ui.dxMap.MarkerAddedEvent) => void;
    /**
     * A function that is executed when a marker is removed from the map.
     */
    onMarkerRemoved?: (e: DevExpress.ui.dxMap.MarkerRemovedEvent) => void;
    /**
     * A function that is executed when the map is ready.
     */
    onReady?: (e: DevExpress.ui.dxMap.ReadyEvent) => void;
    /**
     * A function that is executed when a route is created on the map.
     */
    onRouteAdded?: (e: DevExpress.ui.dxMap.RouteAddedEvent) => void;
    /**
     * A function that is executed when a route is removed from the map.
     */
    onRouteRemoved?: (e: DevExpress.ui.dxMap.RouteRemovedEvent) => void;
    /**
     * The name of the current map data provider.
     */
    provider?: DevExpress.ui.dxMap.MapProvider;
    /**
     * An array of routes shown on the map.
     */
    routes?: Array<{
      /**
       * Specifies the color of the line displaying the route.
       */
      color?: string;
      /**
       * Contains an array of objects making up the route.
       */
      locations?: Array<any>;
      /**
       * Specifies a transportation mode to be used in the displayed route.
       */
      mode?: DevExpress.ui.dxMap.RouteMode;
      /**
       * Specifies the opacity of the line displaying the route.
       */
      opacity?: number;
      /**
       * Specifies the thickness of the line displaying the route in pixels.
       */
      weight?: number;
    }>;
    /**
     * The type of a map to display.
     */
    type?: DevExpress.ui.dxMap.MapType;
    /**
     * Specifies the UI component&apos;s width.
     */
    width?: number | string | (() => number | string);
    /**
     * The map&apos;s zoom level. The UI component can change this value if autoAdjust is enabled.
     */
    zoom?: number;
  }
  /**
   * The Menu UI component is a panel with clickable items. A click on an item opens a drop-down menu, which can contain several submenus.
   */
  export class dxMenu<TKey = any> extends dxMenuBase<
    dxMenuOptions<TKey>,
    dxMenuItem,
    TKey
  > {}
  module dxMenu {
    export type ContentReadyEvent<TKey = any> = DevExpress.events.EventInfo<
      dxMenu<TKey>
    >;
    export type DisposingEvent<TKey = any> = DevExpress.events.EventInfo<
      dxMenu<TKey>
    >;
    export type ExplicitTypes<TKey = any> = {
      Properties: Properties<TKey>;
      ContentReadyEvent: ContentReadyEvent<TKey>;
      DisposingEvent: DisposingEvent<TKey>;
      InitializedEvent: InitializedEvent<TKey>;
      ItemClickEvent: ItemClickEvent<TKey>;
      ItemContextMenuEvent: ItemContextMenuEvent<TKey>;
      ItemRenderedEvent: ItemRenderedEvent<TKey>;
      OptionChangedEvent: OptionChangedEvent<TKey>;
      SelectionChangedEvent: SelectionChangedEvent<TKey>;
      SubmenuHiddenEvent: SubmenuHiddenEvent<TKey>;
      SubmenuHidingEvent: SubmenuHidingEvent<TKey>;
      SubmenuShowingEvent: SubmenuShowingEvent<TKey>;
      SubmenuShownEvent: SubmenuShownEvent<TKey>;
    };
    export type InitializedEvent<TKey = any> =
      DevExpress.events.InitializedEventInfo<dxMenu<TKey>>;
    export type ItemClickEvent<TKey = any> = DevExpress.events.NativeEventInfo<
      dxMenu<TKey>,
      KeyboardEvent | MouseEvent | PointerEvent
    > &
      DevExpress.events.ItemInfo<Item>;
    export type ItemContextMenuEvent<TKey = any> =
      DevExpress.events.NativeEventInfo<
        dxMenu<TKey>,
        MouseEvent | PointerEvent | TouchEvent
      > &
        DevExpress.events.ItemInfo<Item>;
    export type ItemRenderedEvent<TKey = any> = DevExpress.events.EventInfo<
      dxMenu<TKey>
    > &
      DevExpress.events.ItemInfo<Item>;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export interface MenuBasePlainItem extends CollectionWidgetItem {
      /**
       * Specifies whether a group separator is displayed over the item.
       */
      beginGroup?: boolean;
      /**
       * Specifies if a menu is closed when a user clicks the item.
       */
      closeMenuOnClick?: boolean;
      /**
       * Specifies whether the menu item responds to user interaction.
       */
      disabled?: boolean;
      /**
       * Specifies the menu item&apos;s icon.
       */
      icon?: string;
      /**
       * Specifies whether or not a user can select a menu item.
       */
      selectable?: boolean;
      /**
       * Specifies whether or not the item is selected.
       */
      selected?: boolean;
      /**
       * Specifies the text inserted into the item element.
       */
      text?: string;
      /**
       * Specifies whether or not the menu item is visible.
       */
      visible?: boolean;
    }
    export type OptionChangedEvent<TKey = any> = DevExpress.events.EventInfo<
      dxMenu<TKey>
    > &
      DevExpress.events.ChangedOptionInfo;
    export type Properties<TKey = any> = dxMenuOptions<TKey>;
    export type SelectionChangedEvent<TKey = any> = DevExpress.events.EventInfo<
      dxMenu<TKey>
    > &
      DevExpress.ui.CollectionWidget.SelectionChangedInfo<Item>;
    export type SubmenuDirection = 'auto' | 'leftOrTop' | 'rightOrBottom';
    export type SubmenuHiddenEvent<TKey = any> = DevExpress.events.EventInfo<
      dxMenu<TKey>
    > & {
      readonly rootItem?: DevExpress.core.DxElement;
    };
    export type SubmenuHidingEvent<TKey = any> = DevExpress.events.Cancelable &
      DevExpress.events.EventInfo<dxMenu<TKey>> & {
        readonly rootItem?: DevExpress.core.DxElement;
      };
    export type SubmenuShowingEvent<TKey = any> = DevExpress.events.EventInfo<
      dxMenu<TKey>
    > & {
      readonly rootItem?: DevExpress.core.DxElement;
    };
    export type SubmenuShownEvent<TKey = any> = DevExpress.events.EventInfo<
      dxMenu<TKey>
    > & {
      readonly rootItem?: DevExpress.core.DxElement;
    };
  }
  /**
   * 
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export class dxMenuBase<
    TProperties extends dxMenuBaseOptions<any, TItem, TKey>,
    TItem extends dxMenuBaseItem = dxMenuBaseItem,
    TKey = any
  > extends HierarchicalCollectionWidget<TProperties, TItem, TKey> {
    /**
     * Selects an item found using its DOM node.
     */
    selectItem(itemElement: Element): void;
    /**
     * Cancels the selection of an item found using its DOM node.
     */
    unselectItem(itemElement: Element): void;
  }
  /**
   * 
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxMenuBaseItem
    extends DevExpress.ui.dxMenu.MenuBasePlainItem {
    /**
     * Specifies nested menu items.
     */
    items?: Array<dxMenuBaseItem>;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxMenuBaseOptions<
    TComponent extends dxMenuBase<any, TItem, TKey>,
    TItem extends dxMenuBaseItem = dxMenuBaseItem,
    TKey = any
  > extends DevExpress.core.Skip<
      HierarchicalCollectionWidgetOptions<TComponent, TItem, TKey>,
      'dataSource'
    > {
    /**
     * A Boolean value specifying whether or not the UI component changes its state when interacting with a user.
     */
    activeStateEnabled?: boolean;
    /**
     * Configures UI component visibility animations. This object contains two fields: show and hide.
     */
    animation?: {
      /**
       * An object that defines the animation properties used when the UI component is being hidden.
       */
      hide?: AnimationConfig;
      /**
       * An object that defines the animation properties used when the UI component is being shown.
       */
      show?: AnimationConfig;
    };
    /**
     * Specifies the name of the CSS class to be applied to the root menu level and all submenus.
     */
    cssClass?: string;
    /**
     * Binds the UI component to data.
     */
    dataSource?: DevExpress.data.DataSource.DataSourceLike<TItem, TKey> | null;
    /**
     * Holds an array of menu items.
     */
    items?: Array<TItem>;
    /**
     * Specifies whether or not an item becomes selected if a user clicks it.
     */
    selectByClick?: boolean;
    /**
     * Specifies the selection mode supported by the menu.
     */
    selectionMode?: DevExpress.common.SingleOrNone;
    /**
     * Specifies properties of submenu showing and hiding.
     */
    showSubmenuMode?:
      | {
          /**
           * Specifies the delay of submenu show and hiding.
           */
          delay?:
            | {
                /**
                 * The time span after which the submenu is hidden.
                 */
                hide?: number;
                /**
                 * The time span after which the submenu is shown.
                 */
                show?: number;
              }
            | number;
          /**
           * Specifies the mode name.
           */
          name?: DevExpress.common.SubmenuShowMode;
        }
      | DevExpress.common.SubmenuShowMode;
  }
  /**
   * @deprecated Use DevExpress.ui.dxMenu.Item instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxMenuItem extends dxMenuBaseItem {
    /**
     * Specifies nested menu items.
     */
    items?: Array<DevExpress.ui.dxMenu.Item>;
  }
  /**
   * @deprecated use Properties instead
   */
  export interface dxMenuOptions<TKey = any>
    extends dxMenuBaseOptions<dxMenu<TKey>, dxMenuItem, TKey> {
    /**
     * Specifies whether adaptive UI component rendering is enabled on small screens. Applies only if the orientation is &apos;horizontal&apos;.
     */
    adaptivityEnabled?: boolean;
    /**
     * Binds the UI component to data.
     */
    dataSource?: DevExpress.data.DataSource.DataSourceLike<
      DevExpress.ui.dxMenu.Item,
      TKey
    > | null;
    /**
     * Specifies whether or not the submenu is hidden when the mouse pointer leaves it.
     */
    hideSubmenuOnMouseLeave?: boolean;
    /**
     * Holds an array of menu items.
     */
    items?: Array<DevExpress.ui.dxMenu.Item>;
    /**
     * A function that is executed after a submenu is hidden.
     */
    onSubmenuHidden?: (
      e: DevExpress.ui.dxMenu.SubmenuHiddenEvent<TKey>
    ) => void;
    /**
     * A function that is executed before a submenu is hidden.
     */
    onSubmenuHiding?: (
      e: DevExpress.ui.dxMenu.SubmenuHidingEvent<TKey>
    ) => void;
    /**
     * A function that is executed before a submenu is displayed.
     */
    onSubmenuShowing?: (
      e: DevExpress.ui.dxMenu.SubmenuShowingEvent<TKey>
    ) => void;
    /**
     * A function that is executed after a submenu is displayed.
     */
    onSubmenuShown?: (e: DevExpress.ui.dxMenu.SubmenuShownEvent<TKey>) => void;
    /**
     * Specifies whether the menu has horizontal or vertical orientation.
     */
    orientation?: DevExpress.common.Orientation;
    /**
     * Specifies properties for showing and hiding the first level submenu.
     */
    showFirstSubmenuMode?:
      | {
          /**
           * Specifies the delay in submenu showing and hiding.
           */
          delay?:
            | {
                /**
                 * The time span after which the submenu is hidden.
                 */
                hide?: number;
                /**
                 * The time span after which the submenu is shown.
                 */
                show?: number;
              }
            | number;
          /**
           * Specifies the mode name.
           */
          name?: DevExpress.common.SubmenuShowMode;
        }
      | DevExpress.common.SubmenuShowMode;
    /**
     * Specifies the direction at which the submenus are displayed.
     */
    submenuDirection?: DevExpress.ui.dxMenu.SubmenuDirection;
  }
  /**
   * The MultiView is a UI component that contains several views. An end user navigates through the views by swiping them in the horizontal direction.
   */
  export class dxMultiView<
    TProperties extends dxMultiViewOptions<TItem, TKey> = dxMultiViewOptions<
      any,
      any
    >,
    TItem extends DevExpress.ui.dxMultiView.ItemLike = any,
    TKey = any
  > extends CollectionWidget<TProperties, TItem, TKey> {}
  module dxMultiView {
    export type ContentReadyEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.EventInfo<MultiViewInstance<TItem, TKey>>;
    export type DisposingEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.EventInfo<MultiViewInstance<TItem, TKey>>;
    export type ExplicitTypes<TItem extends ItemLike, TKey> = {
      Properties: Properties<TItem, TKey>;
      ContentReadyEvent: ContentReadyEvent<TItem, TKey>;
      DisposingEvent: DisposingEvent<TItem, TKey>;
      InitializedEvent: InitializedEvent<TItem, TKey>;
      ItemClickEvent: ItemClickEvent<TItem, TKey>;
      ItemContextMenuEvent: ItemContextMenuEvent<TItem, TKey>;
      ItemHoldEvent: ItemHoldEvent<TItem, TKey>;
      ItemRenderedEvent: ItemRenderedEvent<TItem, TKey>;
      OptionChangedEvent: OptionChangedEvent<TItem, TKey>;
      SelectionChangedEvent: SelectionChangedEvent<TItem, TKey>;
    };
    export type InitializedEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.InitializedEventInfo<MultiViewInstance<TItem, TKey>>;
    export type ItemClickEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.NativeEventInfo<
      MultiViewInstance<TItem, TKey>,
      KeyboardEvent | MouseEvent | PointerEvent
    > &
      DevExpress.events.ItemInfo<TItem>;
    export type ItemContextMenuEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.NativeEventInfo<
      MultiViewInstance<TItem, TKey>,
      MouseEvent | PointerEvent | TouchEvent
    > &
      DevExpress.events.ItemInfo<TItem>;
    export type ItemHoldEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.NativeEventInfo<
      MultiViewInstance<TItem, TKey>,
      MouseEvent | PointerEvent | TouchEvent
    > &
      DevExpress.events.ItemInfo<TItem>;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export type ItemLike = string | Item | any;
    export type ItemRenderedEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.EventInfo<MultiViewInstance<TItem, TKey>> &
      DevExpress.events.ItemInfo<TItem>;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    interface MultiViewInstance<TItem, TKey>
      extends dxMultiView<Properties<TItem, TKey>, TItem, TKey> {}
    export type OptionChangedEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.EventInfo<MultiViewInstance<TItem, TKey>> &
      DevExpress.events.ChangedOptionInfo;
    export type Properties<
      TItem extends ItemLike = any,
      TKey = any
    > = dxMultiViewBaseOptions<MultiViewInstance<TItem, TKey>, TItem, TKey>;
    export type SelectionChangedEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.EventInfo<MultiViewInstance<TItem, TKey>> &
      DevExpress.ui.CollectionWidget.SelectionChangedInfo<TItem>;
  }
  /**
   * @deprecated use Properties instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxMultiViewBaseOptions<
    TComponent extends dxMultiView<any, TItem, TKey> = dxMultiView<
      any,
      any,
      any
    >,
    TItem extends DevExpress.ui.dxMultiView.ItemLike = any,
    TKey = any
  > extends CollectionWidgetOptions<TComponent, TItem, TKey> {
    /**
     * Specifies whether or not to animate the displayed item change.
     */
    animationEnabled?: boolean;
    /**
     * Binds the UI component to data.
     */
    dataSource?: DevExpress.data.DataSource.DataSourceLike<TItem, TKey> | null;
    /**
     * Specifies whether to render the view&apos;s content when it is displayed. If false, the content is rendered immediately.
     */
    deferRendering?: boolean;
    /**
     * Specifies whether the UI component can be focused using keyboard navigation.
     */
    focusStateEnabled?: boolean;
    /**
     * An array of items displayed by the UI component.
     */
    items?: Array<TItem>;
    /**
     * A Boolean value specifying whether or not to scroll back to the first item after the last item is swiped.
     */
    loop?: boolean;
    /**
     * The index of the currently displayed item.
     */
    selectedIndex?: number;
    /**
     * A Boolean value specifying whether or not to allow users to change the selected index by swiping.
     */
    swipeEnabled?: boolean;
  }
  /**
   * @deprecated Use Item instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxMultiViewItem extends CollectionWidgetItem {}
  /**
   * @deprecated use DevExpress.ui.dxMultiView.Properties instead
   */
  export interface dxMultiViewOptions<
    TItem extends DevExpress.ui.dxMultiView.ItemLike = any,
    TKey = any
  > extends DevExpress.ui.dxMultiView.Properties<TItem, TKey> {}
  /**
   * The NavBar is a UI component that navigates the application views.
   * @deprecated 
   */
  export class dxNavBar<
    TItem extends DevExpress.ui.dxNavBar.ItemLike = any,
    TKey = any
  > extends dxTabs<dxNavBarOptions<TItem, TKey>, TItem, TKey> {}
  module dxNavBar {
    export type ContentReadyEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxNavBar<TItem, TKey>>;
    export type DisposingEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxNavBar<TItem, TKey>>;
    export type ExplicitTypes<TItem extends ItemLike, TKey> = {
      Properties: Properties<TItem, TKey>;
      ContentReadyEvent: ContentReadyEvent<TItem, TKey>;
      DisposingEvent: DisposingEvent<TItem, TKey>;
      InitializedEvent: InitializedEvent<TItem, TKey>;
      ItemClickEvent: ItemClickEvent<TItem, TKey>;
      ItemContextMenuEvent: ItemContextMenuEvent<TItem, TKey>;
      ItemHoldEvent: ItemHoldEvent<TItem, TKey>;
      ItemRenderedEvent: ItemRenderedEvent<TItem, TKey>;
      OptionChangedEvent: OptionChangedEvent<TItem, TKey>;
      SelectionChangedEvent: SelectionChangedEvent<TItem, TKey>;
    };
    export type InitializedEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.InitializedEventInfo<dxNavBar<TItem, TKey>>;
    export type ItemClickEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.NativeEventInfo<
      dxNavBar<TItem, TKey>,
      KeyboardEvent | MouseEvent | PointerEvent
    > &
      DevExpress.events.ItemInfo<TItem>;
    export type ItemContextMenuEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.NativeEventInfo<
      dxNavBar<TItem, TKey>,
      MouseEvent | PointerEvent | TouchEvent
    > &
      DevExpress.events.ItemInfo<TItem>;
    export type ItemHoldEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.NativeEventInfo<
      dxNavBar<TItem, TKey>,
      MouseEvent | PointerEvent | TouchEvent
    > &
      DevExpress.events.ItemInfo<TItem>;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    type ItemLike = string | Item | any;
    export type ItemRenderedEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxNavBar<TItem, TKey>> &
      DevExpress.events.ItemInfo<TItem>;
    export type OptionChangedEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxNavBar<TItem, TKey>> &
      DevExpress.events.ChangedOptionInfo;
    export type Properties<
      TItem extends ItemLike = any,
      TKey = any
    > = dxNavBarOptions<TItem, TKey>;
    export type SelectionChangedEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxNavBar<TItem, TKey>> &
      DevExpress.ui.CollectionWidget.SelectionChangedInfo<TItem>;
  }
  /**
   * @deprecated Use Item instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxNavBarItem extends DevExpress.ui.dxTabs.Item {
    /**
     * Specifies a badge text for the navbar item.
     */
    badge?: string;
  }
  /**
   * @deprecated use Properties instead
   */
  export interface dxNavBarOptions<
    TItem extends DevExpress.ui.dxNavBar.ItemLike = any,
    TKey = any
  > extends dxTabsBaseOptions<dxNavBar<TItem, TKey>, TItem, TKey> {
    /**
     * Specifies whether or not an end-user can scroll tabs by swiping.
     */
    scrollByContent?: boolean;
  }
  /**
   * The NumberBox is a UI component that displays a numeric value and allows a user to modify it by typing in a value, and incrementing or decrementing it using the keyboard or mouse.
   */
  export class dxNumberBox extends dxTextEditor<dxNumberBoxOptions> {}
  module dxNumberBox {
    export type ChangeEvent = DevExpress.events.NativeEventInfo<
      dxNumberBox,
      Event
    >;
    export type ContentReadyEvent = DevExpress.events.EventInfo<dxNumberBox>;
    export type CopyEvent = DevExpress.events.NativeEventInfo<
      dxNumberBox,
      ClipboardEvent
    >;
    export type CutEvent = DevExpress.events.NativeEventInfo<
      dxNumberBox,
      ClipboardEvent
    >;
    export type DisposingEvent = DevExpress.events.EventInfo<dxNumberBox>;
    export type EnterKeyEvent = DevExpress.events.NativeEventInfo<
      dxNumberBox,
      KeyboardEvent
    >;
    export type FocusInEvent = DevExpress.events.NativeEventInfo<
      dxNumberBox,
      FocusEvent
    >;
    export type FocusOutEvent = DevExpress.events.NativeEventInfo<
      dxNumberBox,
      FocusEvent
    >;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxNumberBox>;
    export type InputEvent = DevExpress.events.NativeEventInfo<
      dxNumberBox,
      UIEvent & { target: HTMLInputElement }
    >;
    export type KeyDownEvent = DevExpress.events.NativeEventInfo<
      dxNumberBox,
      KeyboardEvent
    >;
    export type KeyPressEvent = DevExpress.events.NativeEventInfo<
      dxNumberBox,
      KeyboardEvent
    >;
    export type KeyUpEvent = DevExpress.events.NativeEventInfo<
      dxNumberBox,
      KeyboardEvent
    >;
    export type NumberBoxPredefinedButton = 'clear' | 'spins';
    export type NumberBoxType = 'number' | 'text' | 'tel';
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxNumberBox> &
      DevExpress.events.ChangedOptionInfo;
    export type PasteEvent = DevExpress.events.NativeEventInfo<
      dxNumberBox,
      ClipboardEvent
    >;
    export type Properties = dxNumberBoxOptions;
    export type ValueChangedEvent = DevExpress.events.NativeEventInfo<
      dxNumberBox,
      KeyboardEvent | MouseEvent | PointerEvent | TouchEvent | Event
    > &
      DevExpress.ui.Editor.ValueChangedInfo;
  }
  /**
   * @deprecated use Properties instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxNumberBoxOptions extends dxTextEditorOptions<dxNumberBox> {
    /**
     * Allows you to add custom buttons to the input text field.
     */
    buttons?: Array<
      DevExpress.ui.dxNumberBox.NumberBoxPredefinedButton | dxTextEditorButton
    >;
    /**
     * Specifies the value&apos;s display format and controls user input accordingly.
     */
    format?: Format;
    /**
     * Specifies the text of the message displayed if the specified value is not a number.
     */
    invalidValueMessage?: string;
    /**
     * The maximum value accepted by the number box.
     */
    max?: number;
    /**
     * The minimum value accepted by the number box.
     */
    min?: number;
    /**
     * Specifies the value to be passed to the type attribute of the underlying `` element.
     */
    mode?: DevExpress.ui.dxNumberBox.NumberBoxType;
    /**
     * Specifies whether to show the buttons that change the value by a step.
     */
    showSpinButtons?: boolean;
    /**
     * Specifies how much the UI component&apos;s value changes when using the spin buttons, Up/Down arrow keys, or mouse wheel.
     */
    step?: number;
    /**
     * Specifies whether to use touch friendly spin buttons. Applies only if showSpinButtons is true.
     */
    useLargeSpinButtons?: boolean;
    /**
     * The current number box value.
     */
    value?: number;
  }
  /**
   * The Overlay UI component represents a window overlaying the current view. It displays data located within the HTML element representing the UI component.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export class dxOverlay<TProperties> extends Widget<TProperties> {
    /**
     * Gets the UI component&apos;s content.
     */
    content(): DevExpress.core.DxElement;
    /**
     * Hides the UI component.
     */
    hide(): DevExpress.core.utils.DxPromise<boolean>;
    /**
     * Recalculates the UI component&apos;s size and position without rerendering.
     */
    repaint(): void;
    /**
     * Shows the UI component.
     */
    show(): DevExpress.core.utils.DxPromise<boolean>;
    /**
     * Shows or hides the UI component depending on the argument.
     */
    toggle(showing: boolean): DevExpress.core.utils.DxPromise<boolean>;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxOverlayAnimation {
    /**
     * An object that defines the animation properties used when the UI component is being hidden.
     */
    hide?: AnimationConfig;
    /**
     * An object that defines the animation properties used when the UI component is being shown.
     */
    show?: AnimationConfig;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxOverlayOptions<TComponent>
    extends WidgetOptions<TComponent> {
    /**
     * Configures UI component visibility animations. This object contains two fields: show and hide.
     */
    animation?: dxOverlayAnimation;
    /**
     * Specifies whether to close the UI component if a user clicks outside it.
     * @deprecated 
     */
    closeOnOutsideClick?:
      | boolean
      | ((
          event: DevExpress.events.DxEvent<
            MouseEvent | PointerEvent | TouchEvent
          >
        ) => boolean);
    /**
     * Specifies a custom template for the UI component content.
     */
    contentTemplate?:
      | DevExpress.core.template
      | ((
          contentElement: DevExpress.core.DxElement
        ) => string | DevExpress.core.UserDefinedElement);
    /**
     * Copies your custom CSS classes from the root element to the wrapper element.
     * @deprecated 
     */
    copyRootClassesToWrapper?: boolean;
    /**
     * Specifies whether to render the UI component&apos;s content when it is displayed. If false, the content is rendered immediately.
     */
    deferRendering?: boolean;
    /**
     * Specifies the global attributes to be attached to the UI component&apos;s container element.
     * @deprecated 
     */
    elementAttr?: any;
    /**
     * 
     */
    hideOnOutsideClick?:
      | boolean
      | ((
          event: DevExpress.events.DxEvent<
            MouseEvent | PointerEvent | TouchEvent
          >
        ) => boolean);
    /**
     * Specifies whether to hide the widget when users scroll one of its parent elements.
     */
    hideOnParentScroll?: boolean;
    /**
     * Specifies the UI component&apos;s height in pixels.
     */
    height?: number | string | (() => number | string);
    /**
     * Specifies the maximum height the UI component can reach while resizing.
     */
    maxHeight?: number | string | (() => number | string);
    /**
     * Specifies the maximum width the UI component can reach while resizing.
     */
    maxWidth?: number | string | (() => number | string);
    /**
     * Specifies the minimum height the UI component can reach while resizing.
     */
    minHeight?: number | string | (() => number | string);
    /**
     * Specifies the minimum width the UI component can reach while resizing.
     */
    minWidth?: number | string | (() => number | string);
    /**
     * A function that is executed after the UI component is hidden.
     */
    onHidden?: (e: DevExpress.events.EventInfo<TComponent>) => void;
    /**
     * A function that is executed before the UI component is hidden.
     */
    onHiding?: (
      e: DevExpress.events.Cancelable & DevExpress.events.EventInfo<TComponent>
    ) => void;
    /**
     * A function that is executed before the UI component is displayed.
     */
    onShowing?: (
      e: DevExpress.events.Cancelable & DevExpress.events.EventInfo<TComponent>
    ) => void;
    /**
     * A function that is executed after the UI component is displayed.
     */
    onShown?: (e: DevExpress.events.EventInfo<TComponent>) => void;
    /**
     * Positions the UI component.
     */
    position?: any;
    /**
     * Specifies whether to shade the background when the UI component is active.
     */
    shading?: boolean;
    /**
     * Specifies the shading color. Applies only if shading is enabled.
     */
    shadingColor?: string;
    /**
     * A Boolean value specifying whether or not the UI component is visible.
     */
    visible?: boolean;
    /**
     * Specifies the UI component&apos;s width in pixels.
     */
    width?: number | string | (() => number | string);
    /**
     * Specifies the global attributes for the UI component&apos;s wrapper element.
     */
    wrapperAttr?: any;
  }
  /**
   * The PivotGrid is a UI component that allows you to display and analyze multi-dimensional data from a local storage or an OLAP cube.
   */
  export class dxPivotGrid extends Widget<dxPivotGridOptions> {
    /**
     * Binds a Chart to the PivotGrid.
     */
    bindChart(
      chart: string | DevExpress.core.DxElement | any,
      integrationOptions: {
        inverted?: boolean;
        dataFieldsDisplayMode?: string;
        putDataFieldsInto?: string;
        alternateDataFields?: boolean;
        processCell?: Function;
        customizeChart?: Function;
        customizeSeries?: Function;
      }
    ): Function & null;
    /**
     * Exports pivot grid data to the Excel file.
     * @deprecated Use exportPivotGrid instead.
     */
    exportToExcel(): void;
    /**
     * Gets the PivotGridDataSource instance.
     */
    getDataSource(): DevExpress.data.PivotGridDataSource;
    /**
     * Gets the Popup instance of the field chooser window.
     */
    getFieldChooserPopup(): dxPopup;
    /**
     * Updates the UI component to the size of its content.
     */
    updateDimensions(): void;
  }
  module dxPivotGrid {
    export type CellClickEvent = DevExpress.events.Cancelable &
      DevExpress.events.NativeEventInfo<
        dxPivotGrid,
        MouseEvent | PointerEvent
      > & {
        readonly area?: string;
        readonly cellElement?: DevExpress.core.DxElement;
        readonly cell?: Cell;
        readonly rowIndex?: number;
        readonly columnIndex?: number;
        readonly columnFields?: Array<DevExpress.data.PivotGridDataSource.Field>;
        readonly rowFields?: Array<DevExpress.data.PivotGridDataSource.Field>;
        readonly dataFields?: Array<DevExpress.data.PivotGridDataSource.Field>;
      };
    export type CellPreparedEvent = DevExpress.events.EventInfo<dxPivotGrid> & {
      readonly area?: string;
      readonly cellElement?: DevExpress.core.DxElement;
      readonly cell?: Cell;
      readonly rowIndex?: number;
      readonly columnIndex?: number;
    };
    export type ContentReadyEvent = DevExpress.events.EventInfo<dxPivotGrid>;
    export type ContextMenuPreparingEvent =
      DevExpress.events.EventInfo<dxPivotGrid> & {
        readonly area?: string;
        readonly cell?: Cell;
        readonly cellElement?: DevExpress.core.DxElement;
        readonly columnIndex?: number;
        readonly rowIndex?: number;
        readonly dataFields?: Array<DevExpress.data.PivotGridDataSource.Field>;
        readonly rowFields?: Array<DevExpress.data.PivotGridDataSource.Field>;
        readonly columnFields?: Array<DevExpress.data.PivotGridDataSource.Field>;
        readonly field?: DevExpress.data.PivotGridDataSource.Field;
        items?: Array<any>;
      };
    export type DisposingEvent = DevExpress.events.EventInfo<dxPivotGrid>;
    export type ExportedEvent = DevExpress.events.EventInfo<dxPivotGrid>;
    export type ExportingEvent = DevExpress.events.Cancelable &
      DevExpress.events.EventInfo<dxPivotGrid> & {
        fileName?: string;
      };
    export type FileSavingEvent = DevExpress.events.Cancelable & {
      readonly component: dxPivotGrid;
      readonly element: DevExpress.core.DxElement;
      readonly data?: Blob;
      readonly format?: string;
      fileName?: string;
    };
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxPivotGrid>;
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxPivotGrid> &
      DevExpress.events.ChangedOptionInfo;
    export type PivotGridDataFieldArea = 'column' | 'row';
    export type PivotGridRowHeaderLayout = 'standard' | 'tree';
    export type PivotGridTotalDisplayMode =
      | 'both'
      | 'columns'
      | 'none'
      | 'rows';
    export type Properties = dxPivotGridOptions;
  }
  /**
   * A complementary UI component for the PivotGrid that allows you to manage data displayed in the PivotGrid. The field chooser is already integrated in the PivotGrid and can be invoked using the context menu. If you need to continuously display the field chooser near the PivotGrid UI component, use the PivotGridFieldChooser UI component.
   */
  export class dxPivotGridFieldChooser extends Widget<dxPivotGridFieldChooserOptions> {
    /**
     * Applies changes made in the UI component to the PivotGrid. Takes effect only if applyChangesMode is &apos;onDemand&apos;.
     */
    applyChanges(): void;
    /**
     * Cancels changes made in the UI component without applying them to the PivotGrid. Takes effect only if applyChangesMode is &apos;onDemand&apos;.
     */
    cancelChanges(): void;
    /**
     * Gets the PivotGridDataSource instance.
     */
    getDataSource(): DevExpress.data.PivotGridDataSource;
    /**
     * Updates the UI component to the size of its content.
     */
    updateDimensions(): void;
  }
  module dxPivotGridFieldChooser {
    export type ContentReadyEvent =
      DevExpress.events.EventInfo<dxPivotGridFieldChooser>;
    export type ContextMenuPreparingEvent =
      DevExpress.events.EventInfo<dxPivotGridFieldChooser> & {
        readonly area?: string;
        readonly field?: DevExpress.data.PivotGridDataSource.Field;
        readonly event?: DevExpress.events.DxEvent;
        items?: Array<any>;
      };
    export type DisposingEvent =
      DevExpress.events.EventInfo<dxPivotGridFieldChooser>;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxPivotGridFieldChooser>;
    export type OptionChangedEvent =
      DevExpress.events.EventInfo<dxPivotGridFieldChooser> &
        DevExpress.events.ChangedOptionInfo;
    export type Properties = dxPivotGridFieldChooserOptions;
  }
  /**
   * @deprecated use Properties instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxPivotGridFieldChooserOptions
    extends WidgetOptions<dxPivotGridFieldChooser> {
    /**
     * Specifies whether the field chooser allows searching in the &apos;All Fields&apos; section.
     */
    allowSearch?: boolean;
    /**
     * Specifies when to apply changes made in the UI component to the PivotGrid.
     */
    applyChangesMode?: DevExpress.common.charts.ApplyChangesMode;
    /**
     * The data source of a PivotGrid UI component.
     */
    dataSource?: DevExpress.data.PivotGridDataSource | null;
    /**
     * 
     */
    encodeHtml?: boolean;
    /**
     * Configures the header filter feature.
     */
    headerFilter?: {
      /**
       * Specifies whether searching is enabled in the header filter.
       */
      allowSearch?: boolean;
      /**
       * Specifies the height of the popup menu containing filtering values.
       */
      height?: number;
      /**
       * Specifies a delay in milliseconds between when a user finishes typing in the header filter&apos;s search panel, and when the search is executed.
       */
      searchTimeout?: number;
      /**
       * Specifies whether to show all field values or only those that satisfy the other applied filters.
       */
      showRelevantValues?: boolean;
      /**
       * Configures the texts of the popup menu&apos;s elements.
       */
      texts?: {
        /**
         * Specifies the text of the button that closes the popup menu without applying a filter.
         */
        cancel?: string;
        /**
         * Specifies the name of the item that represents empty values in the popup menu.
         */
        emptyValue?: string;
        /**
         * Specifies the text of the button that applies a filter.
         */
        ok?: string;
      };
      /**
       * Specifies the width of the popup menu containing filtering values.
       */
      width?: number;
    };
    /**
     * Specifies the UI component&apos;s height.
     */
    height?: number | string | (() => number | string);
    /**
     * Specifies the field chooser layout.
     */
    layout?: DevExpress.common.FieldChooserLayout;
    /**
     * A function that is executed before the context menu is rendered.
     */
    onContextMenuPreparing?: (
      e: DevExpress.ui.dxPivotGridFieldChooser.ContextMenuPreparingEvent
    ) => void;
    /**
     * Specifies a delay in milliseconds between when a user finishes typing in the field chooser&apos;s search panel, and when the search is executed.
     */
    searchTimeout?: number;
    /**
     * The UI component&apos;s state.
     */
    state?: any;
    /**
     * Strings that can be changed or localized in the PivotGridFieldChooser UI component.
     */
    texts?: {
      /**
       * The string to display instead of All Fields.
       */
      allFields?: string;
      /**
       * The string to display instead of Column Fields.
       */
      columnFields?: string;
      /**
       * The string to display instead of Data Fields.
       */
      dataFields?: string;
      /**
       * The string to display instead of Filter Fields.
       */
      filterFields?: string;
      /**
       * The string to display instead of Row Fields.
       */
      rowFields?: string;
    };
  }
  /**
   * @deprecated use Properties instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxPivotGridOptions extends WidgetOptions<dxPivotGrid> {
    /**
     * Allows users to expand/collapse all header items within the same header level. Ignored if the PivotGridDataSource&apos;s paginate property is true.
     */
    allowExpandAll?: boolean;
    /**
     * Allows a user to filter fields by selecting or deselecting values in the popup menu.
     */
    allowFiltering?: boolean;
    /**
     * Allows an end-user to change sorting properties.
     */
    allowSorting?: boolean;
    /**
     * Allows users to sort the pivot grid by summary values instead of field values. Ignored if the PivotGridDataSource&apos;s paginate property is true.
     */
    allowSortingBySummary?: boolean;
    /**
     * Specifies the area to which data field headers must belong.
     */
    dataFieldArea?: DevExpress.ui.dxPivotGrid.PivotGridDataFieldArea;
    /**
     * Binds the UI component to data.
     */
    dataSource?:
      | Array<any>
      | DevExpress.data.PivotGridDataSource
      | DevExpress.data.PivotGridDataSource.Options
      | null;
    /**
     * Specifies whether HTML tags are displayed as plain text or applied to cell values.
     */
    encodeHtml?: boolean;
    /**
     * Configures client-side exporting.
     */
    export?: {
      /**
       * Enables client-side exporting.
       */
      enabled?: boolean;
      /**
       * Specifies a default name for the file to which grid data is exported.
       * @deprecated Since v20.2, we recommend ExcelJS-based export which does not use this property.
       */
      fileName?: string;
      /**
       * Specifies whether Excel should hide warnings if there are errors in the exported document.
       * @deprecated Since v20.2, we recommend ExcelJS-based export which does not use this property.
       */
      ignoreExcelErrors?: boolean;
      /**
       * Specifies the URL of the server-side proxy that streams the resulting file to the end user to enable exporting in the Safari browser.
       * @deprecated Since v10, Safari browser supports API for saving files, and this property is no longer required.
       */
      proxyUrl?: string;
    };
    /**
     * The Field Chooser configuration properties.
     */
    fieldChooser?: {
      /**
       * Specifies whether the field chooser allows searching in the &apos;All Fields&apos; section.
       */
      allowSearch?: boolean;
      /**
       * Specifies when to apply changes made in the field chooser to the PivotGrid.
       */
      applyChangesMode?: DevExpress.common.charts.ApplyChangesMode;
      /**
       * Enables or disables the field chooser.
       */
      enabled?: boolean;
      /**
       * Specifies the field chooser height.
       */
      height?: number;
      /**
       * Specifies the field chooser layout.
       */
      layout?: DevExpress.common.FieldChooserLayout;
      /**
       * Specifies a delay in milliseconds between when a user finishes typing in the field chooser&apos;s search panel, and when the search is executed.
       */
      searchTimeout?: number;
      /**
       * Strings that can be changed or localized in the pivot grid&apos;s integrated Field Chooser.
       */
      texts?: {
        /**
         * The string to display instead of All Fields.
         */
        allFields?: string;
        /**
         * The string to display instead of Column Fields.
         */
        columnFields?: string;
        /**
         * The string to display instead of Data Fields.
         */
        dataFields?: string;
        /**
         * The string to display instead of Filter Fields.
         */
        filterFields?: string;
        /**
         * The string to display instead of Row Fields.
         */
        rowFields?: string;
      };
      /**
       * Specifies the text to display as a title of the field chooser popup window.
       */
      title?: string;
      /**
       * Specifies the field chooser width.
       */
      width?: number;
    };
    /**
     * Configures the field panel.
     */
    fieldPanel?: {
      /**
       * Makes fields on the field panel draggable.
       */
      allowFieldDragging?: boolean;
      /**
       * Shows/hides column fields on the field panel.
       */
      showColumnFields?: boolean;
      /**
       * Shows/hides data fields on the field panel.
       */
      showDataFields?: boolean;
      /**
       * Shows/hides filter fields on the field panel.
       */
      showFilterFields?: boolean;
      /**
       * Shows/hides row fields on the field panel.
       */
      showRowFields?: boolean;
      /**
       * Specifies the placeholders of the field areas.
       */
      texts?: {
        /**
         * Specifies the placeholder of the column field area.
         */
        columnFieldArea?: string;
        /**
         * Specifies the placeholder of the data field area.
         */
        dataFieldArea?: string;
        /**
         * Specifies the placeholder of the filter field area.
         */
        filterFieldArea?: string;
        /**
         * Specifies the placeholder of the row field area.
         */
        rowFieldArea?: string;
      };
      /**
       * Shows/hides the field panel.
       */
      visible?: boolean;
    };
    /**
     * Configures the header filter feature.
     */
    headerFilter?: {
      /**
       * Specifies whether searching is enabled in the header filter.
       */
      allowSearch?: boolean;
      /**
       * Specifies the height of the popup menu containing filtering values.
       */
      height?: number;
      /**
       * Specifies a delay in milliseconds between when a user finishes typing in the header filter&apos;s search panel, and when the search is executed.
       */
      searchTimeout?: number;
      /**
       * Specifies whether to show all field values or only those that satisfy the other applied filters.
       */
      showRelevantValues?: boolean;
      /**
       * Configures the texts of the popup menu&apos;s elements.
       */
      texts?: {
        /**
         * Specifies the text of the button that closes the popup menu without applying a filter.
         */
        cancel?: string;
        /**
         * Specifies the name of the item that represents empty values in the popup menu.
         */
        emptyValue?: string;
        /**
         * Specifies the text of the button that applies a filter.
         */
        ok?: string;
      };
      /**
       * Specifies the width of the popup menu containing filtering values.
       */
      width?: number;
    };
    /**
     * Specifies whether or not to hide rows and columns with no data.
     */
    hideEmptySummaryCells?: boolean;
    /**
     * Specifies properties configuring the load panel.
     */
    loadPanel?: {
      /**
       * Enables or disables the load panel.
       */
      enabled?: boolean;
      /**
       * Specifies the height of the load panel.
       */
      height?: number;
      /**
       * Specifies the URL pointing to an image that will be used as a load indicator.
       */
      indicatorSrc?: string;
      /**
       * Specifies whether to shade the UI component when the load panel appears.
       */
      shading?: boolean;
      /**
       * Specifies the shading color. Applies only if shading is true.
       */
      shadingColor?: string;
      /**
       * Specifies whether or not to show a load indicator.
       */
      showIndicator?: boolean;
      /**
       * Specifies whether or not to show load panel background.
       */
      showPane?: boolean;
      /**
       * Specifies the text to display inside a load panel.
       */
      text?: string;
      /**
       * Specifies the width of the load panel.
       */
      width?: number;
    };
    /**
     * A function that is executed when a pivot grid cell is clicked or tapped.
     */
    onCellClick?: (e: DevExpress.ui.dxPivotGrid.CellClickEvent) => void;
    /**
     * A function that is executed after a pivot grid cell is created.
     */
    onCellPrepared?: (e: DevExpress.ui.dxPivotGrid.CellPreparedEvent) => void;
    /**
     * A function that is executed before the context menu is rendered.
     */
    onContextMenuPreparing?: (
      e: DevExpress.ui.dxPivotGrid.ContextMenuPreparingEvent
    ) => void;
    /**
     * A function that is executed after data is exported.
     * @deprecated Since v20.2, we recommend ExcelJS-based export which does not use this property.
     */
    onExported?: (e: DevExpress.ui.dxPivotGrid.ExportedEvent) => void;
    /**
     * A function that is executed before data is exported.
     */
    onExporting?: (e: DevExpress.ui.dxPivotGrid.ExportingEvent) => void;
    /**
     * A function that is executed before a file with exported data is saved to the user&apos;s local storage.
     * @deprecated Since v20.2, we recommend ExcelJS-based export which does not use this property.
     */
    onFileSaving?: (e: DevExpress.ui.dxPivotGrid.FileSavingEvent) => void;
    /**
     * Specifies the layout of items in the row header.
     */
    rowHeaderLayout?: DevExpress.ui.dxPivotGrid.PivotGridRowHeaderLayout;
    /**
     * A configuration object specifying scrolling properties.
     */
    scrolling?: {
      /**
       * Specifies the scrolling mode.
       */
      mode?: DevExpress.common.ScrollMode;
      /**
       * Specifies whether or not the UI component uses native scrolling.
       */
      useNative?: boolean | DevExpress.common.Mode;
    };
    /**
     * Specifies whether the outer borders of the grid are visible or not.
     */
    showBorders?: boolean;
    /**
     * Specifies whether to display the Grand Total column.
     */
    showColumnGrandTotals?: boolean;
    /**
     * Specifies whether to display the Total columns.
     */
    showColumnTotals?: boolean;
    /**
     * Specifies whether to display the Grand Total row.
     */
    showRowGrandTotals?: boolean;
    /**
     * Specifies whether to display the Total rows. Applies only if rowHeaderLayout is &apos;standard&apos;.
     */
    showRowTotals?: boolean;
    /**
     * Specifies where to show the total rows or columns.
     */
    showTotalsPrior?: DevExpress.ui.dxPivotGrid.PivotGridTotalDisplayMode;
    /**
     * A configuration object specifying properties related to state storing.
     */
    stateStoring?: {
      /**
       * Specifies a function that is executed on state loading. Applies only if the type is &apos;custom&apos;.
       */
      customLoad?: () => PromiseLike<any>;
      /**
       * Specifies a function that is executed on state saving. Applies only if the type is &apos;custom&apos;.
       */
      customSave?: (state: any) => any;
      /**
       * Specifies whether or not a grid saves its state.
       */
      enabled?: boolean;
      /**
       * Specifies the delay between the last change of a grid state and the operation of saving this state in milliseconds.
       */
      savingTimeout?: number;
      /**
       * Specifies a unique key to be used for storing the grid state.
       */
      storageKey?: string;
      /**
       * Specifies the type of storage to be used for state storing.
       */
      type?: DevExpress.common.charts.StateStoreType;
    };
    /**
     * Strings that can be changed or localized in the PivotGrid UI component.
     */
    texts?: {
      /**
       * The string to display as a Collapse All context menu item.
       */
      collapseAll?: string;
      /**
       * Specifies text displayed in a cell when its data is unavailable for some reason.
       */
      dataNotAvailable?: string;
      /**
       * The string to display as an Expand All context menu item.
       */
      expandAll?: string;
      /**
       * The string to display as an Export to Excel file context menu item.
       */
      exportToExcel?: string;
      /**
       * The string to display as a header of the Grand Total row and column.
       */
      grandTotal?: string;
      /**
       * Specifies the text displayed when a pivot grid does not contain any fields.
       */
      noData?: string;
      /**
       * The string to display as a Remove All Sorting context menu item.
       */
      removeAllSorting?: string;
      /**
       * The string to display as a Show Field Chooser context menu item.
       */
      showFieldChooser?: string;
      /**
       * The string to display as a Sort Column by Summary Value context menu item.
       */
      sortColumnBySummary?: string;
      /**
       * The string to display as a Sort Row by Summary Value context menu item.
       */
      sortRowBySummary?: string;
      /**
       * The string to display as a header of the Total row and column.
       */
      total?: string;
    };
    /**
     * Specifies whether long text in header items should be wrapped.
     */
    wordWrapEnabled?: boolean;
  }
  /**
   * @deprecated Use Cell instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxPivotGridPivotGridCell {
    /**
     * The cell&apos;s column path. Available for data area cells only.
     */
    columnPath?: Array<string | number | Date>;
    /**
     * The type of the column to which the cell belongs. Available for data area cells only.
     */
    columnType?: 'D' | 'T' | 'GT';
    /**
     * The data field&apos;s index. Available for data area cells only.
     */
    dataIndex?: number;
    /**
     * Indicates whether the cell is expanded. Available for row or column area cells only.
     */
    expanded?: boolean;
    /**
     * The path to the row/column cell. Available for row or column area cells only.
     */
    path?: Array<string | number | Date>;
    /**
     * The cell&apos;s row path. Available for data area cells only.
     */
    rowPath?: Array<string | number | Date>;
    /**
     * The type of the row to which the cell belongs. Available for data area cells only.
     */
    rowType?: 'D' | 'T' | 'GT';
    /**
     * The text displayed in the cell.
     */
    text?: string;
    /**
     * The cell&apos;s type. Available for row or column area cells only.
     */
    type?: 'D' | 'T' | 'GT';
    /**
     * The cell&apos;s value.
     */
    value?: any;
  }
  /**
   * An object exposing methods that manipulate a summary cell and provide access to its neighboring cells.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxPivotGridSummaryCell {
    /**
     * Gets the child cell in a specified direction.
     */
    child(
      direction: string,
      fieldValue: number | string
    ): dxPivotGridSummaryCell;
    /**
     * Gets all child cells in a specified direction.
     */
    children(direction: string): Array<dxPivotGridSummaryCell>;
    /**
     * Gets a pivot grid field that corresponds to the summary cell.
     */
    field(area: string): DevExpress.data.PivotGridDataSource.Field;
    /**
     * Gets the Grand Total of the entire pivot grid.
     */
    grandTotal(): dxPivotGridSummaryCell;
    /**
     * Gets a partial Grand Total cell of a row or column.
     */
    grandTotal(direction: string): dxPivotGridSummaryCell;
    /**
     * Indicates whether the summaryDisplayMode or calculateSummaryValue post-processed the summary value.
     */
    isPostProcessed(
      field: DevExpress.data.PivotGridDataSource.Field | string
    ): boolean;
    /**
     * Gets the cell next to the current one in a specified direction.
     */
    next(direction: string): dxPivotGridSummaryCell;
    /**
     * Gets the cell next to current in a specified direction.
     */
    next(direction: string, allowCrossGroup: boolean): dxPivotGridSummaryCell;
    /**
     * Gets the parent cell in a specified direction.
     */
    parent(direction: string): dxPivotGridSummaryCell;
    /**
     * Gets the cell prior to the current one in a specified direction.
     */
    prev(direction: string): dxPivotGridSummaryCell;
    /**
     * Gets the cell previous to current in a specified direction.
     */
    prev(direction: string, allowCrossGroup: boolean): dxPivotGridSummaryCell;
    /**
     * Gets the cell located by the path of the source cell with one field value changed.
     */
    slice(
      field: DevExpress.data.PivotGridDataSource.Field,
      value: number | string
    ): dxPivotGridSummaryCell;
    /**
     * Gets the summary cell value.
     */
    value(): any;
    /**
     * Gets the value of any field associated with the summary cell.
     */
    value(field: DevExpress.data.PivotGridDataSource.Field | string): any;
    /**
     * Gets the value of any field associated with the summary cell.
     */
    value(
      field: DevExpress.data.PivotGridDataSource.Field | string,
      postProcessed: boolean
    ): any;
    /**
     * Gets the summary cell value.
     */
    value(postProcessed: boolean): any;
  }
  /**
   * The Popover is a UI component that shows notifications within a box with an arrow pointing to a specified UI element.
   */
  export class dxPopover<
    TProperties = DevExpress.ui.dxPopover.Properties
  > extends dxPopup<TProperties> {
    show(): DevExpress.core.utils.DxPromise<boolean>;
    /**
     * Shows the UI component for a target element.
     */
    show(
      target: string | DevExpress.core.UserDefinedElement
    ): DevExpress.core.utils.DxPromise<boolean>;
  }
  module dxPopover {
    export type ContentReadyEvent = DevExpress.events.EventInfo<dxPopover>;
    export type DisposingEvent = DevExpress.events.EventInfo<dxPopover>;
    export type HiddenEvent = DevExpress.events.EventInfo<dxPopover>;
    export type HidingEvent = DevExpress.events.Cancelable &
      DevExpress.events.EventInfo<dxPopover>;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxPopover>;
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxPopover> &
      DevExpress.events.ChangedOptionInfo;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    interface PopoverInstance extends dxPopover<Properties> {}
    export type Properties = dxPopoverOptions<PopoverInstance>;
    export type ShowingEvent = DevExpress.events.Cancelable &
      DevExpress.events.EventInfo<dxPopover>;
    export type ShownEvent = DevExpress.events.EventInfo<dxPopover>;
    export type TitleRenderedEvent = DevExpress.events.EventInfo<dxPopover> &
      DevExpress.ui.dxPopup.TitleRenderedInfo;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxPopoverAnimation extends dxPopupAnimation {
    /**
     * An object that defines the animation properties used when the UI component is being hidden.
     */
    hide?: AnimationConfig;
    /**
     * An object that defines the animation properties used when the UI component is being shown.
     */
    show?: AnimationConfig;
  }
  /**
   * @deprecated use Properties instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxPopoverOptions<TComponent>
    extends dxPopupOptions<TComponent> {
    /**
     * Configures UI component visibility animations. This object contains two fields: show and hide.
     */
    animation?: dxPopoverAnimation;
    /**
     * Specifies whether to close the UI component if a user clicks outside the popover window or outside the target element.
     * @deprecated 
     */
    closeOnOutsideClick?:
      | boolean
      | ((
          event: DevExpress.events.DxEvent<
            MouseEvent | PointerEvent | TouchEvent
          >
        ) => boolean);
    /**
     * Specifies the UI component&apos;s height.
     */
    height?: number | string | (() => number | string);
    /**
     * Specifies properties of popover hiding. Ignored if the shading property is set to true.
     */
    hideEvent?:
      | {
          /**
           * The delay in milliseconds after which the UI component is hidden.
           */
          delay?: number;
          /**
           * Specifies the event names on which the UI component is hidden.
           */
          name?: string;
        }
      | string;
    /**
     * 
     */
    hideOnOutsideClick?:
      | boolean
      | ((
          event: DevExpress.events.DxEvent<
            MouseEvent | PointerEvent | TouchEvent
          >
        ) => boolean);
    /**
     * Specifies whether to hide the widget when users scroll one of its parent elements.
     */
    hideOnParentScroll?: boolean;
    /**
     * An object defining UI component positioning properties.
     */
    position?: DevExpress.common.Position | PositionConfig;
    /**
     * Specifies whether to shade the background when the UI component is active.
     */
    shading?: boolean;
    /**
     * Specifies properties for displaying the UI component.
     */
    showEvent?:
      | {
          /**
           * The delay in milliseconds after which the UI component is displayed.
           */
          delay?: number;
          /**
           * Specifies the event names on which the UI component is shown.
           */
          name?: string;
        }
      | string;
    /**
     * A Boolean value specifying whether or not to display the title in the overlay window.
     */
    showTitle?: boolean;
    /**
     * The target element associated with the widget.
     */
    target?: string | DevExpress.core.UserDefinedElement;
    /**
     * Specifies the UI component&apos;s width.
     */
    width?: number | string | (() => number | string);
  }
  /**
   * The Popup UI component is a pop-up window overlaying the current view.
   */
  export class dxPopup<
    TProperties = DevExpress.ui.dxPopup.Properties
  > extends dxOverlay<TProperties> {}
  module dxPopup {
    export type ContentReadyEvent = DevExpress.events.EventInfo<dxPopup>;
    export type DisposingEvent = DevExpress.events.EventInfo<dxPopup>;
    export type HiddenEvent = DevExpress.events.EventInfo<dxPopup>;
    export type HidingEvent = DevExpress.events.Cancelable &
      DevExpress.events.EventInfo<dxPopup>;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxPopup>;
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxPopup> &
      DevExpress.events.ChangedOptionInfo;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    interface PopupInstance extends dxPopup<Properties> {}
    export type Properties = dxPopupOptions<PopupInstance>;
    export type ResizeEndEvent = DevExpress.events.NativeEventInfo<
      dxPopup,
      MouseEvent | TouchEvent
    > &
      DevExpress.ui.dxResizable.ResizeInfo;
    export type ResizeEvent = DevExpress.events.NativeEventInfo<
      dxPopup,
      MouseEvent | TouchEvent
    > &
      DevExpress.ui.dxResizable.ResizeInfo;
    export type ResizeStartEvent = DevExpress.events.NativeEventInfo<
      dxPopup,
      MouseEvent | TouchEvent
    > &
      DevExpress.ui.dxResizable.ResizeInfo;
    export type ShowingEvent = DevExpress.events.Cancelable &
      DevExpress.events.EventInfo<dxPopup>;
    export type ShownEvent = DevExpress.events.EventInfo<dxPopup>;
    export type TitleRenderedEvent = DevExpress.events.EventInfo<dxPopup> &
      TitleRenderedInfo;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export interface TitleRenderedInfo {
      readonly titleElement: DevExpress.core.DxElement;
    }
    export type ToolbarLocation = 'bottom' | 'top';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxPopupAnimation extends dxOverlayAnimation {
    /**
     * An object that defines the animation properties used when the UI component is being hidden.
     */
    hide?: AnimationConfig;
    /**
     * An object that defines the animation properties used when the UI component is being shown.
     */
    show?: AnimationConfig;
  }
  /**
   * @deprecated use Properties instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxPopupOptions<TComponent>
    extends dxOverlayOptions<TComponent> {
    /**
     * Configures UI component visibility animations. This object contains two fields: show and hide.
     */
    animation?: dxPopupAnimation;
    /**
     * Specifies the container in which to render the UI component.
     */
    container?: string | DevExpress.core.UserDefinedElement;
    /**
     * 
     */
    dragAndResizeArea?: string | DevExpress.core.UserDefinedElement;
    /**
     * Specifies whether or not to allow a user to drag the popup window.
     */
    dragEnabled?: boolean;
    /**
     * 
     */
    dragOutsideBoundary?: boolean;
    /**
     * Specifies whether the UI component can be focused using keyboard navigation.
     */
    focusStateEnabled?: boolean;
    /**
     * Specifies whether to display the Popup in full-screen mode.
     */
    fullScreen?: boolean;
    /**
     * Specifies the UI component&apos;s height in pixels.
     */
    height?: number | string | (() => number | string);
    /**
     * A function that is executed each time the UI component is resized by one pixel.
     */
    onResize?: (e: DevExpress.ui.dxPopup.ResizeEvent) => void;
    /**
     * A function that is executed when resizing ends.
     */
    onResizeEnd?: (e: DevExpress.ui.dxPopup.ResizeEndEvent) => void;
    /**
     * A function that is executed when resizing starts.
     */
    onResizeStart?: (e: DevExpress.ui.dxPopup.ResizeStartEvent) => void;
    /**
     * A function that is executed when the UI component&apos;s title is rendered.
     */
    onTitleRendered?: (
      e: DevExpress.events.EventInfo<TComponent> &
        DevExpress.ui.dxPopup.TitleRenderedInfo
    ) => void;
    /**
     * Positions the UI component.
     */
    position?: DevExpress.common.PositionAlignment | PositionConfig | Function;
    /**
     * Specifies whether or not an end user can resize the UI component.
     */
    resizeEnabled?: boolean;
    /**
     * Specifies whether to display the widget at the initial position when users reopen it.
     */
    restorePosition?: boolean;
    /**
     * Specifies whether or not the UI component displays the Close button.
     */
    showCloseButton?: boolean;
    /**
     * A Boolean value specifying whether or not to display the title in the popup window.
     */
    showTitle?: boolean;
    /**
     * The title in the overlay window.
     */
    title?: string;
    /**
     * Specifies a custom template for the UI component title. Does not apply if the title is defined.
     */
    titleTemplate?:
      | DevExpress.core.template
      | ((
          titleElement: DevExpress.core.DxElement
        ) => string | DevExpress.core.UserDefinedElement);
    /**
     * Configures toolbar items.
     */
    toolbarItems?: Array<DevExpress.ui.dxPopup.ToolbarItem>;
    /**
     * Specifies the UI component&apos;s width in pixels.
     */
    width?: number | string | (() => number | string);
  }
  /**
   * @deprecated Use ToolbarItem instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxPopupToolbarItem {
    /**
     * Specifies whether the toolbar item responds to user interaction.
     */
    disabled?: boolean;
    /**
     * Specifies the HTML markup to be inserted into the toolbar item element.
     */
    html?: string;
    /**
     * Specifies a location for the item on the toolbar.
     */
    location?: DevExpress.common.ToolbarItemLocation;
    /**
     * Configures the DevExtreme UI component used as a toolbar item.
     */
    options?: any;
    /**
     * Specifies a template that should be used to render this item only.
     */
    template?: DevExpress.core.template;
    /**
     * Specifies text displayed for the toolbar item.
     */
    text?: string;
    /**
     * Specifies whether the item is displayed on a top or bottom toolbar.
     */
    toolbar?: DevExpress.ui.dxPopup.ToolbarLocation;
    /**
     * Specifies whether or not a UI component item must be displayed.
     */
    visible?: boolean;
    /**
     * A UI component that presents a toolbar item.
     */
    widget?: DevExpress.common.ToolbarItemComponent;
  }
  /**
   * The ProgressBar is a UI component that shows current progress.
   */
  export class dxProgressBar extends dxTrackBar<dxProgressBarOptions> {}
  module dxProgressBar {
    export type CompleteEvent =
      DevExpress.events.NativeEventInfo<dxProgressBar>;
    export type ContentReadyEvent = DevExpress.events.EventInfo<dxProgressBar>;
    export type DisposingEvent = DevExpress.events.EventInfo<dxProgressBar>;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxProgressBar>;
    export type OptionChangedEvent =
      DevExpress.events.EventInfo<dxProgressBar> &
        DevExpress.events.ChangedOptionInfo;
    export type Properties = dxProgressBarOptions;
    export type ValueChangedEvent =
      DevExpress.events.NativeEventInfo<dxProgressBar> &
        DevExpress.ui.Editor.ValueChangedInfo;
  }
  /**
   * @deprecated use Properties instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxProgressBarOptions
    extends dxTrackBarOptions<dxProgressBar> {
    /**
     * A function that is executed when the value reaches the maximum.
     */
    onComplete?: (e: DevExpress.ui.dxProgressBar.CompleteEvent) => void;
    /**
     * Specifies whether or not the UI component displays a progress status.
     */
    showStatus?: boolean;
    /**
     * Specifies a format for the progress status.
     */
    statusFormat?: string | ((ratio: number, value: number) => string);
    /**
     * The current UI component value.
     */
    value?: number | false;
  }
  /**
   * The RadioGroup is a UI component that contains a set of radio buttons and allows an end user to make a single selection from the set.
   */
  export class dxRadioGroup extends Editor<dxRadioGroupOptions> {
    getDataSource(): DevExpress.data.DataSource;
  }
  module dxRadioGroup {
    export type ContentReadyEvent = DevExpress.events.EventInfo<dxRadioGroup>;
    export type DisposingEvent = DevExpress.events.EventInfo<dxRadioGroup>;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxRadioGroup>;
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxRadioGroup> &
      DevExpress.events.ChangedOptionInfo;
    export type Properties = dxRadioGroupOptions;
    export type ValueChangedEvent = DevExpress.events.NativeEventInfo<
      dxRadioGroup,
      KeyboardEvent | MouseEvent | PointerEvent | Event
    > &
      DevExpress.ui.Editor.ValueChangedInfo;
  }
  /**
   * @deprecated use Properties instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxRadioGroupOptions
    extends EditorOptions<dxRadioGroup>,
      DataExpressionMixinOptions<dxRadioGroup> {
    /**
     * Specifies whether or not the UI component changes its state when interacting with a user.
     */
    activeStateEnabled?: boolean;
    /**
     * Specifies whether the UI component can be focused using keyboard navigation.
     */
    focusStateEnabled?: boolean;
    /**
     * Specifies whether the UI component changes its state when a user pauses on it.
     */
    hoverStateEnabled?: boolean;
    /**
     * Specifies the radio group layout.
     */
    layout?: DevExpress.common.Orientation;
    /**
     * The value to be assigned to the `name` attribute of the underlying HTML element.
     */
    name?: string;
    /**
     * Specifies the UI component&apos;s value.
     */
    value?: any;
  }
  /**
   * The RangeSlider is a UI component that allows an end user to choose a range of numeric values.
   */
  export class dxRangeSlider extends dxTrackBar<dxRangeSliderOptions> {}
  module dxRangeSlider {
    export type ContentReadyEvent = DevExpress.events.EventInfo<dxRangeSlider>;
    export type DisposingEvent = DevExpress.events.EventInfo<dxRangeSlider>;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxRangeSlider>;
    export type OptionChangedEvent =
      DevExpress.events.EventInfo<dxRangeSlider> &
        DevExpress.events.ChangedOptionInfo;
    export type Properties = dxRangeSliderOptions;
    export type ValueChangedEvent = DevExpress.events.NativeEventInfo<
      dxRangeSlider,
      KeyboardEvent | MouseEvent | PointerEvent | TouchEvent | UIEvent | Event
    > &
      DevExpress.ui.Editor.ValueChangedInfo & {
        readonly start?: number;
        readonly end?: number;
        readonly value?: Array<number>;
      };
  }
  /**
   * @deprecated use Properties instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxRangeSliderOptions
    extends dxSliderBaseOptions<dxRangeSlider> {
    /**
     * The right edge of the interval currently selected using the range slider.
     */
    end?: number;
    /**
     * The value to be assigned to the name attribute of the underlying `` element.
     */
    endName?: string;
    /**
     * A function that is executed after the UI component&apos;s value is changed.
     */
    onValueChanged?: (e: DevExpress.ui.dxRangeSlider.ValueChangedEvent) => void;
    /**
     * The left edge of the interval currently selected using the range slider.
     */
    start?: number;
    /**
     * The value to be assigned to the name attribute of the underlying `` element.
     */
    startName?: string;
    /**
     * Specifies the UI component&apos;s value.
     */
    value?: Array<number>;
  }
  /**
   * A base class for editors.
   */
  export class dxRecurrenceEditor extends Editor<dxRecurrenceEditorOptions> {}
  module dxRecurrenceEditor {
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export type Properties = dxRecurrenceEditorOptions;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxRecurrenceEditorOptions
    extends EditorOptions<dxRecurrenceEditor> {
    /**
     * Specifies the UI component&apos;s value.
     */
    value?: string;
  }
  /**
   * The Resizable UI component enables its content to be resizable in the UI.
   */
  export class dxResizable extends DOMComponent<dxResizableOptions> {}
  module dxResizable {
    export type DisposingEvent = DevExpress.events.EventInfo<dxResizable>;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxResizable>;
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxResizable> &
      DevExpress.events.ChangedOptionInfo;
    export type Properties = dxResizableOptions;
    export type ResizeEndEvent = DevExpress.events.NativeEventInfo<
      dxResizable,
      MouseEvent | TouchEvent
    > &
      ResizeInfo;
    export type ResizeEvent = DevExpress.events.NativeEventInfo<
      dxResizable,
      MouseEvent | TouchEvent
    > &
      ResizeInfo;
    export type ResizeHandle = 'bottom' | 'left' | 'right' | 'top' | 'all';
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export interface ResizeInfo {
      readonly width: number;
      readonly height: number;
    }
    export type ResizeStartEvent = DevExpress.events.NativeEventInfo<
      dxResizable,
      MouseEvent | TouchEvent
    > &
      ResizeInfo;
  }
  /**
   * @deprecated use Properties instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxResizableOptions extends DOMComponentOptions<dxResizable> {
    /**
     * 
     */
    area?: string | DevExpress.core.UserDefinedElement;
    /**
     * Specifies which borders of the UI component element are used as a handle.
     */
    handles?: DevExpress.ui.dxResizable.ResizeHandle | string;
    /**
     * Specifies the UI component&apos;s height.
     */
    height?: number | string | (() => number | string);
    /**
     * 
     */
    keepAspectRatio?: boolean;
    /**
     * Specifies the upper height boundary for resizing.
     */
    maxHeight?: number;
    /**
     * Specifies the upper width boundary for resizing.
     */
    maxWidth?: number;
    /**
     * Specifies the lower height boundary for resizing.
     */
    minHeight?: number;
    /**
     * Specifies the lower width boundary for resizing.
     */
    minWidth?: number;
    /**
     * A function that is executed each time the UI component is resized by one pixel.
     */
    onResize?: (e: DevExpress.ui.dxResizable.ResizeEvent) => void;
    /**
     * A function that is executed when resizing ends.
     */
    onResizeEnd?: (e: DevExpress.ui.dxResizable.ResizeEndEvent) => void;
    /**
     * A function that is executed when resizing starts.
     */
    onResizeStart?: (e: DevExpress.ui.dxResizable.ResizeStartEvent) => void;
    /**
     * Specifies the UI component&apos;s width.
     */
    width?: number | string | (() => number | string);
  }
  /**
   * The ResponsiveBox UI component allows you to create an application or a website with a layout adapted to different screen sizes.
   */
  export class dxResponsiveBox<
    TItem extends DevExpress.ui.dxResponsiveBox.ItemLike = any,
    TKey = any
  > extends CollectionWidget<
    dxResponsiveBoxOptions<TItem, TKey>,
    TItem,
    TKey
  > {}
  module dxResponsiveBox {
    export type ContentReadyEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxResponsiveBox<TItem, TKey>>;
    export type DisposingEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxResponsiveBox<TItem, TKey>>;
    export type ExplicitTypes<TItem extends ItemLike, TKey> = {
      Properties: Properties<TItem, TKey>;
      ContentReadyEvent: ContentReadyEvent<TItem, TKey>;
      DisposingEvent: DisposingEvent<TItem, TKey>;
      InitializedEvent: InitializedEvent<TItem, TKey>;
      ItemClickEvent: ItemClickEvent<TItem, TKey>;
      ItemContextMenuEvent: ItemContextMenuEvent<TItem, TKey>;
      ItemHoldEvent: ItemHoldEvent<TItem, TKey>;
      ItemRenderedEvent: ItemRenderedEvent<TItem, TKey>;
      OptionChangedEvent: OptionChangedEvent<TItem, TKey>;
    };
    export type InitializedEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.InitializedEventInfo<dxResponsiveBox<TItem, TKey>>;
    export type ItemClickEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.NativeEventInfo<
      dxResponsiveBox<TItem, TKey>,
      MouseEvent | PointerEvent
    > &
      DevExpress.events.ItemInfo<TItem>;
    export type ItemContextMenuEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.NativeEventInfo<
      dxResponsiveBox<TItem, TKey>,
      MouseEvent | PointerEvent | TouchEvent
    > &
      DevExpress.events.ItemInfo<TItem>;
    export type ItemHoldEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.NativeEventInfo<
      dxResponsiveBox<TItem, TKey>,
      MouseEvent | PointerEvent | TouchEvent
    > &
      DevExpress.events.ItemInfo<TItem>;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    type ItemLike = string | Item | any;
    export type ItemRenderedEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxResponsiveBox<TItem, TKey>> &
      DevExpress.events.ItemInfo<TItem>;
    export type OptionChangedEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxResponsiveBox<TItem, TKey>> &
      DevExpress.events.ChangedOptionInfo;
    export type Properties<
      TItem extends ItemLike = any,
      TKey = any
    > = dxResponsiveBoxOptions<TItem, TKey>;
  }
  /**
   * @deprecated Use Item instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxResponsiveBoxItem extends CollectionWidgetItem {
    /**
     * Specifies the item location and size against the UI component grid.
     */
    location?:
      | {
          /**
           * Specifies which column the element should occupy. Accepts an index from the cols array.
           */
          col?: number;
          /**
           * Specifies how many columns the element should span.
           */
          colspan?: number;
          /**
           * Specifies which row the element should occupy. Accepts an index from the rows array.
           */
          row?: number;
          /**
           * Specifies how many rows the element should span.
           */
          rowspan?: number;
          /**
           * Decides on which screens the current location settings should be applied to the element.
           */
          screen?: string;
        }
      | Array<{
          col?: number;
          colspan?: number;
          row?: number;
          rowspan?: number;
          screen?: string;
        }>;
  }
  /**
   * @deprecated use Properties instead
   */
  export interface dxResponsiveBoxOptions<
    TItem extends DevExpress.ui.dxResponsiveBox.ItemLike = any,
    TKey = any
  > extends CollectionWidgetOptions<dxResponsiveBox<TItem, TKey>, TItem, TKey> {
    /**
     * Specifies the collection of columns for the grid used to position layout elements.
     */
    cols?: Array<{
      /**
       * The column&apos;s base width. Calculated automatically when the singleColumnScreen property arranges all elements in a single column.
       */
      baseSize?: number | DevExpress.common.Mode;
      /**
       * The column width ratio.
       */
      ratio?: number;
      /**
       * Decides on which screens the current column is rendered.
       */
      screen?: string;
      /**
       * A factor that defines how much a column width shrinks relative to the rest of the columns in the container.
       */
      shrink?: number;
    }>;
    /**
     * Binds the UI component to data.
     */
    dataSource?: DevExpress.data.DataSource.DataSourceLike<TItem, TKey> | null;
    /**
     * Specifies the UI component&apos;s height.
     */
    height?: number | string | (() => number | string);
    /**
     * An array of items displayed by the UI component.
     */
    items?: Array<TItem>;
    /**
     * Specifies the collection of rows for the grid used to position layout elements.
     */
    rows?: Array<{
      /**
       * The row&apos;s base height. Calculated automatically when the singleColumnScreen property arranges all elements in a single column.
       */
      baseSize?: number | DevExpress.common.Mode;
      /**
       * The row height ratio.
       */
      ratio?: number;
      /**
       * Decides on which screens the current row is rendered.
       */
      screen?: string;
      /**
       * A factor that defines how much a row height shrinks relative to the rest of the rows in the container.
       */
      shrink?: number;
    }>;
    /**
     * Specifies the function returning the size qualifier depending on the screen&apos;s width.
     */
    screenByWidth?: Function;
    /**
     * Specifies on which screens all layout elements should be arranged in a single column. Accepts a single or several size qualifiers separated by a space.
     */
    singleColumnScreen?: string;
    /**
     * Specifies the UI component&apos;s width.
     */
    width?: number | string | (() => number | string);
  }
  /**
   * The Scheduler is a UI component that represents scheduled data and allows a user to manage and edit it.
   */
  export class dxScheduler extends Widget<dxSchedulerOptions> {
    /**
     * Adds an appointment.
     */
    addAppointment(appointment: dxSchedulerAppointment): void;
    /**
     * Deletes an appointment from the timetable and its object from the data source.
     */
    deleteAppointment(appointment: dxSchedulerAppointment): void;
    /**
     * 
     */
    deleteRecurrence(
      appointmentData: dxSchedulerAppointment,
      date: Date | string,
      recurrenceEditMode: DevExpress.ui.dxScheduler.RecurrenceEditMode
    ): void;
    getDataSource(): DevExpress.data.DataSource;
    /**
     * Gets the current view&apos;s end date.
     */
    getEndViewDate(): Date;
    /**
     * Gets the current view&apos;s start date.
     */
    getStartViewDate(): Date;
    /**
     * Hides an appointment details form.
     */
    hideAppointmentPopup(saveChanges?: boolean): void;
    /**
     * Hides an appointment&apos;s or cell overflow indicator&apos;s tooltip.
     */
    hideAppointmentTooltip(): void;
    /**
     * Scrolls the current view to a specified position. Available for all views except &apos;agenda&apos;. You should specify the height property to use this method.
     */
    scrollTo(date: Date, group?: object, allDay?: boolean): void;
    /**
     * Scrolls the current view to a specific day and time.
     * @deprecated Use scrollTo instead.
     */
    scrollToTime(hours: number, minutes: number, date?: Date): void;
    /**
     * Shows the appointment details form.
     */
    showAppointmentPopup(
      appointmentData?: dxSchedulerAppointment,
      createNewAppointment?: boolean,
      currentAppointmentData?: dxSchedulerAppointment
    ): void;
    /**
     * Shows a tooltip for a target element.
     */
    showAppointmentTooltip(
      appointmentData: dxSchedulerAppointment,
      target: string | DevExpress.core.UserDefinedElement,
      currentAppointmentData?: dxSchedulerAppointment
    ): void;
    /**
     * Updates an appointment.
     */
    updateAppointment(
      target: dxSchedulerAppointment,
      appointment: dxSchedulerAppointment
    ): void;
  }
  module dxScheduler {
    export type AllDayPanelMode = 'all' | 'allDay' | 'hidden';
    export type Appointment = dxSchedulerAppointment;
    export type AppointmentAddedEvent =
      DevExpress.events.EventInfo<dxScheduler> & {
        readonly appointmentData: dxSchedulerAppointment;
        readonly error?: Error;
      };
    export type AppointmentAddingEvent =
      DevExpress.events.EventInfo<dxScheduler> & {
        readonly appointmentData: dxSchedulerAppointment;
        cancel: boolean | PromiseLike<boolean>;
      };
    export type AppointmentClickEvent = DevExpress.events.Cancelable &
      DevExpress.events.NativeEventInfo<
        dxScheduler,
        KeyboardEvent | MouseEvent | PointerEvent
      > &
      TargetedAppointmentInfo & {
        readonly appointmentElement: DevExpress.core.DxElement;
      };
    export type AppointmentCollectorTemplateData = {
      readonly appointmentCount: number;
      readonly isCompact: boolean;
    };
    export type AppointmentContextMenuEvent = DevExpress.events.NativeEventInfo<
      dxScheduler,
      MouseEvent | PointerEvent | TouchEvent
    > &
      TargetedAppointmentInfo & {
        readonly appointmentElement: DevExpress.core.DxElement;
      };
    export type AppointmentDblClickEvent = DevExpress.events.Cancelable &
      DevExpress.events.NativeEventInfo<
        dxScheduler,
        MouseEvent | PointerEvent
      > &
      TargetedAppointmentInfo & {
        readonly appointmentElement: DevExpress.core.DxElement;
      };
    export type AppointmentDeletedEvent =
      DevExpress.events.EventInfo<dxScheduler> & {
        readonly appointmentData: dxSchedulerAppointment;
        readonly error?: Error;
      };
    export type AppointmentDeletingEvent =
      DevExpress.events.EventInfo<dxScheduler> & {
        readonly appointmentData: dxSchedulerAppointment;
        cancel: boolean | PromiseLike<boolean>;
      };
    export type AppointmentDraggingAddEvent = AppointmentDraggingEvent & {
      readonly fromComponent?: dxSortable | dxDraggable;
      readonly toComponent?: dxSortable | dxDraggable;
      readonly toData?: any;
    };
    export type AppointmentDraggingEndEvent = DevExpress.events.Cancelable &
      AppointmentDraggingEvent & {
        readonly fromComponent?: dxSortable | dxDraggable;
        readonly toComponent?: dxSortable | dxDraggable;
        readonly toData?: any;
      };
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    interface AppointmentDraggingEvent {
      readonly component: dxScheduler;
      readonly event?: DevExpress.events.DxEvent<MouseEvent | TouchEvent>;
      readonly itemData?: any;
      readonly itemElement?: DevExpress.core.DxElement;
      readonly fromData?: any;
    }
    export type AppointmentDraggingMoveEvent = DevExpress.events.Cancelable &
      AppointmentDraggingEvent & {
        readonly fromComponent?: dxSortable | dxDraggable;
        readonly toComponent?: dxSortable | dxDraggable;
        readonly toData?: any;
      };
    export type AppointmentDraggingRemoveEvent = AppointmentDraggingEvent & {
      readonly fromComponent?: dxSortable | dxDraggable;
      readonly toComponent?: dxSortable | dxDraggable;
    };
    export type AppointmentDraggingStartEvent = DevExpress.events.Cancelable &
      AppointmentDraggingEvent;
    export type AppointmentFormOpeningEvent = DevExpress.events.Cancelable &
      DevExpress.events.EventInfo<dxScheduler> & {
        readonly appointmentData?: dxSchedulerAppointment;
        readonly form: dxForm;
        readonly popup: dxPopup;
      };
    export type AppointmentRenderedEvent =
      DevExpress.events.EventInfo<dxScheduler> &
        TargetedAppointmentInfo & {
          readonly appointmentElement: DevExpress.core.DxElement;
        };
    export type AppointmentTemplateData = TargetedAppointmentInfo;
    export type AppointmentTooltipShowingAppointmentInfo = {
      readonly appointmentData: Appointment;
      readonly currentAppointmentData: Appointment;
      readonly color: PromiseLike<string>;
    };
    export type AppointmentTooltipShowingEvent = DevExpress.events.Cancelable &
      DevExpress.events.EventInfo<dxScheduler> & {
        readonly targetElement: DevExpress.core.DxElement;
        readonly appointments: AppointmentTooltipShowingAppointmentInfo[];
      };
    export type AppointmentTooltipTemplateData = TargetedAppointmentInfo & {
      readonly isButtonClicked: boolean;
    };
    export type AppointmentUpdatedEvent =
      DevExpress.events.EventInfo<dxScheduler> & {
        readonly appointmentData: dxSchedulerAppointment;
        readonly error?: Error;
      };
    export type AppointmentUpdatingEvent =
      DevExpress.events.EventInfo<dxScheduler> & {
        readonly oldData: any;
        readonly newData: any;
        cancel?: boolean | PromiseLike<boolean>;
      };
    export type CellAppointmentsLimit = 'auto' | 'unlimited';
    export type CellClickEvent = DevExpress.events.Cancelable &
      DevExpress.events.NativeEventInfo<
        dxScheduler,
        KeyboardEvent | MouseEvent | PointerEvent
      > & {
        readonly cellData: any;
        readonly cellElement: DevExpress.core.DxElement;
      };
    export type CellContextMenuEvent = DevExpress.events.NativeEventInfo<
      dxScheduler,
      MouseEvent | PointerEvent | TouchEvent
    > & {
      readonly cellData: any;
      readonly cellElement: DevExpress.core.DxElement;
    };
    export type ContentReadyEvent = DevExpress.events.EventInfo<dxScheduler>;
    export type DateNavigatorTextInfo = {
      readonly startDate: Date;
      readonly endDate: Date;
      readonly text: string;
    };
    export type DisposingEvent = DevExpress.events.EventInfo<dxScheduler>;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxScheduler>;
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxScheduler> &
      DevExpress.events.ChangedOptionInfo;
    export type Properties = dxSchedulerOptions;
    export type RecurrenceEditMode = 'dialog' | 'occurrence' | 'series';
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    interface TargetedAppointmentInfo {
      readonly appointmentData: dxSchedulerAppointment;
      readonly targetedAppointmentData?: dxSchedulerAppointment;
    }
    export type ViewType =
      | 'agenda'
      | 'day'
      | 'month'
      | 'timelineDay'
      | 'timelineMonth'
      | 'timelineWeek'
      | 'timelineWorkWeek'
      | 'week'
      | 'workWeek';
  }
  /**
   * @deprecated Use the Scheduler's Appointment type instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export type dxSchedulerAppointment = CollectionWidgetItem & {
    /**
     * Specifies whether the appointment lasts all day.
     */
    allDay?: boolean;
    /**
     * Specifies a detail description of the appointment.
     */
    description?: string;
    /**
     * Specifies whether the appointment responds to user interaction.
     */
    disabled?: boolean;
    /**
     * Specifies the ending of the appointment.
     */
    endDate?: Date | string;
    /**
     * Specifies the time zone for an appointment&apos;s endDate. Accepts values from the IANA time zone database.
     */
    endDateTimeZone?: string;
    /**
     * Specifies the HTML markup to be inserted into the appointment element.
     */
    html?: string;
    /**
     * Specifies the start date and time of one or more appointments to exclude from a series. This property requires that you also set recurrenceRule.
     */
    recurrenceException?: string;
    /**
     * Specifies a recurrence rule based on which the Scheduler generates an appointment series.
     */
    recurrenceRule?: string;
    /**
     * Specifies the start of the appointment.
     */
    startDate?: Date | string;
    /**
     * Specifies the time zone for an appointment&apos;s startDate. Accepts values from the IANA time zone database.
     */
    startDateTimeZone?: string;
    /**
     * Specifies a template that should be used to render this appointment only.
     */
    template?: DevExpress.core.template;
    /**
     * Specifies the subject of the appointment.
     */
    text?: string;
    /**
     * Specifies whether or not an appointment must be displayed.
     */
    visible?: boolean;
  } & Record<string, any>;
  /**
   * @deprecated use Properties instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxSchedulerOptions extends WidgetOptions<dxScheduler> {
    /**
     * Specifies whether the UI component adapts to small screens.
     */
    adaptivityEnabled?: boolean;
    /**
     * Specifies the name of the data source item field whose value defines whether or not the corresponding appointment is an all-day appointment.
     */
    allDayExpr?: string;
    /**
     * Specifies a custom template for cell overflow indicators.
     */
    appointmentCollectorTemplate?:
      | DevExpress.core.template
      | ((
          data: DevExpress.ui.dxScheduler.AppointmentCollectorTemplateData,
          collectorElement: DevExpress.core.DxElement
        ) => string | DevExpress.core.UserDefinedElement);
    /**
     * Configures appointment reordering using drag and drop gestures.
     */
    appointmentDragging?: {
      /**
       * Enables automatic scrolling while dragging an appointment beyond the viewport.
       */
      autoScroll?: boolean;
      /**
       * A container for custom data.
       */
      data?: any;
      /**
       * Allows you to group several UI components so that users can drag and drop appointments between them.
       */
      group?: string;
      /**
       * A function that is called when a new appointment is added.
       */
      onAdd?: (
        e: DevExpress.ui.dxScheduler.AppointmentDraggingAddEvent
      ) => void;
      /**
       * A function that is called when the dragged appointment&apos;s position is changed.
       */
      onDragEnd?: (
        e: DevExpress.ui.dxScheduler.AppointmentDraggingEndEvent
      ) => void;
      /**
       * A function that is called every time a draggable appointment is moved.
       */
      onDragMove?: (
        e: DevExpress.ui.dxScheduler.AppointmentDraggingMoveEvent
      ) => void;
      /**
       * A function that is called when the drag gesture is initialized.
       */
      onDragStart?: (
        e: DevExpress.ui.dxScheduler.AppointmentDraggingStartEvent
      ) => void;
      /**
       * A function that is called when a draggable appointment is removed.
       */
      onRemove?: (
        e: DevExpress.ui.dxScheduler.AppointmentDraggingRemoveEvent
      ) => void;
      /**
       * Specifies the distance in pixels from the edge of viewport at which scrolling should start. Applies only if autoScroll is true.
       */
      scrollSensitivity?: number;
      /**
       * Specifies the scrolling speed when dragging an appointment beyond the viewport. Applies only if autoScroll is true.
       */
      scrollSpeed?: number;
    };
    /**
     * Specifies a custom template for appointments.
     */
    appointmentTemplate?:
      | DevExpress.core.template
      | ((
          model: DevExpress.ui.dxScheduler.AppointmentTemplateData,
          itemIndex: number,
          contentElement: DevExpress.core.DxElement
        ) => string | DevExpress.core.UserDefinedElement);
    /**
     * Specifies a custom template for tooltips displayed when users click an appointment or cell overflow indicator.
     */
    appointmentTooltipTemplate?:
      | DevExpress.core.template
      | ((
          model: DevExpress.ui.dxScheduler.AppointmentTemplateData,
          itemIndex: number,
          contentElement: DevExpress.core.DxElement
        ) => string | DevExpress.core.UserDefinedElement);
    /**
     * Specifies cell duration in minutes. This property&apos;s value should divide the interval between startDayHour and endDayHour into even parts.
     */
    cellDuration?: number;
    /**
     * Specifies whether or not an end-user can scroll the view in both directions at the same time.
     */
    crossScrollingEnabled?: boolean;
    /**
     * Specifies the current date.
     */
    currentDate?: Date | number | string;
    /**
     * Specifies the displayed view. Accepts name or type of a view available in the views array.
     */
    currentView?: DevExpress.ui.dxScheduler.ViewType;
    /**
     * Customizes the date navigator&apos;s text.
     */
    customizeDateNavigatorText?: (
      info: DevExpress.ui.dxScheduler.DateNavigatorTextInfo
    ) => string;
    /**
     * Specifies a custom template for table cells.
     */
    dataCellTemplate?:
      | DevExpress.core.template
      | ((
          itemData: any,
          itemIndex: number,
          itemElement: DevExpress.core.DxElement
        ) => string | DevExpress.core.UserDefinedElement);
    /**
     * Binds the UI component to data.
     */
    dataSource?: DevExpress.data.DataSource.DataSourceLike<DevExpress.ui.dxScheduler.Appointment> | null;
    /**
     * Specifies a custom template for day scale items.
     */
    dateCellTemplate?:
      | DevExpress.core.template
      | ((
          itemData: any,
          itemIndex: number,
          itemElement: DevExpress.core.DxElement
        ) => string | DevExpress.core.UserDefinedElement);
    /**
     * Specifies the format in which date-time values should be sent to the server.
     */
    dateSerializationFormat?: string;
    /**
     * Specifies the name of the data source item field whose value holds the description of the corresponding appointment.
     */
    descriptionExpr?: string;
    /**
     * Specifies a custom template for tooltips displayed when users click a cell overflow indicator.
     * @deprecated Use the appointmentTooltipTemplate option instead.
     */
    dropDownAppointmentTemplate?:
      | DevExpress.core.template
      | ((
          itemData: any,
          itemIndex: number,
          contentElement: DevExpress.core.DxElement
        ) => string | DevExpress.core.UserDefinedElement);
    /**
     * Specifies which editing operations a user can perform on appointments.
     */
    editing?:
      | boolean
      | {
          /**
           * Specifies whether or not an end-user can add appointments.
           */
          allowAdding?: boolean;
          /**
           * Specifies whether or not an end-user can delete appointments.
           */
          allowDeleting?: boolean;
          /**
           * Specifies whether users can drag and drop appointments.
           */
          allowDragging?: boolean;
          /**
           * Specifies whether or not an end-user can change an appointment duration.
           */
          allowResizing?: boolean;
          /**
           * Specifies whether users can edit appointment time zones.
           */
          allowTimeZoneEditing?: boolean;
          /**
           * Specifies whether or not an end-user can change appointment properties.
           */
          allowUpdating?: boolean;
        };
    /**
     * Specifies the name of the data source item field that defines the ending of an appointment.
     */
    endDateExpr?: string;
    /**
     * Specifies the name of the data source item field that defines the timezone of the appointment end date.
     */
    endDateTimeZoneExpr?: string;
    /**
     * Specifies the last hour on the time scale. Accepts integer values from 0 to 24.
     */
    endDayHour?: number;
    /**
     * Specifies the first day of a week. Does not apply to the agenda view.
     */
    firstDayOfWeek?: DevExpress.common.FirstDayOfWeek;
    /**
     * Specifies whether the UI component can be focused using keyboard navigation.
     */
    focusStateEnabled?: boolean;
    /**
     * If true, appointments are grouped by date first and then by resource; opposite if false. Applies only if appointments are grouped and groupOrientation is &apos;horizontal&apos;.
     */
    groupByDate?: boolean;
    /**
     * Specifies the resource kinds by which the scheduler&apos;s appointments are grouped in a timetable.
     */
    groups?: Array<string>;
    /**
     * Specifies the time interval between when the date-time indicator changes its position, in milliseconds.
     */
    indicatorUpdateInterval?: number;
    /**
     * The latest date the UI component allows you to select.
     */
    max?: Date | number | string;
    /**
     * Specifies the limit of full-sized appointments displayed per cell. Applies to all views except &apos;agenda&apos;.
     */
    maxAppointmentsPerCell?:
      | number
      | DevExpress.ui.dxScheduler.CellAppointmentsLimit;
    /**
     * The earliest date the UI component allows you to select.
     */
    min?: Date | number | string;
    /**
     * Specifies the text or HTML markup displayed by the UI component if the item collection is empty. Available for the Agenda view only.
     */
    noDataText?: string;
    /**
     * A function that is executed after an appointment is added to the data source.
     */
    onAppointmentAdded?: (
      e: DevExpress.ui.dxScheduler.AppointmentAddedEvent
    ) => void;
    /**
     * A function that is executed before an appointment is added to the data source.
     */
    onAppointmentAdding?: (
      e: DevExpress.ui.dxScheduler.AppointmentAddingEvent
    ) => void;
    /**
     * A function that is executed when an appointment is clicked or tapped.
     */
    onAppointmentClick?:
      | ((e: DevExpress.ui.dxScheduler.AppointmentClickEvent) => void)
      | string;
    /**
     * A function that is executed when a user attempts to open the browser&apos;s context menu for an appointment. Allows you to replace this context menu with a custom context menu.
     */
    onAppointmentContextMenu?:
      | ((e: DevExpress.ui.dxScheduler.AppointmentContextMenuEvent) => void)
      | string;
    /**
     * A function that is executed when an appointment is double-clicked or double-tapped.
     */
    onAppointmentDblClick?:
      | ((e: DevExpress.ui.dxScheduler.AppointmentDblClickEvent) => void)
      | string;
    /**
     * A function that is executed after an appointment is deleted from the data source.
     */
    onAppointmentDeleted?: (
      e: DevExpress.ui.dxScheduler.AppointmentDeletedEvent
    ) => void;

    /**
     * A function that is executed before an appointment is deleted from the data source.
     */
    onAppointmentDeleting?: (
      e: DevExpress.ui.dxScheduler.AppointmentDeletingEvent
    ) => void;
    /**
     * 
     */
    onAppointmentTooltipShowing?: (
      e: DevExpress.ui.dxScheduler.AppointmentTooltipShowingEvent
    ) => void;
    /**
     * A function that is executed before an appointment details form is opened. Use this function to customize the form.
     */
    onAppointmentFormOpening?: (
      e: DevExpress.ui.dxScheduler.AppointmentFormOpeningEvent
    ) => void;
    /**
     * A function that is executed when an appointment is rendered.
     */
    onAppointmentRendered?: (
      e: DevExpress.ui.dxScheduler.AppointmentRenderedEvent
    ) => void;
    /**
     * A function that is executed after an appointment is updated in the data source.
     */
    onAppointmentUpdated?: (
      e: DevExpress.ui.dxScheduler.AppointmentUpdatedEvent
    ) => void;
    /**
     * A function that is executed before an appointment is updated in the data source.
     */
    onAppointmentUpdating?: (
      e: DevExpress.ui.dxScheduler.AppointmentUpdatingEvent
    ) => void;
    /**
     * A function that is executed when a view cell is clicked.
     */
    onCellClick?:
      | ((e: DevExpress.ui.dxScheduler.CellClickEvent) => void)
      | string;
    /**
     * A function that is executed when a user attempts to open the browser&apos;s context menu for a cell. Allows you to replace this context menu with a custom context menu.
     */
    onCellContextMenu?:
      | ((e: DevExpress.ui.dxScheduler.CellContextMenuEvent) => void)
      | string;
    /**
     * Specifies the edit mode for recurring appointments.
     */
    recurrenceEditMode?: DevExpress.ui.dxScheduler.RecurrenceEditMode;
    /**
     * Specifies the name of the data source item field that defines exceptions for the current recurring appointment.
     */
    recurrenceExceptionExpr?: string;
    /**
     * Specifies the name of the data source item field that defines a recurrence rule for generating recurring appointments.
     */
    recurrenceRuleExpr?: string;
    /**
     * Specifies whether filtering is performed on the server or client side.
     */
    remoteFiltering?: boolean;
    /**
     * Specifies a custom template for resource headers.
     */
    resourceCellTemplate?:
      | DevExpress.core.template
      | ((
          itemData: any,
          itemIndex: number,
          itemElement: DevExpress.core.DxElement
        ) => string | DevExpress.core.UserDefinedElement);
    /**
     * Specifies an array of resources available in the scheduler.
     */
    resources?: Array<{
      /**
       * Indicates whether or not several resources of this kind can be assigned to an appointment.
       */
      allowMultiple?: boolean;
      /**
       * Specifies the resource object field that is used as a resource color.
       */
      colorExpr?: string;
      /**
       * Specifies available resource instances.
       */
      dataSource?: DevExpress.data.DataSource.DataSourceLike<any> | null;
      /**
       * Specifies which field from the resource data objects provides values to be displayed in the resource editor.
       */
      displayExpr?: string | ((resource: any) => string);
      /**
       * The name of the appointment object field that specifies a resource of this kind.
       */
      fieldExpr?: string;
      /**
       * Specifies the label of the Appointment popup window field that allows end users to assign a resource of this kind.
       */
      label?: string;
      /**
       * Specifies whether appointments are colored like this resource kind.
       */
      useColorAsDefault?: boolean;
      /**
       * Specifies the resource object field that is used as a value of the Resource editor in the Appointment popup window.
       */
      valueExpr?: string | Function;
    }>;
    /**
     * Configures scrolling.
     */
    scrolling?: dxSchedulerScrolling;
    /**
     * Currently selected cells&apos; data.
     */
    selectedCellData?: Array<any>;
    /**
     * Specifies whether to apply shading to cover the timetable up to the current time.
     */
    shadeUntilCurrentTime?: boolean;
    /**
     * Specifies the &apos;All-day&apos; panel&apos;s visibility. Setting this property to false hides the panel along with the all-day appointments.
     */
    showAllDayPanel?: boolean;
    /**
     * Specifies the current date-time indicator&apos;s visibility.
     */
    showCurrentTimeIndicator?: boolean;
    /**
     * Specifies the name of the data source item field that defines the start of an appointment.
     */
    startDateExpr?: string;
    /**
     * Specifies the name of the data source item field that defines the timezone of the appointment start date.
     */
    startDateTimeZoneExpr?: string;
    /**
     * Specifies the first hour on the time scale. Accepts integer values from 0 to 24.
     */
    startDayHour?: number;
    /**
     * Specifies the name of the data source item field that holds the subject of an appointment.
     */
    textExpr?: string;
    /**
     * Specifies a custom template for time scale items.
     */
    timeCellTemplate?:
      | DevExpress.core.template
      | ((
          itemData: any,
          itemIndex: number,
          itemElement: DevExpress.core.DxElement
        ) => string | DevExpress.core.UserDefinedElement);
    /**
     * Specifies the time zone for the Scheduler&apos;s grid. Accepts values from the IANA time zone database.
     */
    timeZone?: string;
    /**
     * Specifies whether a user can switch views using tabs or a drop-down menu.
     */
    useDropDownViewSwitcher?: boolean;
    /**
     * 
     */
    allDayPanelMode?: DevExpress.ui.dxScheduler.AllDayPanelMode;
    /**
     * Specifies and configures the views to be available in the view switcher.
     */
    views?: Array<
      | 'day'
      | 'week'
      | 'workWeek'
      | 'month'
      | 'timelineDay'
      | 'timelineWeek'
      | 'timelineWorkWeek'
      | 'timelineMonth'
      | 'agenda'
      | {
          /**
           * Specifies the number of dates that can be shown at a time in the agenda view.
           */
          agendaDuration?: number;
          /**
           * Specifies a custom template for cell overflow indicators in this view.
           */
          appointmentCollectorTemplate?:
            | DevExpress.core.template
            | ((
                data: DevExpress.ui.dxScheduler.AppointmentCollectorTemplateData,
                collectorElement: DevExpress.core.DxElement
              ) => string | DevExpress.core.UserDefinedElement);
          /**
           * Specifies a custom template for appointments.
           */
          appointmentTemplate?:
            | DevExpress.core.template
            | ((
                model: DevExpress.ui.dxScheduler.AppointmentTemplateData,
                itemIndex: number,
                contentElement: DevExpress.core.DxElement
              ) => string | DevExpress.core.UserDefinedElement);
          /**
           * Specifies a custom template for tooltips displayed when users click an appointment or cell overflow indicator in this view.
           */
          appointmentTooltipTemplate?:
            | DevExpress.core.template
            | ((
                model: DevExpress.ui.dxScheduler.AppointmentTooltipTemplateData,
                itemIndex: number,
                contentElement: DevExpress.core.DxElement
              ) => string | DevExpress.core.UserDefinedElement);
          /**
           * Specifies a custom template for tooltips displayed when users click a cell overflow indicator in this view.
           * @deprecated Use the views.appointmentTooltipTemplate option instead.
           */
          dropDownAppointmentTemplate?:
            | DevExpress.core.template
            | ((
                itemData: any,
                itemIndex: number,
                contentElement: DevExpress.core.DxElement
              ) => string | DevExpress.core.UserDefinedElement);
          /**
           * The cell duration in minutes.
           */
          cellDuration?: number;
          /**
           * Specifies a custom template for table cells.
           */
          dataCellTemplate?:
            | DevExpress.core.template
            | ((
                itemData: any,
                itemIndex: number,
                itemElement: DevExpress.core.DxElement
              ) => string | DevExpress.core.UserDefinedElement);
          /**
           * Specifies a custom template for date scale items.
           */
          dateCellTemplate?:
            | DevExpress.core.template
            | ((
                itemData: any,
                itemIndex: number,
                itemElement: DevExpress.core.DxElement
              ) => string | DevExpress.core.UserDefinedElement);
          /**
           * Specifies the last hour on the view&apos;s time scale. Accepts integer values from 0 to 24.
           */
          endDayHour?: number;
          /**
           * The first day of a week. Does not apply to the agenda view.
           */
          firstDayOfWeek?: DevExpress.common.FirstDayOfWeek;
          /**
           * If true, appointments are grouped by date first and then by resource; opposite if false. Applies only if appointments are grouped and groupOrientation is &apos;horizontal&apos;.
           */
          groupByDate?: boolean;
          /**
           * Arranges resource headers vertically (in a column) or horizontally (in a row).
           */
          groupOrientation?: DevExpress.common.Orientation;
          /**
           * The resource kinds by which appointments are grouped.
           */
          groups?: Array<string>;
          /**
           * Multiplies the default view interval. Applies to all view types except &apos;agenda&apos;.
           */
          intervalCount?: number;
          /**
           * Specifies the limit of full-sized appointments displayed per cell. Applies to all views except &apos;agenda&apos;.
           */
          maxAppointmentsPerCell?:
            | number
            | DevExpress.ui.dxScheduler.CellAppointmentsLimit;
          /**
           * A custom view name displayed in the view switcher.
           */
          name?: string;
          /**
           * Specifies a custom template for resource headers.
           */
          resourceCellTemplate?:
            | DevExpress.core.template
            | ((
                itemData: any,
                itemIndex: number,
                itemElement: DevExpress.core.DxElement
              ) => string | DevExpress.core.UserDefinedElement);
          /**
           * Specifies the date from which to start counting the view interval. Applies to all view types except &apos;agenda&apos;.
           */
          startDate?: Date | number | string;
          /**
           * Specifies the first hour on the view&apos;s time scale. Accepts integer values from 0 to 24.
           */
          startDayHour?: number;
          /**
           * Specifies a custom template for time scale items.
           */
          timeCellTemplate?:
            | DevExpress.core.template
            | ((
                itemData: any,
                itemIndex: number,
                itemElement: DevExpress.core.DxElement
              ) => string | DevExpress.core.UserDefinedElement);
          /**
           * The type of the view.
           */
          type?: DevExpress.ui.dxScheduler.ViewType;
          /**
           * Configures scrolling for a view.
           */
          scrolling?: dxSchedulerScrolling;
          /**
           * 
           */
          allDayPanelMode?: DevExpress.ui.dxScheduler.AllDayPanelMode;
        }
    >;
  }
  /**
   * 
   */
  export interface dxSchedulerScrolling {
    /**
     * Specifies the scrolling mode.
     */
    mode?: DevExpress.common.ScrollMode;
  }
  /**
   * A UI component used to display scrollable content.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export class dxScrollable<
    TProperties = DevExpress.ui.dxScrollable.Properties
  > extends DOMComponent<TProperties> {
    /**
     * Gets the UI component&apos;s height.
     */
    clientHeight(): number;
    /**
     * Gets the UI component&apos;s width.
     */
    clientWidth(): number;
    /**
     * Gets the UI component&apos;s content.
     */
    content(): DevExpress.core.DxElement;
    /**
     * Scrolls the content by a specific distance.
     */
    scrollBy(distance: number | any): void;
    /**
     * Gets the scrollable content&apos;s height in pixels.
     */
    scrollHeight(): number;
    /**
     * Gets the left scroll offset.
     */
    scrollLeft(): number;
    /**
     * Gets the scroll offset.
     */
    scrollOffset(): any;
    /**
     * Scrolls the content to a specific position.
     */
    scrollTo(targetLocation: number | any): void;
    /**
     * Scrolls content to an element.
     */
    scrollToElement(element: DevExpress.core.UserDefinedElement): void;
    /**
     * Gets the top scroll offset.
     */
    scrollTop(): number;
    /**
     * Gets the scrollable content&apos;s width in pixels.
     */
    scrollWidth(): number;
    /**
     * Updates the scrollable contents&apos; dimensions.
     */
    update(): DevExpress.core.utils.DxPromise<void>;
  }
  module dxScrollable {
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    type Properties = dxScrollableOptions<ScrollableInstance>;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    interface ScrollableInstance extends dxScrollable<Properties> {}
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export interface ScrollEventInfo<T>
      extends DevExpress.events.NativeEventInfo<
        T,
        WheelEvent | MouseEvent | Event
      > {
      readonly scrollOffset?: any;
      readonly reachedLeft?: boolean;
      readonly reachedRight?: boolean;
      readonly reachedTop?: boolean;
      readonly reachedBottom?: boolean;
    }
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxScrollableOptions<TComponent>
    extends DOMComponentOptions<TComponent> {
    /**
     * A Boolean value specifying whether to enable or disable the bounce-back effect.
     */
    bounceEnabled?: boolean;
    /**
     * A string value specifying the available scrolling directions.
     */
    direction?: DevExpress.common.ScrollDirection;
    /**
     * Specifies whether the UI component responds to user interaction.
     */
    disabled?: boolean;
    /**
     * A function that is executed on each scroll gesture.
     */
    onScroll?: (
      e: DevExpress.ui.dxScrollable.ScrollEventInfo<TComponent>
    ) => void;
    /**
     * A function that is executed each time the UI component is updated.
     */
    onUpdated?: (
      e: DevExpress.ui.dxScrollable.ScrollEventInfo<TComponent>
    ) => void;
    /**
     * A Boolean value specifying whether or not an end-user can scroll the UI component content swiping it up or down. Applies only if useNative is false
     */
    scrollByContent?: boolean;
    /**
     * Specifies whether a user can scroll the content with the scrollbar. Applies only if useNative is false.
     */
    scrollByThumb?: boolean;
    /**
     * Specifies when the UI component shows the scrollbar.
     */
    showScrollbar?: 'onScroll' | 'onHover' | 'always' | 'never';
    /**
     * Indicates whether to use native or simulated scrolling.
     */
    useNative?: boolean;
  }
  /**
   * The ScrollView is a UI component that enables a user to scroll its content.
   */
  export class dxScrollView extends dxScrollable<dxScrollViewOptions> {
    /**
     * Locks the UI component until the release(preventScrollBottom) method is called and executes the function passed to the onPullDown property and the handler assigned to the pullDown event.
     */
    refresh(): void;
    /**
     * Notifies the ScrollView that data loading is finished.
     */
    release(
      preventScrollBottom: boolean
    ): DevExpress.core.utils.DxPromise<void>;
  }
  module dxScrollView {
    export type DisposingEvent = DevExpress.events.EventInfo<dxScrollView>;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxScrollView>;
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxScrollView> &
      DevExpress.events.ChangedOptionInfo;
    export type Properties = dxScrollViewOptions;
    export type PullDownEvent = DevExpress.events.EventInfo<dxScrollView>;
    export type ReachBottomEvent = DevExpress.events.EventInfo<dxScrollView>;
    export type ScrollEvent =
      DevExpress.ui.dxScrollable.ScrollEventInfo<dxScrollView>;
    export type UpdatedEvent =
      DevExpress.ui.dxScrollable.ScrollEventInfo<dxScrollView>;
  }
  /**
   * @deprecated use Properties instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxScrollViewOptions
    extends dxScrollableOptions<dxScrollView> {
    /**
     * A function that is executed when the &apos;pull to refresh&apos; gesture is performed. Supported on mobile devices only.
     */
    onPullDown?: (e: DevExpress.ui.dxScrollView.PullDownEvent) => void;
    /**
     * A function that is executed when the content is scrolled down to the bottom.
     */
    onReachBottom?: (e: DevExpress.ui.dxScrollView.ReachBottomEvent) => void;
    /**
     * Specifies the text shown in the pullDown panel when pulling the content down lowers the refresh threshold.
     */
    pulledDownText?: string;
    /**
     * Specifies the text shown in the pullDown panel while pulling the content down to the refresh threshold.
     */
    pullingDownText?: string;
    /**
     * Specifies the text shown in the pullDown panel displayed when content is scrolled to the bottom.
     */
    reachBottomText?: string;
    /**
     * Specifies the text shown in the pullDown panel displayed when the content is being refreshed.
     */
    refreshingText?: string;
  }
  /**
   * The SelectBox UI component is an editor that allows an end user to select an item from a drop-down list.
   */
  export class dxSelectBox<
    TProperties = DevExpress.ui.dxSelectBox.Properties
  > extends dxDropDownList<TProperties> {}
  module dxSelectBox {
    export type ChangeEvent = DevExpress.events.NativeEventInfo<
      dxSelectBox,
      Event
    >;
    export type ClosedEvent = DevExpress.events.EventInfo<dxSelectBox>;
    export type ContentReadyEvent = DevExpress.events.EventInfo<dxSelectBox>;
    export type CopyEvent = DevExpress.events.NativeEventInfo<
      dxSelectBox,
      ClipboardEvent
    >;
    export type CustomItemCreatingEvent =
      DevExpress.events.EventInfo<dxSelectBox> & CustomItemCreatingInfo;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export interface CustomItemCreatingInfo {
      readonly text?: string;
      customItem?: string | any | PromiseLike<any>;
    }
    export type CutEvent = DevExpress.events.NativeEventInfo<
      dxSelectBox,
      ClipboardEvent
    >;
    export type DisposingEvent = DevExpress.events.EventInfo<dxSelectBox>;
    export type DropDownButtonTemplateData =
      DevExpress.ui.dxDropDownEditor.DropDownButtonTemplateDataModel;
    export type EnterKeyEvent = DevExpress.events.NativeEventInfo<
      dxSelectBox,
      KeyboardEvent
    >;
    export type FocusInEvent = DevExpress.events.NativeEventInfo<
      dxSelectBox,
      FocusEvent
    >;
    export type FocusOutEvent = DevExpress.events.NativeEventInfo<
      dxSelectBox,
      FocusEvent
    >;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxSelectBox>;
    export type InputEvent = DevExpress.events.NativeEventInfo<
      dxSelectBox,
      UIEvent & { target: HTMLInputElement }
    >;
    export type ItemClickEvent = DevExpress.events.NativeEventInfo<
      dxSelectBox,
      KeyboardEvent | MouseEvent | PointerEvent
    > &
      DevExpress.events.ItemInfo;
    export type KeyDownEvent = DevExpress.events.NativeEventInfo<
      dxSelectBox,
      KeyboardEvent
    >;
    export type KeyPressEvent = DevExpress.events.NativeEventInfo<
      dxSelectBox,
      KeyboardEvent
    >;
    export type KeyUpEvent = DevExpress.events.NativeEventInfo<
      dxSelectBox,
      KeyboardEvent
    >;
    export type OpenedEvent = DevExpress.events.EventInfo<dxSelectBox>;
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxSelectBox> &
      DevExpress.events.ChangedOptionInfo;
    export type PasteEvent = DevExpress.events.NativeEventInfo<
      dxSelectBox,
      ClipboardEvent
    >;
    export type Properties = dxSelectBoxOptions<SelectBoxInstance>;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    interface SelectBoxInstance extends dxSelectBox<Properties> {}
    export type SelectionChangedEvent =
      DevExpress.events.EventInfo<dxSelectBox> &
        DevExpress.ui.dxDropDownList.SelectionChangedInfo;
    export type ValueChangedEvent = DevExpress.events.NativeEventInfo<
      dxSelectBox,
      KeyboardEvent | MouseEvent | Event
    > &
      DevExpress.ui.Editor.ValueChangedInfo;
  }
  /**
   * @deprecated use Properties instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxSelectBoxOptions<TComponent>
    extends dxDropDownListOptions<TComponent> {
    /**
     * Specifies whether the UI component allows a user to enter a custom value. Requires the onCustomItemCreating handler implementation.
     */
    acceptCustomValue?: boolean;
    /**
     * Specifies a custom template for the text field. Must contain the TextBox UI component.
     */
    fieldTemplate?:
      | DevExpress.core.template
      | ((
          selectedItem: any,
          fieldElement: DevExpress.core.DxElement
        ) => string | DevExpress.core.UserDefinedElement);
    /**
     * A function that is executed when a user adds a custom item. Requires acceptCustomValue to be set to true.
     */
    onCustomItemCreating?: (
      e: DevExpress.events.EventInfo<TComponent> &
        DevExpress.ui.dxSelectBox.CustomItemCreatingInfo
    ) => void;
    /**
     * Specifies whether a user can open the drop-down list by clicking a text field.
     */
    openOnFieldClick?: boolean;
    /**
     * The text that is provided as a hint in the select box editor.
     */
    placeholder?: string;
    /**
     * Specifies whether the drop-down button is visible.
     */
    showDropDownButton?: boolean;
    /**
     * Specifies whether or not to display selection controls.
     */
    showSelectionControls?: boolean;
    /**
     * Specifies the DOM events after which the UI component&apos;s value should be updated. Applies only if acceptCustomValue is set to true.
     */
    valueChangeEvent?: string;

    /**
     * Configures the drop-down field which holds the content.
     */
    dropDownOptions?: DevExpress.ui.dxPopup.Properties;
  }
  /**
   * The SlideOut UI component is a classic slide-out menu paired with a view. An end user opens the menu by swiping away the view.
   * @deprecated 
   */
  export class dxSlideOut<
    TItem extends DevExpress.ui.dxSlideOut.ItemLike = any,
    TKey = any
  > extends CollectionWidget<dxSlideOutOptions<TItem, TKey>, TItem, TKey> {
    /**
     * Hides the UI component&apos;s slide-out menu.
     */
    hideMenu(): DevExpress.core.utils.DxPromise<void>;
    /**
     * Displays the UI component&apos;s slide-out menu.
     */
    showMenu(): DevExpress.core.utils.DxPromise<void>;
    /**
     * Shows or hides the slide-out menu depending on the argument.
     */
    toggleMenuVisibility(
      showing?: boolean
    ): DevExpress.core.utils.DxPromise<void>;
  }
  module dxSlideOut {
    export type ContentReadyEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxSlideOut<TItem, TKey>>;
    export type DisposingEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxSlideOut<TItem, TKey>>;
    export type ExplicitTypes<TItem extends ItemLike, TKey> = {
      Properties: Properties<TItem, TKey>;
      ContentReadyEvent: ContentReadyEvent<TItem, TKey>;
      DisposingEvent: DisposingEvent<TItem, TKey>;
      InitializedEvent: InitializedEvent<TItem, TKey>;
      ItemClickEvent: ItemClickEvent<TItem, TKey>;
      ItemContextMenuEvent: ItemContextMenuEvent<TItem, TKey>;
      ItemHoldEvent: ItemHoldEvent<TItem, TKey>;
      ItemRenderedEvent: ItemRenderedEvent<TItem, TKey>;
      MenuGroupRenderedEvent: MenuGroupRenderedEvent<TItem, TKey>;
      MenuItemRenderedEvent: MenuItemRenderedEvent<TItem, TKey>;
      OptionChangedEvent: OptionChangedEvent<TItem, TKey>;
      SelectionChangedEvent: SelectionChangedEvent<TItem, TKey>;
    };
    export type InitializedEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.InitializedEventInfo<dxSlideOut<TItem, TKey>>;
    export type ItemClickEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.NativeEventInfo<
      dxSlideOut<TItem, TKey>,
      MouseEvent | PointerEvent
    > &
      DevExpress.events.ItemInfo<TItem>;
    export type ItemContextMenuEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.NativeEventInfo<
      dxSlideOut<TItem, TKey>,
      MouseEvent | PointerEvent | TouchEvent
    > &
      DevExpress.events.ItemInfo<TItem>;
    export type ItemHoldEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.NativeEventInfo<
      dxSlideOut<TItem, TKey>,
      MouseEvent | PointerEvent | TouchEvent
    > &
      DevExpress.events.ItemInfo<TItem>;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    type ItemLike = string | Item | any;
    export type ItemRenderedEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxSlideOut<TItem, TKey>> &
      DevExpress.events.ItemInfo<TItem>;
    export type MenuGroupRenderedEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxSlideOut<TItem, TKey>>;
    export type MenuItemRenderedEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxSlideOut<TItem, TKey>>;
    export type OptionChangedEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxSlideOut<TItem, TKey>> &
      DevExpress.events.ChangedOptionInfo;
    export type Properties<
      TItem extends ItemLike = any,
      TKey = any
    > = dxSlideOutOptions<TItem, TKey>;
    export type SelectionChangedEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxSlideOut<TItem, TKey>> &
      DevExpress.ui.CollectionWidget.SelectionChangedInfo<TItem>;
  }
  /**
   * @deprecated Use Item instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxSlideOutItem extends CollectionWidgetItem {
    /**
     * Specifies a template that should be used to render a menu item.
     */
    menuTemplate?:
      | DevExpress.core.template
      | (() => string | DevExpress.core.UserDefinedElement);
  }
  /**
   * @deprecated use Properties instead
   */
  export interface dxSlideOutOptions<
    TItem extends DevExpress.ui.dxSlideOut.ItemLike = any,
    TKey = any
  > extends CollectionWidgetOptions<dxSlideOut<TItem, TKey>, TItem, TKey> {
    /**
     * A Boolean value specifying whether or not the UI component changes its state when interacting with a user.
     */
    activeStateEnabled?: boolean;
    /**
     * Specifies a custom template for the UI component content. Rendered only once - when the UI component is created.
     */
    contentTemplate?:
      | DevExpress.core.template
      | ((
          container: DevExpress.core.DxElement
        ) => string | DevExpress.core.UserDefinedElement);
    /**
     * Binds the UI component to data.
     */
    dataSource?: DevExpress.data.DataSource.DataSourceLike<TItem, TKey> | null;
    /**
     * An array of items displayed by the UI component.
     */
    items?: Array<TItem>;
    /**
     * Specifies a custom template for group captions.
     */
    menuGroupTemplate?:
      | DevExpress.core.template
      | ((
          groupData: any,
          groupIndex: number,
          groupElement: any
        ) => string | DevExpress.core.UserDefinedElement);
    /**
     * A Boolean value specifying whether or not to display a grouped menu.
     */
    menuGrouped?: boolean;
    /**
     * Specifies a custom template for menu items.
     */
    menuItemTemplate?:
      | DevExpress.core.template
      | ((
          itemData: TItem,
          itemIndex: number,
          itemElement: DevExpress.core.DxElement
        ) => string | DevExpress.core.UserDefinedElement);
    /**
     * Specifies the current menu position.
     */
    menuPosition?: DevExpress.common.SlideOutMenuPosition;
    /**
     * Specifies whether or not the slide-out menu is displayed.
     */
    menuVisible?: boolean;
    /**
     * A function that is executed when a group menu item is rendered.
     */
    onMenuGroupRendered?: (
      e: DevExpress.ui.dxSlideOut.MenuGroupRenderedEvent<TItem, TKey>
    ) => void;
    /**
     * A function that is executed when a regular menu item is rendered.
     */
    onMenuItemRendered?: (
      e: DevExpress.ui.dxSlideOut.MenuItemRenderedEvent<TItem, TKey>
    ) => void;
    /**
     * The index number of the currently selected item.
     */
    selectedIndex?: number;
    /**
     * Indicates whether the menu can be shown/hidden by swiping the UI component&apos;s main panel.
     */
    swipeEnabled?: boolean;
  }
  /**
   * The SlideOutView UI component is a classic slide-out menu paired with a view. This UI component is very similar to the SlideOut with only one difference - the SlideOut always contains the List in the slide-out menu, while the SlideOutView can hold any collection there.
   * @deprecated 
   */
  export class dxSlideOutView extends Widget<dxSlideOutViewOptions> {
    /**
     * Gets the UI component&apos;s content.
     */
    content(): DevExpress.core.DxElement;
    /**
     * Hides the UI component&apos;s slide-out menu.
     */
    hideMenu(): DevExpress.core.utils.DxPromise<void>;
    /**
     * Gets the slide-out menu&apos;s content.
     */
    menuContent(): DevExpress.core.DxElement;
    /**
     * Shows the slide-out menu.
     */
    showMenu(): DevExpress.core.utils.DxPromise<void>;
    /**
     * Shows or hides the slide-out menu depending on the argument.
     */
    toggleMenuVisibility(
      showing?: boolean
    ): DevExpress.core.utils.DxPromise<void>;
  }
  module dxSlideOutView {
    export type DisposingEvent = DevExpress.events.EventInfo<dxSlideOutView>;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxSlideOutView>;
    export type OptionChangedEvent =
      DevExpress.events.EventInfo<dxSlideOutView> &
        DevExpress.events.ChangedOptionInfo;
    export type Properties = dxSlideOutViewOptions;
  }
  /**
   * @deprecated use Properties instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxSlideOutViewOptions extends WidgetOptions<dxSlideOutView> {
    /**
     * Specifies a custom template for the UI component content.
     */
    contentTemplate?:
      | DevExpress.core.template
      | ((contentElement: DevExpress.core.DxElement) => any);
    /**
     * Specifies the current menu position.
     */
    menuPosition?: DevExpress.common.SlideOutMenuPosition;
    /**
     * Specifies a custom template for the menu content.
     */
    menuTemplate?:
      | DevExpress.core.template
      | ((menuElement: DevExpress.core.DxElement) => any);
    /**
     * Specifies whether or not the menu panel is visible.
     */
    menuVisible?: boolean;
    /**
     * Specifies whether or not the menu is shown when a user swipes the UI component content.
     */
    swipeEnabled?: boolean;
  }
  /**
   * The Slider is a UI component that allows an end user to set a numeric value on a continuous range of possible values.
   */
  export class dxSlider extends dxTrackBar<dxSliderOptions> {}
  module dxSlider {
    export type ContentReadyEvent = DevExpress.events.EventInfo<dxSlider>;
    export type DisposingEvent = DevExpress.events.EventInfo<dxSlider>;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxSlider>;
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxSlider> &
      DevExpress.events.ChangedOptionInfo;
    export type Properties = dxSliderOptions;
    export type ValueChangedEvent = DevExpress.events.NativeEventInfo<
      dxSlider,
      KeyboardEvent | MouseEvent | PointerEvent | TouchEvent | UIEvent | Event
    > &
      DevExpress.ui.Editor.ValueChangedInfo;
  }
  /**
   * 
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxSliderBaseOptions<TComponent>
    extends dxTrackBarOptions<TComponent> {
    /**
     * Specifies whether or not the UI component changes its state when interacting with a user.
     */
    activeStateEnabled?: boolean;
    /**
     * Specifies whether the UI component can be focused using keyboard navigation.
     */
    focusStateEnabled?: boolean;
    /**
     * Specifies whether the UI component changes its state when a user pauses on it.
     */
    hoverStateEnabled?: boolean;
    /**
     * Specifies the step by which a handle moves when a user presses Page Up or Page Down.
     */
    keyStep?: number;
    /**
     * Configures the labels displayed at the min and max values.
     */
    label?: {
      /**
       * Formats a value before it is displayed in a label.
       */
      format?: Format;
      /**
       * Specifies whether labels are over or under the scale.
       */
      position?: DevExpress.common.VerticalEdge;
      /**
       * Specifies whether slider labels are visible.
       */
      visible?: boolean;
    };
    /**
     * The value to be assigned to the `name` attribute of the underlying HTML element.
     */
    name?: string;
    /**
     * Specifies whether to highlight the selected range.
     */
    showRange?: boolean;
    /**
     * Specifies the step by which the UI component&apos;s value changes when a user drags a handler.
     */
    step?: number;
    /**
     * Configures a tooltip.
     */
    tooltip?: {
      /**
       * Specifies whether a tooltip is enabled.
       */
      enabled?: boolean;
      /**
       * Specifies a tooltip&apos;s display format.
       */
      format?: Format;
      /**
       * Specifies whether a tooltip is over or under the slider.
       */
      position?: DevExpress.common.VerticalEdge;
      /**
       * Specifies when the UI component shows a tooltip.
       */
      showMode?: DevExpress.common.TooltipShowMode;
    };
  }
  /**
   * @deprecated use Properties instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxSliderOptions extends dxSliderBaseOptions<dxSlider> {
    /**
     * The current slider value.
     */
    value?: number;
  }
  /**
   * Sortable is a user interface utility that allows a UI component&apos;s items to be reordered via drag and drop gestures.
   */
  export class dxSortable
    extends DOMComponent<dxSortableOptions>
    implements DraggableBase
  {
    /**
     * Updates Sortable&apos;s dimensions. Call this method after items are added or their dimensions are changed during dragging.
     */
    update(): void;
  }
  module dxSortable {
    export interface AddEvent {
      readonly component: dxSortable;
      readonly element: DevExpress.core.DxElement;
      readonly model?: any;
      readonly event: DevExpress.events.DxEvent<
        PointerEvent | MouseEvent | TouchEvent
      >;
      readonly itemData?: any;
      readonly itemElement: DevExpress.core.DxElement;
      readonly fromIndex: number;
      readonly toIndex: number;
      readonly fromComponent: dxSortable | dxDraggable;
      readonly toComponent: dxSortable | dxDraggable;
      readonly fromData?: any;
      readonly toData?: any;
      readonly dropInsideItem: boolean;
    }
    export type DisposingEvent = DevExpress.events.EventInfo<dxSortable>;
    export type DragChangeEvent = DevExpress.events.Cancelable &
      DevExpress.events.NativeEventInfo<
        dxSortable,
        PointerEvent | MouseEvent | TouchEvent
      > & {
        readonly itemData?: any;
        readonly itemElement: DevExpress.core.DxElement;
        readonly fromIndex?: number;
        readonly toIndex?: number;
        readonly fromComponent?: dxSortable | dxDraggable;
        readonly toComponent?: dxSortable | dxDraggable;
        readonly fromData?: any;
        readonly toData?: any;
        readonly dropInsideItem?: boolean;
      };
    export type DragEndEvent = DevExpress.events.Cancelable &
      DevExpress.events.NativeEventInfo<
        dxSortable,
        PointerEvent | MouseEvent | TouchEvent
      > & {
        readonly itemData?: any;
        readonly itemElement: DevExpress.core.DxElement;
        readonly fromIndex: number;
        readonly toIndex: number;
        readonly fromComponent: dxSortable | dxDraggable;
        readonly toComponent: dxSortable | dxDraggable;
        readonly fromData?: any;
        readonly toData?: any;
        readonly dropInsideItem: boolean;
      };
    export type DragMoveEvent = DevExpress.events.Cancelable &
      DevExpress.events.NativeEventInfo<
        dxSortable,
        PointerEvent | MouseEvent | TouchEvent
      > & {
        readonly itemData?: any;
        readonly itemElement: DevExpress.core.DxElement;
        readonly fromIndex: number;
        readonly toIndex: number;
        readonly fromComponent: dxSortable | dxDraggable;
        readonly toComponent: dxSortable | dxDraggable;
        readonly fromData?: any;
        readonly toData?: any;
        readonly dropInsideItem: boolean;
      };
    export type DragStartEvent = DevExpress.events.Cancelable &
      DevExpress.events.NativeEventInfo<
        dxSortable,
        PointerEvent | MouseEvent | TouchEvent
      > & {
        itemData?: any;
        readonly itemElement: DevExpress.core.DxElement;
        readonly fromIndex: number;
        readonly fromData?: any;
      };
    export interface DragTemplateData {
      readonly itemData?: any;
      readonly itemElement: DevExpress.core.DxElement;
      readonly fromIndex: number;
    }
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxSortable>;
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxSortable> &
      DevExpress.events.ChangedOptionInfo;
    export type Properties = dxSortableOptions;
    export type RemoveEvent = DevExpress.events.NativeEventInfo<
      dxSortable,
      PointerEvent | MouseEvent | TouchEvent
    > & {
      readonly itemData?: any;
      readonly itemElement: DevExpress.core.DxElement;
      readonly fromIndex: number;
      readonly toIndex: number;
      readonly fromComponent: dxSortable | dxDraggable;
      readonly toComponent: dxSortable | dxDraggable;
      readonly fromData?: any;
      readonly toData?: any;
    };
    export type ReorderEvent = DevExpress.events.NativeEventInfo<
      dxSortable,
      PointerEvent | MouseEvent | TouchEvent
    > & {
      readonly itemData?: any;
      readonly itemElement: DevExpress.core.DxElement;
      readonly fromIndex: number;
      readonly toIndex: number;
      readonly fromComponent: dxSortable | dxDraggable;
      readonly toComponent: dxSortable | dxDraggable;
      readonly fromData?: any;
      readonly toData?: any;
      readonly dropInsideItem: boolean;
      promise?: PromiseLike<void>;
    };
  }
  /**
   * @deprecated use Properties instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxSortableOptions extends DraggableBaseOptions<dxSortable> {
    /**
     * Allows a user to drop an item inside another item.
     */
    allowDropInsideItem?: boolean;
    /**
     * Allows a user to reorder sortable items.
     */
    allowReordering?: boolean;
    /**
     * Specifies custom markup to be shown instead of the item being dragged.
     */
    dragTemplate?:
      | DevExpress.core.template
      | ((
          dragInfo: DevExpress.ui.dxSortable.DragTemplateData,
          containerElement: DevExpress.core.DxElement
        ) => string | DevExpress.core.UserDefinedElement);
    /**
     * Specifies how to highlight the item&apos;s drop position.
     */
    dropFeedbackMode?: DevExpress.common.DragHighlight;
    /**
     * Specifies a CSS selector for the items that can be dragged.
     */
    filter?: string;
    /**
     * Notifies the UI component of the items&apos; orientation.
     */
    itemOrientation?: DevExpress.common.Orientation;
    /**
     * Moves an element in the HTML markup when it is dropped.
     */
    moveItemOnDrop?: boolean;
    /**
     * A function that is called when a new item is added.
     */
    onAdd?: (e: DevExpress.ui.dxSortable.AddEvent) => void;
    /**
     * A function that is called when the dragged item&apos;s position in the list is changed.
     */
    onDragChange?: (e: DevExpress.ui.dxSortable.DragChangeEvent) => void;
    /**
     * A function that is called when the drag gesture is finished.
     */
    onDragEnd?: (e: DevExpress.ui.dxSortable.DragEndEvent) => void;
    /**
     * A function that is called every time a draggable item is moved.
     */
    onDragMove?: (e: DevExpress.ui.dxSortable.DragMoveEvent) => void;
    /**
     * A function that is called when drag gesture is initialized.
     */
    onDragStart?: (e: DevExpress.ui.dxSortable.DragStartEvent) => void;
    /**
     * A function that is called when a draggable item is removed.
     */
    onRemove?: (e: DevExpress.ui.dxSortable.RemoveEvent) => void;
    /**
     * A function that is called when the draggable items are reordered.
     */
    onReorder?: (e: DevExpress.ui.dxSortable.ReorderEvent) => void;
  }
  /**
   * The SpeedDialAction is a button that performs a custom action. It can be represented by a Floating Action Button (FAB) or a button in a speed dial menu opened with the FAB.
   */
  export class dxSpeedDialAction extends Widget<dxSpeedDialActionOptions> {}
  module dxSpeedDialAction {
    export type ClickEvent = DevExpress.events.NativeEventInfo<
      dxSpeedDialAction,
      MouseEvent | PointerEvent
    > & {
      actionElement?: DevExpress.core.DxElement;
    };
    export type ContentReadyEvent =
      DevExpress.events.EventInfo<dxSpeedDialAction> & {
        actionElement?: DevExpress.core.DxElement;
      };
    export type DisposingEvent = DevExpress.events.EventInfo<dxSpeedDialAction>;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxSpeedDialAction>;
    export type OptionChangedEvent =
      DevExpress.events.EventInfo<dxSpeedDialAction> &
        DevExpress.events.ChangedOptionInfo;
    export type Properties = dxSpeedDialActionOptions;
  }
  /**
   * @deprecated use Properties instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxSpeedDialActionOptions
    extends WidgetOptions<dxSpeedDialAction> {
    /**
     * Specifies the icon the FAB or speed dial action button displays.
     */
    icon?: string;
    /**
     * Allows you to reorder action buttons in the speed dial menu.
     */
    index?: number;
    /**
     * Specifies the text label displayed inside the FAB or near the speed dial action button.
     */
    label?: string;
    /**
     * A function that is executed when the FAB or speed dial action button is clicked or tapped.
     */
    onClick?: (e: DevExpress.ui.dxSpeedDialAction.ClickEvent) => void;
    /**
     * A function that is executed when the UI component&apos;s content is ready and each time the content is changed.
     */
    onContentReady?: (
      e: DevExpress.ui.dxSpeedDialAction.ContentReadyEvent
    ) => void;
    /**
     * Allows you to hide the FAB from the view or the action from the speed dial menu.
     */
    visible?: boolean;
  }
  /**
   * The Switch is a UI component that can be in two states: &apos;On&apos; and &apos;Off&apos;.
   */
  export class dxSwitch extends Editor<dxSwitchOptions> {}
  module dxSwitch {
    export type ContentReadyEvent = DevExpress.events.EventInfo<dxSwitch>;
    export type DisposingEvent = DevExpress.events.EventInfo<dxSwitch>;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxSwitch>;
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxSwitch> &
      DevExpress.events.ChangedOptionInfo;
    export type Properties = dxSwitchOptions;
    export type ValueChangedEvent = DevExpress.events.NativeEventInfo<
      dxSwitch,
      KeyboardEvent | MouseEvent | PointerEvent | TouchEvent | UIEvent | Event
    > &
      DevExpress.ui.Editor.ValueChangedInfo;
  }
  /**
   * @deprecated use Properties instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxSwitchOptions extends EditorOptions<dxSwitch> {
    /**
     * Specifies whether or not the UI component changes its state when interacting with a user.
     */
    activeStateEnabled?: boolean;
    /**
     * Specifies whether the UI component can be focused using keyboard navigation.
     */
    focusStateEnabled?: boolean;
    /**
     * Specifies whether the UI component changes its state when a user pauses on it.
     */
    hoverStateEnabled?: boolean;
    /**
     * The value to be assigned to the `name` attribute of the underlying HTML element.
     */
    name?: string;
    /**
     * Specifies the text displayed when the UI component is switched off.
     */
    switchedOffText?: string;
    /**
     * Specifies the text displayed when the UI component is switched on.
     */
    switchedOnText?: string;
    /**
     * A Boolean value specifying whether the current switch state is &apos;On&apos; or &apos;Off&apos;.
     */
    value?: boolean;
  }
  /**
   * The TabPanel is a UI component consisting of the Tabs and MultiView UI components. It automatically synchronizes the selected tab with the currently displayed view and vice versa.
   */
  export class dxTabPanel<
    TItem extends DevExpress.ui.dxTabPanel.ItemLike = any,
    TKey = any
  > extends dxMultiView<dxTabPanelOptions<TItem, TKey>, TItem, TKey> {}
  module dxTabPanel {
    export type ContentReadyEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxTabPanel<TItem, TKey>>;
    export type DisposingEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxTabPanel<TItem, TKey>>;
    export type ExplicitTypes<TItem extends ItemLike, TKey> = {
      Properties: Properties<TItem, TKey>;
      ContentReadyEvent: ContentReadyEvent<TItem, TKey>;
      DisposingEvent: DisposingEvent<TItem, TKey>;
      InitializedEvent: InitializedEvent<TItem, TKey>;
      ItemClickEvent: ItemClickEvent<TItem, TKey>;
      ItemContextMenuEvent: ItemContextMenuEvent<TItem, TKey>;
      ItemHoldEvent: ItemHoldEvent<TItem, TKey>;
      ItemRenderedEvent: ItemRenderedEvent<TItem, TKey>;
      OptionChangedEvent: OptionChangedEvent<TItem, TKey>;
      SelectionChangedEvent: SelectionChangedEvent<TItem, TKey>;
      TitleClickEvent: TitleClickEvent<TItem, TKey>;
      TitleHoldEvent: TitleHoldEvent<TItem, TKey>;
      TitleRenderedEvent: TitleRenderedEvent<TItem, TKey>;
    };
    export type InitializedEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.InitializedEventInfo<dxTabPanel<TItem, TKey>>;
    export type ItemClickEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.NativeEventInfo<
      dxTabPanel<TItem, TKey>,
      KeyboardEvent | MouseEvent | PointerEvent
    > &
      DevExpress.events.ItemInfo<TItem>;
    export type ItemContextMenuEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.NativeEventInfo<
      dxTabPanel<TItem, TKey>,
      MouseEvent | PointerEvent | TouchEvent
    > &
      DevExpress.events.ItemInfo<TItem>;
    export type ItemHoldEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.NativeEventInfo<
      dxTabPanel<TItem, TKey>,
      MouseEvent | PointerEvent | TouchEvent
    > &
      DevExpress.events.ItemInfo<TItem>;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    type ItemLike = string | Item | any;
    export type ItemRenderedEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxTabPanel<TItem, TKey>> &
      DevExpress.events.ItemInfo<TItem>;
    export type OptionChangedEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxTabPanel<TItem, TKey>> &
      DevExpress.events.ChangedOptionInfo;
    export type Properties<
      TItem extends ItemLike = any,
      TKey = any
    > = dxTabPanelOptions<TItem, TKey>;
    export type SelectionChangedEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxTabPanel<TItem, TKey>> &
      DevExpress.ui.CollectionWidget.SelectionChangedInfo<TItem>;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    interface TabPanelItemInfo<TItem extends ItemLike> {
      readonly itemData?: TItem;
      readonly itemElement?: DevExpress.core.DxElement;
    }
    export type TitleClickEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.NativeEventInfo<
      dxTabPanel<TItem, TKey>,
      KeyboardEvent | MouseEvent | PointerEvent
    > &
      TabPanelItemInfo<TItem>;
    export type TitleHoldEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.NativeEventInfo<
      dxTabPanel<TItem, TKey>,
      MouseEvent | PointerEvent | TouchEvent
    > &
      TabPanelItemInfo<TItem>;
    export type TitleRenderedEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxTabPanel<TItem, TKey>> &
      TabPanelItemInfo<TItem>;
  }
  /**
   * @deprecated Use Item instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxTabPanelItem extends DevExpress.ui.dxMultiView.Item {
    /**
     * Specifies a badge text for the tab.
     */
    badge?: string;
    /**
     * Specifies the icon to be displayed in the tab&apos;s title.
     */
    icon?: string;
    /**
     * Specifies a template that should be used to render the tab for this item only.
     */
    tabTemplate?:
      | DevExpress.core.template
      | (() => string | DevExpress.core.UserDefinedElement);
    /**
     * Specifies the item title text displayed on a corresponding tab.
     */
    title?: string;
  }
  /**
   * @deprecated use Properties instead
   */
  export interface dxTabPanelOptions<
    TItem extends DevExpress.ui.dxTabPanel.ItemLike = any,
    TKey = any
  > extends dxMultiViewBaseOptions<dxTabPanel<TItem, TKey>, TItem, TKey> {
    /**
     * Specifies whether or not to animate the displayed item change.
     */
    animationEnabled?: boolean;
    /**
     * Binds the UI component to data.
     */
    dataSource?: DevExpress.data.DataSource.DataSourceLike<TItem, TKey> | null;
    /**
     * Specifies whether the UI component changes its state when a user pauses on it.
     */
    hoverStateEnabled?: boolean;
    /**
     * Specifies a custom template for item titles.
     */
    itemTitleTemplate?:
      | DevExpress.core.template
      | ((
          itemData: TItem,
          itemIndex: number,
          itemElement: DevExpress.core.DxElement
        ) => string | DevExpress.core.UserDefinedElement);
    /**
     * An array of items displayed by the UI component.
     */
    items?: Array<TItem>;
    /**
     * A function that is executed when a tab is clicked or tapped.
     */
    onTitleClick?:
      | ((e: DevExpress.ui.dxTabPanel.TitleClickEvent<TItem, TKey>) => void)
      | string;
    /**
     * A function that is executed when a tab has been held for a specified period.
     */
    onTitleHold?: (
      e: DevExpress.ui.dxTabPanel.TitleHoldEvent<TItem, TKey>
    ) => void;
    /**
     * A function that is executed after a tab is rendered.
     */
    onTitleRendered?: (
      e: DevExpress.ui.dxTabPanel.TitleRenderedEvent<TItem, TKey>
    ) => void;
    /**
     * Specifies whether to repaint only those elements whose data changed.
     */
    repaintChangesOnly?: boolean;
    /**
     * A Boolean value specifying if tabs in the title are scrolled by content.
     */
    scrollByContent?: boolean;
    /**
     * A Boolean indicating whether or not to add scrolling support for tabs in the title.
     */
    scrollingEnabled?: boolean;
    /**
     * Specifies whether navigation buttons should be available when tabs exceed the UI component&apos;s width.
     */
    showNavButtons?: boolean;
    /**
     * A Boolean value specifying whether or not to allow users to change the selected index by swiping.
     */
    swipeEnabled?: boolean;
  }
  /**
   * The Tabs is a tab strip used to switch between pages or views. This UI component is included in the TabPanel UI component, but you can use the Tabs separately as well.
   */
  export class dxTabs<
    TProperties extends dxTabsOptions<TItem, TKey> = dxTabsOptions<any, any>,
    TItem extends DevExpress.ui.dxTabs.ItemLike = any,
    TKey = any
  > extends CollectionWidget<TProperties, TItem, TKey> {}
  module dxTabs {
    export type ContentReadyEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.EventInfo<TabsInstance<TItem, TKey>>;
    export type DisposingEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.EventInfo<TabsInstance<TItem, TKey>>;
    export type ExplicitTypes<TItem extends ItemLike, TKey> = {
      Properties: Properties<TItem, TKey>;
      ContentReadyEvent: ContentReadyEvent<TItem, TKey>;
      DisposingEvent: DisposingEvent<TItem, TKey>;
      InitializedEvent: InitializedEvent<TItem, TKey>;
      ItemClickEvent: ItemClickEvent<TItem, TKey>;
      ItemContextMenuEvent: ItemContextMenuEvent<TItem, TKey>;
      ItemHoldEvent: ItemHoldEvent<TItem, TKey>;
      ItemRenderedEvent: ItemRenderedEvent<TItem, TKey>;
      OptionChangedEvent: OptionChangedEvent<TItem, TKey>;
      SelectionChangedEvent: SelectionChangedEvent<TItem, TKey>;
    };
    export type InitializedEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.InitializedEventInfo<TabsInstance<TItem, TKey>>;
    export type ItemClickEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.NativeEventInfo<
      TabsInstance<TItem, TKey>,
      KeyboardEvent | MouseEvent | PointerEvent
    > &
      DevExpress.events.ItemInfo<TItem>;
    export type ItemContextMenuEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.NativeEventInfo<
      TabsInstance<TItem, TKey>,
      MouseEvent | PointerEvent | TouchEvent
    > &
      DevExpress.events.ItemInfo<TItem>;
    export type ItemHoldEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.NativeEventInfo<
      TabsInstance<TItem, TKey>,
      MouseEvent | PointerEvent | TouchEvent
    > &
      DevExpress.events.ItemInfo<TItem>;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export type ItemLike = string | Item | any;
    export type ItemRenderedEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.EventInfo<TabsInstance<TItem, TKey>> &
      DevExpress.events.ItemInfo<TItem>;
    export type OptionChangedEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.EventInfo<TabsInstance<TItem, TKey>> &
      DevExpress.events.ChangedOptionInfo;
    export type Properties<
      TItem extends ItemLike = any,
      TKey = any
    > = dxTabsBaseOptions<TabsInstance<TItem, TKey>, TItem, TKey>;
    export type SelectionChangedEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.EventInfo<TabsInstance<TItem, TKey>> &
      DevExpress.ui.CollectionWidget.SelectionChangedInfo<TItem>;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    interface TabsInstance<TItem, TKey>
      extends dxTabs<Properties<TItem, TKey>, TItem, TKey> {}
  }
  /**
   * @deprecated use Properties instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxTabsBaseOptions<
    TComponent extends dxTabs<any, TItem, TKey> = dxTabs<any, any, any>,
    TItem extends DevExpress.ui.dxTabs.ItemLike = any,
    TKey = any
  > extends CollectionWidgetOptions<TComponent, TItem, TKey> {
    /**
     * Binds the UI component to data.
     */
    dataSource?: DevExpress.data.DataSource.DataSourceLike<TItem, TKey> | null;
    /**
     * Specifies whether the UI component can be focused using keyboard navigation.
     */
    focusStateEnabled?: boolean;
    /**
     * Specifies whether the UI component changes its state when a user pauses on it.
     */
    hoverStateEnabled?: boolean;
    /**
     * An array of items displayed by the UI component.
     */
    items?: Array<TItem>;
    /**
     * Specifies whether to repaint only those elements whose data changed.
     */
    repaintChangesOnly?: boolean;
    /**
     * Specifies whether or not an end-user can scroll tabs by swiping.
     */
    scrollByContent?: boolean;
    /**
     * Specifies whether or not an end-user can scroll tabs.
     */
    scrollingEnabled?: boolean;
    /**
     * Specifies whether the UI component enables an end-user to select only a single item or multiple items.
     */
    selectionMode?: DevExpress.common.SingleOrMultiple;
    /**
     * Specifies whether navigation buttons should be available when tabs exceed the UI component&apos;s width.
     */
    showNavButtons?: boolean;
  }
  /**
   * @deprecated Use Item instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxTabsItem extends CollectionWidgetItem {
    /**
     * Specifies a badge text for the tab.
     */
    badge?: string;
    /**
     * Specifies the icon to be displayed on the tab.
     */
    icon?: string;
  }
  /**
   * @deprecated use DevExpress.ui.dxTabs.Properties instead
   */
  export interface dxTabsOptions<
    TItem extends DevExpress.ui.dxTabs.ItemLike = any,
    TKey = any
  > extends DevExpress.ui.dxTabs.Properties<TItem, TKey> {}
  /**
   * The TagBox UI component is an editor that allows an end user to select multiple items from a drop-down list.
   */
  export class dxTagBox extends dxSelectBox<dxTagBoxOptions> {}
  module dxTagBox {
    export type ChangeEvent = DevExpress.events.NativeEventInfo<
      dxTagBox,
      Event
    >;
    export type ClosedEvent = DevExpress.events.EventInfo<dxTagBox>;
    export type ContentReadyEvent = DevExpress.events.EventInfo<dxTagBox>;
    export type CustomItemCreatingEvent =
      DevExpress.events.EventInfo<dxTagBox> &
        DevExpress.ui.dxSelectBox.CustomItemCreatingInfo;
    export type DisposingEvent = DevExpress.events.EventInfo<dxTagBox>;
    export type DropDownButtonTemplateData =
      DevExpress.ui.dxDropDownEditor.DropDownButtonTemplateDataModel;
    export type EnterKeyEvent = DevExpress.events.NativeEventInfo<
      dxTagBox,
      KeyboardEvent
    >;
    export type FocusInEvent = DevExpress.events.NativeEventInfo<
      dxTagBox,
      FocusEvent
    >;
    export type FocusOutEvent = DevExpress.events.NativeEventInfo<
      dxTagBox,
      FocusEvent
    >;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxTagBox>;
    export type InputEvent = DevExpress.events.NativeEventInfo<
      dxTagBox,
      UIEvent & { target: HTMLInputElement }
    >;
    export type ItemClickEvent = DevExpress.events.NativeEventInfo<dxTagBox> &
      DevExpress.events.ItemInfo;
    export type KeyDownEvent = DevExpress.events.NativeEventInfo<
      dxTagBox,
      KeyboardEvent
    >;
    export type KeyPressEvent = DevExpress.events.NativeEventInfo<
      dxTagBox,
      KeyboardEvent
    >;
    export type KeyUpEvent = DevExpress.events.NativeEventInfo<
      dxTagBox,
      KeyboardEvent
    >;
    export type MultiTagPreparingEvent = DevExpress.events.Cancelable &
      DevExpress.events.EventInfo<dxTagBox> & {
        readonly multiTagElement: DevExpress.core.DxElement;
        readonly selectedItems?: Array<string | number | any>;
        text?: string;
      };
    export type OpenedEvent = DevExpress.events.EventInfo<dxTagBox>;
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxTagBox> &
      DevExpress.events.ChangedOptionInfo;
    export type Properties = dxTagBoxOptions;
    export type SelectAllValueChangedEvent =
      DevExpress.events.EventInfo<dxTagBox> & {
        readonly value: boolean;
      };
    export type SelectionChangedEvent = DevExpress.events.EventInfo<dxTagBox> &
      DevExpress.ui.CollectionWidget.SelectionChangedInfo<
        string | number | any
      >;
    export type ValueChangedEvent = DevExpress.events.NativeEventInfo<
      dxTagBox,
      KeyboardEvent | MouseEvent | PointerEvent | Event
    > &
      DevExpress.ui.Editor.ValueChangedInfo;
  }
  /**
   * @deprecated use Properties instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxTagBoxOptions
    extends Pick<
      dxSelectBoxOptions<dxTagBox>,
      Exclude<keyof dxSelectBoxOptions<dxTagBox>, 'onSelectionChanged'>
    > {
    /**
     * Specifies how the UI component applies values.
     */
    applyValueMode?: DevExpress.common.ApplyValueMode;
    /**
     * A Boolean value specifying whether or not to hide selected items.
     */
    hideSelectedItems?: boolean;
    /**
     * Specifies the limit on displayed tags. On exceeding it, the UI component replaces all tags with a single multi-tag that displays the number of selected items.
     */
    maxDisplayedTags?: number;
    /**
     * A Boolean value specifying whether or not the UI component is multiline.
     */
    multiline?: boolean;
    /**
     * A function that is executed before the multi-tag is rendered.
     */
    onMultiTagPreparing?: (
      e: DevExpress.ui.dxTagBox.MultiTagPreparingEvent
    ) => void;
    /**
     * A function that is executed when the &apos;Select All&apos; check box value is changed. Applies only if showSelectionControls is true.
     */
    onSelectAllValueChanged?: (
      e: DevExpress.ui.dxTagBox.SelectAllValueChangedEvent
    ) => void;
    /**
     * A function that is executed when a list item is selected or selection is canceled.
     */
    onSelectionChanged?: (
      e: DevExpress.ui.dxTagBox.SelectionChangedEvent
    ) => void;
    /**
     * Specifies the mode in which all items are selected.
     */
    selectAllMode?: DevExpress.common.SelectAllMode;
    /**
     * Gets the currently selected items.
     */
    selectedItems?: Array<string | number | any>;
    /**
     * Specifies the text displayed at the &apos;Select All&apos; check box.
     */
    selectAllText?: string;
    /**
     * Specifies whether the drop-down button is visible.
     */
    showDropDownButton?: boolean;
    /**
     * Specifies the maximum filter query length in characters.
     */
    maxFilterQueryLength?: number;
    /**
     * Specifies whether the multi-tag is shown without ordinary tags.
     */
    showMultiTagOnly?: boolean;
    /**
     * Specifies a custom template for tags.
     */
    tagTemplate?:
      | DevExpress.core.template
      | ((
          itemData: any,
          itemElement: DevExpress.core.DxElement
        ) => string | DevExpress.core.UserDefinedElement);
    /**
     * Specifies the selected items.
     */
    value?: Array<string | number | any>;
  }
  /**
   * The TextArea is a UI component that enables a user to enter and edit a multi-line text.
   */
  export class dxTextArea extends dxTextBox<dxTextAreaOptions> {}
  module dxTextArea {
    export type ChangeEvent = DevExpress.events.NativeEventInfo<
      dxTextArea,
      Event
    >;
    export type ContentReadyEvent = DevExpress.events.EventInfo<dxTextArea>;
    export type CopyEvent = DevExpress.events.NativeEventInfo<
      dxTextArea,
      ClipboardEvent
    >;
    export type CutEvent = DevExpress.events.NativeEventInfo<
      dxTextArea,
      ClipboardEvent
    >;
    export type DisposingEvent = DevExpress.events.EventInfo<dxTextArea>;
    export type EnterKeyEvent = DevExpress.events.NativeEventInfo<
      dxTextArea,
      KeyboardEvent
    >;
    export type FocusInEvent = DevExpress.events.NativeEventInfo<
      dxTextArea,
      FocusEvent
    >;
    export type FocusOutEvent = DevExpress.events.NativeEventInfo<
      dxTextArea,
      FocusEvent
    >;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxTextArea>;
    export type InputEvent = DevExpress.events.NativeEventInfo<
      dxTextArea,
      UIEvent & { target: HTMLInputElement }
    >;
    export type KeyDownEvent = DevExpress.events.NativeEventInfo<
      dxTextArea,
      KeyboardEvent
    >;
    export type KeyPressEvent = DevExpress.events.NativeEventInfo<
      dxTextArea,
      KeyboardEvent
    >;
    export type KeyUpEvent = DevExpress.events.NativeEventInfo<
      dxTextArea,
      KeyboardEvent
    >;
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxTextArea> &
      DevExpress.events.ChangedOptionInfo;
    export type PasteEvent = DevExpress.events.NativeEventInfo<
      dxTextArea,
      ClipboardEvent
    >;
    export type Properties = dxTextAreaOptions;
    export type ValueChangedEvent = DevExpress.events.NativeEventInfo<
      dxTextArea,
      KeyboardEvent | MouseEvent | PointerEvent | TouchEvent | Event
    > &
      DevExpress.ui.Editor.ValueChangedInfo;
  }
  /**
   * @deprecated use Properties instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxTextAreaOptions extends dxTextBoxOptions<dxTextArea> {
    /**
     * A Boolean value specifying whether or not the auto resizing mode is enabled.
     */
    autoResizeEnabled?: boolean;
    /**
     * Specifies the maximum height of the UI component.
     */
    maxHeight?: number | string;
    /**
     * Specifies the minimum height of the UI component.
     */
    minHeight?: number | string;
    /**
     * Specifies whether or not the UI component checks the inner text for spelling mistakes.
     */
    spellcheck?: boolean;
  }
  /**
   * The TextBox is a UI component that enables a user to enter and edit a single line of text.
   */
  export class dxTextBox<
    TProperties = DevExpress.ui.dxTextBox.Properties
  > extends dxTextEditor<TProperties> {}
  module dxTextBox {
    export type ChangeEvent = DevExpress.events.NativeEventInfo<
      dxTextBox,
      Event
    >;
    export type ContentReadyEvent = DevExpress.events.EventInfo<dxTextBox>;
    export type CopyEvent = DevExpress.events.NativeEventInfo<
      dxTextBox,
      ClipboardEvent
    >;
    export type CutEvent = DevExpress.events.NativeEventInfo<
      dxTextBox,
      ClipboardEvent
    >;
    export type DisposingEvent = DevExpress.events.EventInfo<dxTextBox>;
    export type EnterKeyEvent = DevExpress.events.NativeEventInfo<
      dxTextBox,
      KeyboardEvent
    >;
    export type FocusInEvent = DevExpress.events.NativeEventInfo<
      dxTextBox,
      FocusEvent
    >;
    export type FocusOutEvent = DevExpress.events.NativeEventInfo<
      dxTextBox,
      FocusEvent
    >;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxTextBox>;
    export type InputEvent = DevExpress.events.NativeEventInfo<
      dxTextBox,
      UIEvent & { target: HTMLInputElement }
    >;
    export type KeyDownEvent = DevExpress.events.NativeEventInfo<
      dxTextBox,
      KeyboardEvent
    >;
    export type KeyPressEvent = DevExpress.events.NativeEventInfo<
      dxTextBox,
      KeyboardEvent
    >;
    export type KeyUpEvent = DevExpress.events.NativeEventInfo<
      dxTextBox,
      KeyboardEvent
    >;
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxTextBox> &
      DevExpress.events.ChangedOptionInfo;
    export type PasteEvent = DevExpress.events.NativeEventInfo<
      dxTextBox,
      ClipboardEvent
    >;
    export type Properties = dxTextBoxOptions<TextBoxInstance>;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    interface TextBoxInstance extends dxTextBox<Properties> {}
    export type TextBoxType =
      | 'email'
      | 'password'
      | 'search'
      | 'tel'
      | 'text'
      | 'url';
    export type ValueChangedEvent = DevExpress.events.NativeEventInfo<
      dxTextBox,
      KeyboardEvent | MouseEvent | PointerEvent | TouchEvent | Event
    > &
      DevExpress.ui.Editor.ValueChangedInfo;
  }
  /**
   * @deprecated use Properties instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxTextBoxOptions<TComponent>
    extends dxTextEditorOptions<TComponent> {
    /**
     * Specifies the maximum number of characters you can enter into the textbox.
     */
    maxLength?: string | number;
    /**
     * The &apos;mode&apos; attribute value of the actual HTML input element representing the text box.
     */
    mode?: DevExpress.ui.dxTextBox.TextBoxType;
    /**
     * Specifies a value the UI component displays.
     */
    value?: string;
  }
  /**
   * A base class for text editing UI components.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export class dxTextEditor<
    TProperties = DevExpress.ui.dxTextEditor.Properties
  > extends Editor<TProperties> {
    /**
     * Removes focus from the input element.
     */
    blur(): void;
    /**
     * Sets focus to the input element representing the UI component.
     */
    focus(): void;
    /**
     * Gets an instance of a custom action button.
     */
    getButton(name: string): dxButton | undefined;
  }
  module dxTextEditor {
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    type Properties = dxTextEditorOptions<TextEditorInstance>;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    interface TextEditorInstance extends dxTextEditor<Properties> {}
  }
  /**
   * 
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxTextEditorButton {
    /**
     * Specifies whether to place the button before or after the input text field.
     */
    location?: DevExpress.common.TextEditorButtonLocation;
    /**
     * Specifies the button&apos;s name.
     */
    name?: string;
    /**
     * Configures the Button UI component used as the action button.
     */
    options?: dxButtonOptions;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxTextEditorOptions<TComponent>
    extends EditorOptions<TComponent> {
    /**
     * Allows you to add custom buttons to the input text field.
     */
    buttons?: Array<
      string | DevExpress.common.TextBoxPredefinedButton | dxTextEditorButton
    >;
    /**
     * Specifies whether the UI component can be focused using keyboard navigation.
     */
    focusStateEnabled?: boolean;
    /**
     * Specifies whether the UI component changes its state when a user pauses on it.
     */
    hoverStateEnabled?: boolean;
    /**
     * Specifies the attributes to be passed on to the underlying HTML element.
     */
    inputAttr?: any;
    /**
     * Specifies a text string used to annotate the editor&apos;s value.
     */
    label?: string;
    /**
     * Specifies the label&apos;s display mode.
     */
    labelMode?: DevExpress.common.LabelMode;
    /**
     * The editor mask that specifies the custom format of the entered string.
     */
    mask?: string;
    /**
     * Specifies a mask placeholder. A single character is recommended.
     */
    maskChar?: string;
    /**
     * A message displayed when the entered text does not match the specified pattern.
     */
    maskInvalidMessage?: string;
    /**
     * Specifies custom mask rules.
     */
    maskRules?: any;
    /**
     * The value to be assigned to the `name` attribute of the underlying HTML element.
     */
    name?: string;
    /**
     * A function that is executed when the UI component loses focus after the text field&apos;s content was changed using the keyboard.
     */
    onChange?: (
      e: DevExpress.events.NativeEventInfo<TComponent, Event>
    ) => void;
    /**
     * A function that is executed when the UI component&apos;s input has been copied.
     */
    onCopy?: (
      e: DevExpress.events.NativeEventInfo<TComponent, ClipboardEvent>
    ) => void;
    /**
     * A function that is executed when the UI component&apos;s input has been cut.
     */
    onCut?: (
      e: DevExpress.events.NativeEventInfo<TComponent, ClipboardEvent>
    ) => void;
    /**
     * A function that is executed when the Enter key has been pressed while the UI component is focused.
     */
    onEnterKey?: (
      e: DevExpress.events.NativeEventInfo<TComponent, KeyboardEvent>
    ) => void;
    /**
     * A function that is executed when the UI component gets focus.
     */
    onFocusIn?: (
      e: DevExpress.events.NativeEventInfo<TComponent, FocusEvent>
    ) => void;
    /**
     * A function that is executed when the UI component loses focus.
     */
    onFocusOut?: (
      e: DevExpress.events.NativeEventInfo<TComponent, FocusEvent>
    ) => void;
    /**
     * A function that is executed each time the UI component&apos;s input is changed while the UI component is focused.
     */
    onInput?: (
      e: DevExpress.events.NativeEventInfo<TComponent, UIEvent>
    ) => void;
    /**
     * A function that is executed when a user is pressing a key on the keyboard.
     */
    onKeyDown?: (
      e: DevExpress.events.NativeEventInfo<TComponent, KeyboardEvent>
    ) => void;
    /**
     * A function that is executed when a user releases a key on the keyboard.
     */
    onKeyUp?: (
      e: DevExpress.events.NativeEventInfo<TComponent, KeyboardEvent>
    ) => void;
    /**
     * A function that is executed when the UI component&apos;s input has been pasted.
     */
    onPaste?: (
      e: DevExpress.events.NativeEventInfo<TComponent, ClipboardEvent>
    ) => void;
    /**
     * Specifies a text string displayed when the editor&apos;s value is empty.
     */
    placeholder?: string;
    /**
     * Specifies whether to display the Clear button in the UI component.
     */
    showClearButton?: boolean;
    /**
     * Specifies when the UI component shows the mask. Applies only if useMaskedValue is true.
     */
    showMaskMode?: DevExpress.common.MaskMode;
    /**
     * Specifies whether or not the UI component checks the inner text for spelling mistakes.
     */
    spellcheck?: boolean;
    /**
     * Specifies how the UI component&apos;s text field is styled.
     */
    stylingMode?: DevExpress.common.EditorStyle;
    /**
     * The read-only property that holds the text displayed by the UI component input element.
     */
    text?: string;
    /**
     * Specifies whether the value should contain mask characters or not.
     */
    useMaskedValue?: boolean;
    /**
     * Specifies the editor&apos;s value.
     */
    value?: any;
    /**
     * Specifies the DOM events after which the UI component&apos;s value should be updated.
     */
    valueChangeEvent?: string;
  }
  /**
   * The TileView UI component contains a collection of tiles. Tiles can store much more information than ordinary buttons, that is why they are very popular in apps designed for touch devices.
   */
  export class dxTileView<
    TItem extends DevExpress.ui.dxTileView.ItemLike = any,
    TKey = any
  > extends CollectionWidget<dxTileViewOptions<TItem, TKey>, TItem, TKey> {
    /**
     * Gets the current scroll position.
     */
    scrollPosition(): number;
  }
  module dxTileView {
    export type ContentReadyEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxTileView<TItem, TKey>>;
    export type DisposingEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxTileView<TItem, TKey>>;
    export type ExplicitTypes<TItem extends ItemLike, TKey> = {
      Properties: Properties<TItem, TKey>;
      ContentReadyEvent: ContentReadyEvent<TItem, TKey>;
      DisposingEvent: DisposingEvent<TItem, TKey>;
      InitializedEvent: InitializedEvent<TItem, TKey>;
      ItemClickEvent: ItemClickEvent<TItem, TKey>;
      ItemContextMenuEvent: ItemContextMenuEvent<TItem, TKey>;
      ItemHoldEvent: ItemHoldEvent<TItem, TKey>;
      ItemRenderedEvent: ItemRenderedEvent<TItem, TKey>;
      OptionChangedEvent: OptionChangedEvent<TItem, TKey>;
    };
    export type InitializedEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.InitializedEventInfo<dxTileView<TItem, TKey>>;
    export type ItemClickEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.NativeEventInfo<
      dxTileView<TItem, TKey>,
      KeyboardEvent | MouseEvent | PointerEvent
    > &
      DevExpress.events.ItemInfo<TItem>;
    export type ItemContextMenuEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.NativeEventInfo<
      dxTileView<TItem, TKey>,
      MouseEvent | PointerEvent | TouchEvent
    > &
      DevExpress.events.ItemInfo<TItem>;
    export type ItemHoldEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.NativeEventInfo<
      dxTileView<TItem, TKey>,
      MouseEvent | PointerEvent | TouchEvent
    > &
      DevExpress.events.ItemInfo<TItem>;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    type ItemLike = string | Item | any;
    export type ItemRenderedEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxTileView<TItem, TKey>> &
      DevExpress.events.ItemInfo<TItem>;
    export type OptionChangedEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxTileView<TItem, TKey>> &
      DevExpress.events.ChangedOptionInfo;
    export type Properties<
      TItem extends ItemLike = any,
      TKey = any
    > = dxTileViewOptions<TItem, TKey>;
  }
  /**
   * @deprecated Use Item instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxTileViewItem extends CollectionWidgetItem {
    /**
     * Specifies a multiplier for the baseItemHeight property value (for the purpose of obtaining the actual item height).
     */
    heightRatio?: number;
    /**
     * Specifies a multiplier for the baseItemWidth property value (for the purpose of obtaining the actual item width).
     */
    widthRatio?: number;
  }
  /**
   * @deprecated use Properties instead
   */
  export interface dxTileViewOptions<
    TItem extends DevExpress.ui.dxTileView.ItemLike = any,
    TKey = any
  > extends CollectionWidgetOptions<dxTileView<TItem, TKey>, TItem, TKey> {
    /**
     * A Boolean value specifying whether or not the UI component changes its state when interacting with a user.
     */
    activeStateEnabled?: boolean;
    /**
     * Specifies the height of the base tile view item.
     */
    baseItemHeight?: number;
    /**
     * Specifies the width of the base tile view item.
     */
    baseItemWidth?: number;
    /**
     * Binds the UI component to data.
     */
    dataSource?: DevExpress.data.DataSource.DataSourceLike<TItem, TKey> | null;
    /**
     * Specifies whether the UI component is oriented horizontally or vertically.
     */
    direction?: DevExpress.common.Orientation;
    /**
     * Specifies whether the UI component can be focused using keyboard navigation.
     */
    focusStateEnabled?: boolean;
    /**
     * Specifies the UI component&apos;s height.
     */
    height?: number | string | (() => number | string);
    /**
     * Specifies whether the UI component changes its state when a user pauses on it.
     */
    hoverStateEnabled?: boolean;
    /**
     * Specifies the distance in pixels between adjacent tiles.
     */
    itemMargin?: number;
    /**
     * An array of items displayed by the UI component.
     */
    items?: Array<TItem>;
    /**
     * A Boolean value specifying whether or not to display a scrollbar.
     */
    showScrollbar?: DevExpress.common.ScrollbarMode;
  }
  /**
   * The Toast is a UI component that provides pop-up notifications.
   */
  export class dxToast extends dxOverlay<dxToastOptions> {}
  module dxToast {
    export type ContentReadyEvent = DevExpress.events.EventInfo<dxToast>;
    export type DisposingEvent = DevExpress.events.EventInfo<dxToast>;
    export type HiddenEvent = DevExpress.events.EventInfo<dxToast>;
    export type HidingEvent = DevExpress.events.Cancelable &
      DevExpress.events.EventInfo<dxToast>;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxToast>;
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxToast> &
      DevExpress.events.ChangedOptionInfo;
    export type Properties = dxToastOptions;
    export type ShowingEvent = DevExpress.events.Cancelable &
      DevExpress.events.EventInfo<dxToast>;
    export type ShownEvent = DevExpress.events.EventInfo<dxToast>;
    export type ToastType = 'custom' | 'error' | 'info' | 'success' | 'warning';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxToastAnimation extends dxOverlayAnimation {
    /**
     * An object that defines the animation properties used when the UI component is being hidden.
     */
    hide?: AnimationConfig;
    /**
     * An object that defines the animation properties used when the UI component is being shown.
     */
    show?: AnimationConfig;
  }
  /**
   * @deprecated use Properties instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxToastOptions extends dxOverlayOptions<dxToast> {
    /**
     * Configures UI component visibility animations. This object contains two fields: show and hide.
     */
    animation?: dxToastAnimation;
    /**
     * A Boolean value specifying whether or not the toast is closed if a user clicks it.
     */
    closeOnClick?: boolean;
    /**
     * Specifies whether to close the UI component if a user clicks outside it.
     * @deprecated 
     */
    closeOnOutsideClick?:
      | boolean
      | ((
          event: DevExpress.events.DxEvent<
            MouseEvent | PointerEvent | TouchEvent
          >
        ) => boolean);
    /**
     * A Boolean value specifying whether or not the toast is closed if a user swipes it out of the screen boundaries.
     */
    closeOnSwipe?: boolean;
    /**
     * The time span in milliseconds during which the Toast UI component is visible.
     */
    displayTime?: number;
    /**
     * 
     */
    hideOnOutsideClick?:
      | boolean
      | ((
          event: DevExpress.events.DxEvent<
            MouseEvent | PointerEvent | TouchEvent
          >
        ) => boolean);
    /**
     * Specifies the UI component&apos;s height in pixels.
     */
    height?: number | string | (() => number | string);
    /**
     * Specifies the maximum width the UI component can reach while resizing.
     */
    maxWidth?: number | string | (() => number | string);
    /**
     * The Toast message text.
     */
    message?: string;
    /**
     * Specifies the minimum width the UI component can reach while resizing.
     */
    minWidth?: number | string | (() => number | string);
    /**
     * Positions the UI component.
     */
    position?: PositionConfig | string;
    /**
     * Specifies whether to shade the background when the UI component is active.
     */
    shading?: boolean;
    /**
     * Specifies the Toast UI component type.
     */
    type?: DevExpress.ui.dxToast.ToastType;
    /**
     * Specifies the UI component&apos;s width in pixels.
     */
    width?: number | string | (() => number | string);
  }
  /**
   * The Toolbar is a UI component containing items that usually manage screen content. Those items can be plain text or UI components.
   */
  export class dxToolbar<
    TItem extends DevExpress.ui.dxToolbar.ItemLike = any,
    TKey = any
  > extends CollectionWidget<dxToolbarOptions<TItem, TKey>, TItem, TKey> {}
  module dxToolbar {
    export type ContentReadyEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxToolbar<TItem, TKey>>;
    export type DisposingEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxToolbar<TItem, TKey>>;
    export type ExplicitTypes<TItem extends ItemLike, TKey> = {
      Properties: Properties<TItem, TKey>;
      ContentReadyEvent: ContentReadyEvent<TItem, TKey>;
      DisposingEvent: DisposingEvent<TItem, TKey>;
      InitializedEvent: InitializedEvent<TItem, TKey>;
      ItemClickEvent: ItemClickEvent<TItem, TKey>;
      ItemContextMenuEvent: ItemContextMenuEvent<TItem, TKey>;
      ItemHoldEvent: ItemHoldEvent<TItem, TKey>;
      ItemRenderedEvent: ItemRenderedEvent<TItem, TKey>;
      OptionChangedEvent: OptionChangedEvent<TItem, TKey>;
    };
    export type InitializedEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.InitializedEventInfo<dxToolbar<TItem, TKey>>;
    export type ItemClickEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.NativeEventInfo<
      dxToolbar<TItem, TKey>,
      MouseEvent | PointerEvent
    > &
      DevExpress.events.ItemInfo<TItem>;
    export type ItemContextMenuEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.NativeEventInfo<
      dxToolbar<TItem, TKey>,
      MouseEvent | PointerEvent | TouchEvent
    > &
      DevExpress.events.ItemInfo<TItem>;
    export type ItemHoldEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.NativeEventInfo<
      dxToolbar<TItem, TKey>,
      MouseEvent | PointerEvent | TouchEvent
    > &
      DevExpress.events.ItemInfo<TItem>;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    type ItemLike = string | Item | any;
    export type ItemRenderedEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxToolbar<TItem, TKey>> &
      DevExpress.events.ItemInfo<TItem>;
    export type LocateInMenuMode = 'always' | 'auto' | 'never';
    export type OptionChangedEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxToolbar<TItem, TKey>> &
      DevExpress.events.ChangedOptionInfo;
    export type Properties<
      TItem extends ItemLike = any,
      TKey = any
    > = dxToolbarOptions<TItem, TKey>;
    export type ShowTextMode = 'always' | 'inMenu';
  }
  /**
   * @deprecated Use Item instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxToolbarItem extends CollectionWidgetItem {
    /**
     * Specifies a CSS class to be applied to the item.
     */
    cssClass?: string;
    /**
     * Specifies when to display an item in the toolbar&apos;s overflow menu.
     */
    locateInMenu?: DevExpress.ui.dxToolbar.LocateInMenuMode;
    /**
     * Specifies a location for the item on the toolbar.
     */
    location?: DevExpress.common.ToolbarItemLocation;
    /**
     * Specifies a template that should be used to render a menu item.
     */
    menuItemTemplate?:
      | DevExpress.core.template
      | (() => string | DevExpress.core.UserDefinedElement);
    /**
     * Configures the DevExtreme UI component used as a toolbar item.
     */
    options?: any;
    /**
     * Specifies when to display the text for the UI component item.
     */
    showText?: DevExpress.ui.dxToolbar.ShowTextMode;
    /**
     * A UI component that presents a toolbar item. To configure it, use the options object.
     */
    widget?: DevExpress.common.ToolbarItemComponent;
  }
  /**
   * @deprecated use Properties instead
   */
  export interface dxToolbarOptions<
    TItem extends DevExpress.ui.dxToolbar.ItemLike = any,
    TKey = any
  > extends CollectionWidgetOptions<dxToolbar<TItem, TKey>, TItem, TKey> {
    /**
     * Binds the UI component to data.
     */
    dataSource?: DevExpress.data.DataSource.DataSourceLike<TItem, TKey> | null;
    /**
     * An array of items displayed by the UI component.
     */
    items?: Array<TItem>;
    /**
     * Specifies a custom template for menu items.
     */
    menuItemTemplate?:
      | DevExpress.core.template
      | ((
          itemData: TItem,
          itemIndex: number,
          itemElement: DevExpress.core.DxElement
        ) => string | DevExpress.core.UserDefinedElement);
    /**
     * Specifies the UI component&apos;s height in pixels.
     * @deprecated 
     */
    height?: number | string | (() => number | string);
  }
  /**
   * The Tooltip UI component displays a tooltip for a specified element on the page.
   */
  export class dxTooltip extends dxPopover<dxTooltipOptions> {}
  module dxTooltip {
    export type ContentReadyEvent = DevExpress.events.EventInfo<dxTooltip>;
    export type DisposingEvent = DevExpress.events.EventInfo<dxTooltip>;
    export type HiddenEvent = DevExpress.events.EventInfo<dxTooltip>;
    export type HidingEvent = DevExpress.events.Cancelable &
      DevExpress.events.EventInfo<dxTooltip>;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxTooltip>;
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxTooltip> &
      DevExpress.events.ChangedOptionInfo;
    export type Properties = dxTooltipOptions;
    export type ShowingEvent = DevExpress.events.Cancelable &
      DevExpress.events.EventInfo<dxTooltip>;
    export type ShownEvent = DevExpress.events.EventInfo<dxTooltip>;
  }
  /**
   * @deprecated use Properties instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxTooltipOptions extends dxPopoverOptions<dxTooltip> {}
  /**
   * A base class for track bar UI components.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export class dxTrackBar<TProperties> extends Editor<TProperties> {}
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxTrackBarOptions<TComponent>
    extends EditorOptions<TComponent> {
    /**
     * The maximum value the UI component can accept.
     */
    max?: number;
    /**
     * The minimum value the UI component can accept.
     */
    min?: number;
  }
  /**
   * The TreeList is a UI component that represents data from a local or remote source in the form of a multi-column tree view. This UI component offers such features as sorting, filtering, editing, selection, etc.
   */
  export class dxTreeList<TRowData = any, TKey = any>
    extends Widget<dxTreeListOptions<TRowData, TKey>>
    implements GridBase<TRowData, TKey>
  {
    /**
     * Adds a new column.
     */
    addColumn(
      columnOptions: DevExpress.ui.dxTreeList.Column<TRowData, TKey> | string
    ): void;
    /**
     * Adds an empty data row to the highest hierarchical level and switches it to the editing state.
     */
    addRow(): DevExpress.core.utils.DxPromise<void>;
    /**
     * Adds an empty data row to a specified parent row.
     */
    addRow(parentId: TKey): DevExpress.core.utils.DxPromise<void>;
    /**
     * Collapses a row with a specific key.
     */
    collapseRow(key: TKey): DevExpress.core.utils.DxPromise<void>;
    /**
     * Expands a row with a specific key.
     */
    expandRow(key: TKey): DevExpress.core.utils.DxPromise<void>;
    /**
     * Performs a pre-order tree traversal, executing a function on each visited node. Starts traversing from the top level nodes.
     */
    forEachNode(callback: Function): void;
    /**
     * Performs a pre-order tree traversal, executing a function on each visited node. Starts traversing from the specified nodes.
     */
    forEachNode(
      nodes: Array<DevExpress.ui.dxTreeList.Node<TRowData, TKey>>,
      callback: Function
    ): void;
    /**
     * Gets a node with a specific key.
     */
    getNodeByKey(key: TKey): DevExpress.ui.dxTreeList.Node<TRowData, TKey>;
    /**
     * Gets the root node.
     */
    getRootNode(): DevExpress.ui.dxTreeList.Node<TRowData, TKey>;
    /**
     * Gets the keys of the rows selected explicitly via the API or via a click or tap.
     */
    getSelectedRowKeys(): Array<TKey>;
    /**
     * Gets the selected rows&apos; keys.
     */
    getSelectedRowKeys(mode: string): Array<TKey>;
    /**
     * Gets the data objects of the rows selected explicitly via the API or via a click or tap.
     */
    getSelectedRowsData(): Array<TRowData>;
    /**
     * Gets the selected rows&apos; data objects.
     */
    getSelectedRowsData(mode: string): Array<TRowData>;
    /**
     * Gets all visible columns.
     */
    getVisibleColumns(): Array<DevExpress.ui.dxTreeList.Column<TRowData, TKey>>;
    /**
     * Gets all visible columns at a specific hierarchical level of column headers. Use it to access banded columns.
     */
    getVisibleColumns(
      headerLevel: number
    ): Array<DevExpress.ui.dxTreeList.Column<TRowData, TKey>>;
    /**
     * Gets currently rendered rows.
     */
    getVisibleRows(): Array<DevExpress.ui.dxTreeList.Row<TRowData, TKey>>;
    /**
     * Checks whether a row is expanded or collapsed.
     */
    isRowExpanded(key: TKey): boolean;
    /**
     * Loads all root node descendants (all data items). Takes effect only if data has the plain structure and remoteOperations.filtering is true.
     */
    loadDescendants(): DevExpress.core.utils.DxPromise<void>;
    /**
     * Loads a specific node&apos;s descendants. Takes effect only if data has the plain structure and remoteOperations.filtering is true.
     */
    loadDescendants(keys: Array<TKey>): DevExpress.core.utils.DxPromise<void>;
    /**
     * Loads all or only direct descendants of specific nodes. Takes effect only if data has the plain structure and remoteOperations.filtering is true.
     */
    loadDescendants(
      keys: Array<TKey>,
      childrenOnly: boolean
    ): DevExpress.core.utils.DxPromise<void>;

    beginCustomLoading(messageText: string): void;
    byKey(key: TKey): DevExpress.core.utils.DxPromise<TRowData>;
    cancelEditData(): void;
    cellValue(rowIndex: number, dataField: string): any;
    cellValue(rowIndex: number, dataField: string, value: any): void;
    cellValue(rowIndex: number, visibleColumnIndex: number): any;
    cellValue(rowIndex: number, visibleColumnIndex: number, value: any): void;
    clearFilter(): void;
    clearFilter(filterName: string): void;
    clearSelection(): void;
    clearSorting(): void;
    closeEditCell(): void;
    collapseAdaptiveDetailRow(): void;
    columnCount(): number;
    columnOption(id: number | string): any;
    columnOption(id: number | string, optionName: string): any;
    columnOption(
      id: number | string,
      optionName: string,
      optionValue: any
    ): void;
    columnOption(id: number | string, options: any): void;
    deleteColumn(id: number | string): void;
    deleteRow(rowIndex: number): void;
    deselectAll(): DevExpress.core.utils.DxPromise<void>;
    deselectRows(
      keys: Array<TKey>
    ): DevExpress.core.utils.DxPromise<Array<TRowData>>;
    editCell(rowIndex: number, dataField: string): void;
    editCell(rowIndex: number, visibleColumnIndex: number): void;
    editRow(rowIndex: number): void;
    endCustomLoading(): void;
    expandAdaptiveDetailRow(key: TKey): void;
    filter(): any;
    filter(filterExpr: any): void;
    focus(): void;
    focus(element: DevExpress.core.UserDefinedElement): void;
    getCellElement(
      rowIndex: number,
      dataField: string
    ): DevExpress.core.DxElement | undefined;
    getCellElement(
      rowIndex: number,
      visibleColumnIndex: number
    ): DevExpress.core.DxElement | undefined;
    getCombinedFilter(): any;
    getCombinedFilter(returnDataField: boolean): any;
    getDataSource(): DevExpress.data.DataSource<TRowData, TKey>;
    getKeyByRowIndex(rowIndex: number): TKey | undefined;
    getRowElement(
      rowIndex: number
    ): DevExpress.core.UserDefinedElementsArray | undefined;
    getRowIndexByKey(key: TKey): number;
    getScrollable(): DevExpress.ui.dxTreeList.Scrollable;
    getVisibleColumnIndex(id: number | string): number;
    hasEditData(): boolean;
    hideColumnChooser(): void;
    isAdaptiveDetailRowExpanded(key: TKey): boolean;
    isRowFocused(key: TKey): boolean;
    isRowSelected(key: TKey): boolean;
    keyOf(obj: TRowData): TKey;
    navigateToRow(key: TKey): DevExpress.core.utils.DxPromise<void>;
    pageCount(): number;
    pageIndex(): number;
    pageIndex(newIndex: number): DevExpress.core.utils.DxPromise<void>;
    pageSize(): number;
    pageSize(value: number): void;
    refresh(): DevExpress.core.utils.DxPromise<void>;
    refresh(changesOnly: boolean): DevExpress.core.utils.DxPromise<void>;
    repaintRows(rowIndexes: Array<number>): void;
    saveEditData(): DevExpress.core.utils.DxPromise<void>;
    searchByText(text: string): void;
    selectAll(): DevExpress.core.utils.DxPromise<void>;
    selectRows(
      keys: Array<TKey>,
      preserve: boolean
    ): DevExpress.core.utils.DxPromise<Array<TRowData>>;
    selectRowsByIndexes(
      indexes: Array<number>
    ): DevExpress.core.utils.DxPromise<Array<TRowData>>;
    showColumnChooser(): void;
    state(): any;
    state(state: any): void;
    undeleteRow(rowIndex: number): void;
    updateDimensions(): void;
  }
  module dxTreeList {
    export type AdaptiveDetailRowPreparingEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxTreeList<TRowData, TKey>> &
      DevExpress.ui.dxDataGrid.AdaptiveDetailRowPreparingInfo;
    export type CellClickEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.NativeEventInfo<
      dxTreeList<TRowData, TKey>,
      PointerEvent | MouseEvent
    > &
      CellInfo<TRowData, TKey>;
    export type CellDblClickEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.NativeEventInfo<
      dxTreeList<TRowData, TKey>,
      PointerEvent | MouseEvent
    > &
      CellInfo<TRowData, TKey>;
    export type CellHoverChangedEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxTreeList<TRowData, TKey>> &
      CellInfo<TRowData, TKey> & {
        readonly eventType: string;
      };
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    interface CellInfo<TRowData = any, TKey = any> {
      readonly data: TRowData;
      readonly key: TKey;
      readonly value?: any;
      readonly displayValue?: any;
      readonly text: string;
      readonly columnIndex: number;
      readonly column: Column<TRowData, TKey>;
      readonly rowIndex: number;
      readonly rowType: string;
      readonly cellElement: DevExpress.core.DxElement;
      readonly row: Row<TRowData, TKey>;
    }
    export type CellPreparedEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxTreeList<TRowData, TKey>> &
      CellInfo<TRowData, TKey> & {
        readonly isSelected?: boolean;
        readonly isExpanded?: boolean;
        readonly isNewRow?: boolean;
        readonly watch?: Function;
        readonly oldValue?: any;
      };
    export type Column<TRowData = any, TKey = any> = dxTreeListColumn<
      TRowData,
      TKey
    >;
    export type ColumnButton<
      TRowData = any,
      TKey = any
    > = dxTreeListColumnButton<TRowData, TKey>;
    export type ColumnButtonClickEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.NativeEventInfo<
      dxTreeList<TRowData, TKey>,
      PointerEvent | MouseEvent
    > & {
      row?: Row<TRowData, TKey>;
      column?: Column<TRowData, TKey>;
    };
    export type ColumnButtonTemplateData<TRowData = any, TKey = any> = {
      readonly component: dxTreeList<TRowData, TKey>;
      readonly data: TRowData;
      readonly key: TKey;
      readonly columnIndex: number;
      readonly column: Column<TRowData, TKey>;
      readonly rowIndex: number;
      readonly rowType: string;
      readonly row: Row<TRowData, TKey>;
    };
    export type ColumnCellTemplateData<TRowData = any, TKey = any> = {
      readonly data: TRowData;
      readonly component: dxTreeList<TRowData, TKey>;
      readonly value?: any;
      readonly oldValue?: any;
      readonly displayValue?: any;
      readonly text: string;
      readonly columnIndex: number;
      readonly rowIndex: number;
      readonly column: Column<TRowData, TKey>;
      readonly row: Row<TRowData, TKey>;
      readonly rowType: string;
      readonly watch?: Function;
    };
    export type ColumnEditCellTemplateData<TRowData = any, TKey = any> = {
      readonly setValue?: any;
      readonly data: TRowData;
      readonly component: dxTreeList<TRowData, TKey>;
      readonly value?: any;
      readonly displayValue?: any;
      readonly text: string;
      readonly columnIndex: number;
      readonly rowIndex: number;
      readonly column: Column<TRowData, TKey>;
      readonly row: Row<TRowData, TKey>;
      readonly rowType: string;
      readonly watch?: Function;
    };
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export type ColumnHeaderCellTemplateData<TRowData = any, TKey = any> = {
      readonly component: dxTreeList<TRowData, TKey>;
      readonly columnIndex: number;
      readonly column: Column<TRowData, TKey>;
    };
    export type ContentReadyEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxTreeList<TRowData, TKey>>;
    export type ContextMenuPreparingEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxTreeList<TRowData, TKey>> & {
      items?: Array<any>;
      readonly target: string;
      readonly targetElement: DevExpress.core.DxElement;
      readonly columnIndex: number;
      readonly column?: Column<TRowData, TKey>;
      readonly rowIndex: number;
      readonly row?: Row<TRowData, TKey>;
    };
    export type DataErrorOccurredEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxTreeList<TRowData, TKey>> &
      DevExpress.ui.dxDataGrid.DataErrorOccurredInfo;
    export type DisposingEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxTreeList<TRowData, TKey>>;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export type dxTreeListToolbar = Toolbar;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export type dxTreeListToolbarItem = ToolbarItem;
    export type EditCanceledEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxTreeList<TRowData, TKey>> &
      DevExpress.ui.dxDataGrid.DataChangeInfo<TRowData, TKey>;
    export type EditCancelingEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.Cancelable &
      DevExpress.events.EventInfo<dxTreeList<TRowData, TKey>> &
      DevExpress.ui.dxDataGrid.DataChangeInfo<TRowData, TKey>;
    export interface Editing<TRowData = any, TKey = any>
      extends DevExpress.ui.dxDataGrid.EditingBase<TRowData, TKey> {
      /**
       * Specifies whether a user can add new rows. It is called for each data row when defined as a function.
       */
      allowAdding?:
        | boolean
        | ((options: {
            readonly component: dxTreeList<TRowData, TKey>;
            readonly row?: Row<TRowData, TKey>;
          }) => boolean);
      /**
       * Specifies whether a user can delete rows. It is called for each data row when defined as a function.
       */
      allowDeleting?:
        | boolean
        | ((options: {
            readonly component: dxTreeList<TRowData, TKey>;
            readonly row?: Row<TRowData, TKey>;
          }) => boolean);
      /**
       * Specifies whether a user can update rows. It is called for each data row when defined as a function
       */
      allowUpdating?:
        | boolean
        | ((options: {
            readonly component: dxTreeList<TRowData, TKey>;
            readonly row?: Row<TRowData, TKey>;
          }) => boolean);
      /**
       * Contains properties that specify texts for editing-related UI elements.
       */
      texts?: EditingTexts;
    }
    export type EditingStartEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.Cancelable &
      DevExpress.events.EventInfo<dxTreeList<TRowData, TKey>> & {
        readonly data: TRowData;
        readonly key: TKey;
        readonly column: Column<TRowData, TKey>;
      };
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export interface EditingTexts
      extends DevExpress.ui.dxDataGrid.EditingTextsBase {
      /**
       * Specifies text for the button that adds a new nested row. Applies if the editing.mode is &apos;batch&apos; or &apos;cell&apos;.
       */
      addRowToNode?: string;
    }
    export type EditorPreparedEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxTreeList<TRowData, TKey>> & {
      readonly parentType: string;
      readonly value?: any;
      readonly setValue?: any;
      readonly updateValueTimeout?: number;
      readonly width?: number;
      readonly disabled: boolean;
      readonly rtlEnabled: boolean;
      readonly editorElement: DevExpress.core.DxElement;
      readonly readOnly: boolean;
      readonly dataField?: string;
      readonly row?: Row<TRowData, TKey>;
    };
    export type EditorPreparingEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.Cancelable &
      DevExpress.events.EventInfo<dxTreeList<TRowData, TKey>> & {
        readonly parentType: string;
        readonly value?: any;
        readonly setValue?: any;
        updateValueTimeout?: number;
        readonly width?: number;
        readonly disabled: boolean;
        readonly rtlEnabled: boolean;
        readonly editorElement: DevExpress.core.DxElement;
        readonly readOnly: boolean;
        editorName: string;
        editorOptions: any;
        readonly dataField?: string;
        readonly row?: Row<TRowData, TKey>;
      };
    export type ExplicitTypes<TRowData, TKey> = {
      AdaptiveDetailRowPreparingEvent: AdaptiveDetailRowPreparingEvent<
        TRowData,
        TKey
      >;
      CellClickEvent: CellClickEvent<TRowData, TKey>;
      CellDblClickEvent: CellDblClickEvent<TRowData, TKey>;
      CellHoverChangedEvent: CellHoverChangedEvent<TRowData, TKey>;
      CellPreparedEvent: CellPreparedEvent<TRowData, TKey>;
      ColumnButtonClickEvent: ColumnButtonClickEvent<TRowData, TKey>;
      ColumnButtonTemplateData: ColumnButtonTemplateData<TRowData, TKey>;
      ColumnCellTemplateData: ColumnCellTemplateData<TRowData, TKey>;
      ColumnEditCellTemplateData: ColumnEditCellTemplateData<TRowData, TKey>;
      ContentReadyEvent: ContentReadyEvent<TRowData, TKey>;
      ContextMenuPreparingEvent: ContextMenuPreparingEvent<TRowData, TKey>;
      DataErrorOccurredEvent: DataErrorOccurredEvent<TRowData, TKey>;
      DisposingEvent: DisposingEvent<TRowData, TKey>;
      EditCanceledEvent: EditCanceledEvent<TRowData, TKey>;
      EditCancelingEvent: EditCancelingEvent<TRowData, TKey>;
      Editing: Editing<TRowData, TKey>;
      EditingStartEvent: EditingStartEvent<TRowData, TKey>;
      EditorPreparedEvent: EditorPreparedEvent<TRowData, TKey>;
      EditorPreparingEvent: EditorPreparingEvent<TRowData, TKey>;
      FocusedCellChangedEvent: FocusedCellChangedEvent<TRowData, TKey>;
      FocusedCellChangingEvent: FocusedCellChangingEvent<TRowData, TKey>;
      FocusedRowChangedEvent: FocusedRowChangedEvent<TRowData, TKey>;
      FocusedRowChangingEvent: FocusedRowChangingEvent<TRowData, TKey>;
      InitializedEvent: InitializedEvent<TRowData, TKey>;
      InitNewRowEvent: InitNewRowEvent<TRowData, TKey>;
      KeyDownEvent: KeyDownEvent<TRowData, TKey>;
      NodesInitializedEvent: NodesInitializedEvent<TRowData, TKey>;
      OptionChangedEvent: OptionChangedEvent<TRowData, TKey>;
      Properties: Properties<TRowData, TKey>;
      RowClickEvent: RowClickEvent<TRowData, TKey>;
      RowCollapsedEvent: RowCollapsedEvent<TRowData, TKey>;
      RowCollapsingEvent: RowCollapsingEvent<TRowData, TKey>;
      RowDblClickEvent: RowDblClickEvent<TRowData, TKey>;
      RowDraggingAddEvent: RowDraggingAddEvent<TRowData, TKey>;
      RowDraggingChangeEvent: RowDraggingChangeEvent<TRowData, TKey>;
      RowDraggingEndEvent: RowDraggingEndEvent<TRowData, TKey>;
      RowDraggingMoveEvent: RowDraggingMoveEvent<TRowData, TKey>;
      RowDraggingRemoveEvent: RowDraggingRemoveEvent<TRowData, TKey>;
      RowDraggingReorderEvent: RowDraggingReorderEvent<TRowData, TKey>;
      RowDraggingStartEvent: RowDraggingStartEvent<TRowData, TKey>;
      RowDraggingTemplateData: RowDraggingTemplateData<TRowData>;
      RowExpandedEvent: RowExpandedEvent<TRowData, TKey>;
      RowExpandingEvent: RowExpandingEvent<TRowData, TKey>;
      RowInsertedEvent: RowInsertedEvent<TRowData, TKey>;
      RowInsertingEvent: RowInsertingEvent<TRowData, TKey>;
      RowPreparedEvent: RowPreparedEvent<TRowData, TKey>;
      RowRemovedEvent: RowRemovedEvent<TRowData, TKey>;
      RowRemovingEvent: RowRemovingEvent<TRowData, TKey>;
      RowUpdatedEvent: RowUpdatedEvent<TRowData, TKey>;
      RowUpdatingEvent: RowUpdatingEvent<TRowData, TKey>;
      RowValidatingEvent: RowValidatingEvent<TRowData, TKey>;
      SavedEvent: SavedEvent<TRowData, TKey>;
      SavingEvent: SavingEvent<TRowData, TKey>;
      Scrolling: Scrolling;
      Selection: Selection;
      SelectionChangedEvent: SelectionChangedEvent<TRowData, TKey>;
      Toolbar: Toolbar;
      ToolbarItem: ToolbarItem;
      ToolbarPreparingEvent: ToolbarPreparingEvent<TRowData, TKey>;
    };
    export type FocusedCellChangedEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxTreeList<TRowData, TKey>> & {
      readonly cellElement: DevExpress.core.DxElement;
      readonly columnIndex: number;
      readonly rowIndex: number;
      readonly row: Row<TRowData, TKey>;
      readonly column: Column<TRowData, TKey>;
    };
    export type FocusedCellChangingEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.Cancelable &
      DevExpress.events.NativeEventInfo<
        dxTreeList<TRowData, TKey>,
        KeyboardEvent | PointerEvent | MouseEvent | TouchEvent
      > & {
        readonly cellElement: DevExpress.core.DxElement;
        readonly prevColumnIndex: number;
        readonly prevRowIndex: number;
        newColumnIndex: number;
        newRowIndex: number;
        readonly rows: Array<Row<TRowData, TKey>>;
        readonly columns: Array<Column<TRowData, TKey>>;
        isHighlighted: boolean;
      };
    export type FocusedRowChangedEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxTreeList<TRowData, TKey>> & {
      readonly rowElement: DevExpress.core.DxElement;
      readonly rowIndex: number;
      readonly row: Row<TRowData, TKey>;
    };
    export type FocusedRowChangingEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.Cancelable &
      DevExpress.events.NativeEventInfo<
        dxTreeList<TRowData, TKey>,
        KeyboardEvent | PointerEvent | MouseEvent | TouchEvent
      > & {
        readonly rowElement: DevExpress.core.DxElement;
        readonly prevRowIndex: number;
        newRowIndex: number;
        readonly rows: Array<Row<TRowData, TKey>>;
      };
    export type InitializedEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.InitializedEventInfo<dxTreeList<TRowData, TKey>>;
    export type InitNewRowEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxTreeList<TRowData, TKey>> &
      DevExpress.ui.dxDataGrid.NewRowInfo<TRowData>;
    export type KeyDownEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.NativeEventInfo<
      dxTreeList<TRowData, TKey>,
      KeyboardEvent
    > &
      DevExpress.ui.dxDataGrid.KeyDownInfo;
    /**
     * A TreeList node&apos;s structure.
     */
    export type Node<TRowData = any, TKey = any> = {
      /**
       * Contains all child nodes.
       */
      children?: Array<Node<TRowData, TKey>>;
      /**
       * The node&apos;s data object.
       */
      data?: TRowData;
      /**
       * Indicates whether the node has child nodes.
       */
      hasChildren?: boolean;
      /**
       * The node&apos;s key.
       */
      key: TKey;
      /**
       * The node&apos;s hierarchical level.
       */
      level: number;
      /**
       * The parent node.
       */
      parent?: Node<TRowData, TKey>;
      /**
       * Indicates whether the node is visualized as a row.
       */
      visible?: boolean;
    };
    export type NodesInitializedEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxTreeList<TRowData, TKey>> & {
      readonly root: Node<TRowData, TKey>;
    };
    export type OptionChangedEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxTreeList<TRowData, TKey>> &
      DevExpress.events.ChangedOptionInfo;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export interface Paging extends DevExpress.ui.dxDataGrid.PagingBase {
      /**
       * Enables paging.
       */
      enabled?: boolean;
    }
    export type Properties<TRowData = any, TKey = any> = dxTreeListOptions<
      TRowData,
      TKey
    >;
    /**
     * A grid row.
     */
    export type Row<TRowData = any, TKey = any> = {
      /**
       * Indicates whether the row is in the editing state.
       */
      readonly isEditing?: boolean;
      /**
       * Indicates whether the row is expanded or collapsed. Available if rowType is &apos;data&apos;.
       */
      readonly isExpanded?: boolean;
      /**
       * Indicates that the row is added, but not yet saved. Available if rowType is &apos;data&apos;.
       */
      readonly isNewRow?: boolean;
      /**
       * Indicates whether the row is selected. Available if rowType is &apos;data&apos; or &apos;detail&apos;.
       */
      readonly isSelected?: boolean;
      /**
       * The row&apos;s key. Available if rowType is &apos;data&apos;, &apos;detail&apos; or &apos;detailAdaptive&apos;.
       */
      readonly key: TKey;
      /**
       * The row&apos;s hierarchical level. Available if rowType is &apos;data&apos; or &apos;detail&apos;.
       */
      readonly level: number;
      /**
       * The row&apos;s node. Available if rowType is &apos;data&apos; or &apos;detail&apos;.
       */
      readonly node: Node<TRowData, TKey>;
      /**
       * The row&apos;s visible index. This index is zero-based and available if rowType is &apos;data&apos;, &apos;detail&apos; or &apos;detailAdaptive&apos;.
       */
      readonly rowIndex: number;
      /**
       * The row&apos;s type.
       */
      readonly rowType: string;
      /**
       * Values displayed in the row&apos;s cells.
       */
      readonly values: Array<any>;
      /**
       * A data object that the row visualizes.
       */
      readonly data: TRowData;
    };
    export type RowClickEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.NativeEventInfo<
      dxTreeList<TRowData, TKey>,
      PointerEvent | MouseEvent
    > & {
      readonly data: TRowData;
      readonly key: TKey;
      readonly values: Array<any>;
      readonly columns: Array<Column<TRowData, TKey>>;
      readonly rowIndex: number;
      readonly rowType: string;
      readonly isSelected?: boolean;
      readonly isExpanded?: boolean;
      readonly isNewRow?: boolean;
      readonly rowElement: DevExpress.core.DxElement;
      readonly handled: boolean;
      readonly node: Node<TRowData, TKey>;
      readonly level: number;
    };
    export type RowCollapsedEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxTreeList<TRowData, TKey>> &
      DevExpress.ui.dxDataGrid.RowKeyInfo<TKey>;
    export type RowCollapsingEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.Cancelable &
      DevExpress.events.EventInfo<dxTreeList<TRowData, TKey>> &
      DevExpress.ui.dxDataGrid.RowKeyInfo<TKey>;
    export type RowDblClickEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.NativeEventInfo<
      dxTreeList<TRowData, TKey>,
      PointerEvent | MouseEvent
    > & {
      readonly data: TRowData;
      readonly key: TKey;
      readonly values: Array<any>;
      readonly columns: Array<Column<TRowData, TKey>>;
      readonly rowIndex: number;
      readonly rowType: string;
      readonly isSelected?: boolean;
      readonly isExpanded?: boolean;
      readonly isNewRow?: boolean;
      readonly rowElement: DevExpress.core.DxElement;
    };
    export type RowDraggingAddEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.ui.dxDataGrid.RowDraggingEventInfo<
      dxTreeList<TRowData, TKey>,
      TRowData,
      TKey
    > &
      DevExpress.ui.dxDataGrid.DragDropInfo;
    export type RowDraggingChangeEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.Cancelable &
      DevExpress.ui.dxDataGrid.RowDraggingEventInfo<
        dxTreeList<TRowData, TKey>,
        TRowData,
        TKey
      > &
      DevExpress.ui.dxDataGrid.DragDropInfo;
    export type RowDraggingEndEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.Cancelable &
      DevExpress.ui.dxDataGrid.RowDraggingEventInfo<
        dxTreeList<TRowData, TKey>,
        TRowData,
        TKey
      > &
      DevExpress.ui.dxDataGrid.DragDropInfo;
    export type RowDraggingMoveEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.Cancelable &
      DevExpress.ui.dxDataGrid.RowDraggingEventInfo<
        dxTreeList<TRowData, TKey>,
        TRowData,
        TKey
      > &
      DevExpress.ui.dxDataGrid.DragDropInfo;
    export type RowDraggingRemoveEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.ui.dxDataGrid.RowDraggingEventInfo<
      dxTreeList<TRowData, TKey>,
      TRowData,
      TKey
    >;
    export type RowDraggingReorderEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.ui.dxDataGrid.RowDraggingEventInfo<
      dxTreeList<TRowData, TKey>,
      TRowData,
      TKey
    > &
      DevExpress.ui.dxDataGrid.DragReorderInfo;
    export type RowDraggingStartEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.Cancelable &
      DevExpress.ui.dxDataGrid.DragStartEventInfo<
        dxTreeList<TRowData, TKey>,
        TRowData,
        TKey
      >;
    export type RowDraggingTemplateData<TRowData = any> =
      DevExpress.ui.dxDataGrid.RowDraggingTemplateDataModel<TRowData>;
    export type RowExpandedEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxTreeList<TRowData, TKey>> &
      DevExpress.ui.dxDataGrid.RowKeyInfo<TKey>;
    export type RowExpandingEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.Cancelable &
      DevExpress.events.EventInfo<dxTreeList<TRowData, TKey>> &
      DevExpress.ui.dxDataGrid.RowKeyInfo<TKey>;
    export type RowInsertedEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxTreeList<TRowData, TKey>> &
      DevExpress.ui.dxDataGrid.RowInsertedInfo<TRowData, TKey>;
    export type RowInsertingEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxTreeList<TRowData, TKey>> &
      DevExpress.ui.dxDataGrid.RowInsertingInfo<TRowData>;
    export type RowPreparedEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxTreeList<TRowData, TKey>> & {
      readonly data: TRowData;
      readonly key: TKey;
      readonly values: Array<any>;
      readonly columns: Array<Column<TRowData, TKey>>;
      readonly rowIndex: number;
      readonly rowType: string;
      readonly isSelected?: boolean;
      readonly isExpanded?: boolean;
      readonly isNewRow?: boolean;
      readonly rowElement: DevExpress.core.DxElement;
      readonly node: Node<TRowData, TKey>;
      readonly level: number;
    };
    export type RowRemovedEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxTreeList<TRowData, TKey>> &
      DevExpress.ui.dxDataGrid.RowRemovedInfo<TRowData, TKey>;
    export type RowRemovingEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxTreeList<TRowData, TKey>> &
      DevExpress.ui.dxDataGrid.RowRemovingInfo<TRowData, TKey>;
    export type RowUpdatedEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxTreeList<TRowData, TKey>> &
      DevExpress.ui.dxDataGrid.RowUpdatedInfo<TRowData, TKey>;
    export type RowUpdatingEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxTreeList<TRowData, TKey>> &
      DevExpress.ui.dxDataGrid.RowUpdatingInfo<TRowData, TKey>;
    export type RowValidatingEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxTreeList<TRowData, TKey>> &
      DevExpress.ui.dxDataGrid.RowValidatingInfo<TRowData, TKey>;
    export type SavedEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxTreeList<TRowData, TKey>> &
      DevExpress.ui.dxDataGrid.DataChangeInfo<TRowData, TKey>;
    export type SavingEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxTreeList<TRowData, TKey>> &
      DevExpress.ui.dxDataGrid.SavingInfo<TRowData, TKey>;
    export type Scrollable = DevExpress.core.Skip<
      dxScrollable,
      | '_templateManager'
      | '_cancelOptionChange'
      | '_getTemplate'
      | '_invalidate'
      | '_refresh'
      | '_notifyOptionChanged'
      | '_createElement'
    >;
    export interface Scrolling extends DevExpress.ui.dxDataGrid.ScrollingBase {
      /**
       * Specifies the scrolling mode.
       */
      mode?: DevExpress.common.ScrollMode;
    }
    export interface Selection extends DevExpress.ui.dxDataGrid.SelectionBase {
      /**
       * Specifies whether selection is recursive.
       */
      recursive?: boolean;
    }
    export type SelectionChangedEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxTreeList<TRowData, TKey>> &
      DevExpress.ui.dxDataGrid.SelectionChangedInfo<TRowData, TKey>;
    export type ToolbarPreparingEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxTreeList<TRowData, TKey>> &
      DevExpress.ui.dxDataGrid.ToolbarPreparingInfo;
    export type TreeListCommandColumnType = 'adaptive' | 'buttons' | 'drag';
    export type TreeListFilterMode =
      | 'fullBranch'
      | 'withAncestors'
      | 'matchOnly';
    export type TreeListPredefinedColumnButton =
      | 'add'
      | 'cancel'
      | 'delete'
      | 'edit'
      | 'save'
      | 'undelete';
    export type TreeListPredefinedToolbarItem =
      | 'addRowButton'
      | 'applyFilterButton'
      | 'columnChooserButton'
      | 'revertButton'
      | 'saveButton'
      | 'searchPanel';
  }
  /**
   * @deprecated Use the DevExpress.ui.dxTreeList.Column type instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxTreeListColumn<TRowData = any, TKey = any>
    extends DevExpress.ui.dxDataGrid.ColumnBase<TRowData> {
    /**
     * Allows you to customize buttons in the edit column or create a custom command column. Applies only if the column&apos;s type is &apos;buttons&apos;.
     */
    buttons?: Array<
      | DevExpress.ui.dxTreeList.TreeListPredefinedColumnButton
      | DevExpress.ui.dxTreeList.ColumnButton<TRowData, TKey>
    >;
    /**
     * Specifies a custom template for data cells.
     */
    cellTemplate?:
      | DevExpress.core.template
      | ((
          cellElement: DevExpress.core.DxElement,
          cellInfo: DevExpress.ui.dxTreeList.ColumnCellTemplateData<
            TRowData,
            TKey
          >
        ) => any);
    /**
     * Configures columns.
     */
    columns?: Array<DevExpress.ui.dxTreeList.Column<TRowData, TKey> | string>;
    /**
     * Specifies a custom template for data cells in editing state.
     */
    editCellTemplate?:
      | DevExpress.core.template
      | ((
          cellElement: DevExpress.core.DxElement,
          cellInfo: DevExpress.ui.dxTreeList.ColumnEditCellTemplateData<
            TRowData,
            TKey
          >
        ) => any);
    /**
     * Specifies a custom template for column headers.
     */
    headerCellTemplate?:
      | DevExpress.core.template
      | ((
          columnHeader: DevExpress.core.DxElement,
          headerInfo: DevExpress.ui.dxTreeList.ColumnHeaderCellTemplateData<
            TRowData,
            TKey
          >
        ) => any);
    /**
     * Specifies the command column that this object customizes.
     */
    type?: DevExpress.ui.dxTreeList.TreeListCommandColumnType;
  }
  /**
   * @deprecated Use the TreeList's ColumnButton type instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxTreeListColumnButton<TRowData = any, TKey = any>
    extends DevExpress.ui.dxDataGrid.ColumnButtonBase {
    /**
     * The name used to identify a built-in button.
     */
    name?: DevExpress.ui.dxTreeList.TreeListPredefinedColumnButton | string;
    /**
     * A function that is executed when the button is clicked or tapped.
     */
    onClick?: (
      e: DevExpress.ui.dxTreeList.ColumnButtonClickEvent<TRowData, TKey>
    ) => void;
    /**
     * Specifies a custom button template.
     */
    template?:
      | DevExpress.core.template
      | ((
          cellElement: DevExpress.core.DxElement,
          cellInfo: DevExpress.ui.dxTreeList.ColumnButtonTemplateData<
            TRowData,
            TKey
          >
        ) => string | DevExpress.core.UserDefinedElement);
    /**
     * Specifies the button&apos;s visibility.
     */
    visible?:
      | boolean
      | ((options: {
          readonly component: dxTreeList<TRowData, TKey>;
          readonly row?: DevExpress.ui.dxTreeList.Row<TRowData, TKey>;
          readonly column: DevExpress.ui.dxTreeList.Column<TRowData, TKey>;
        }) => boolean);
    /**
     * Specifies whether the button is disabled.
     */
    disabled?:
      | boolean
      | ((options: {
          readonly component: dxTreeList<TRowData, TKey>;
          readonly row?: DevExpress.ui.dxTreeList.Row<TRowData, TKey>;
          readonly column: DevExpress.ui.dxTreeList.Column<TRowData, TKey>;
        }) => boolean);
  }
  /**
   * @deprecated Use DevExpress.ui.dxTreeList.Editing instead
   */
  export type dxTreeListEditing<
    TRowData = any,
    TKey = any
  > = DevExpress.ui.dxTreeList.Editing<TRowData, TKey>;
  /**
   * @deprecated 
   */
  export type dxTreeListEditingTexts = DevExpress.ui.dxTreeList.EditingTexts;
  /**
   * @deprecated Use DevExpress.ui.dxTreeList.Node instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export type dxTreeListNode<
    TRowData = any,
    TKey = any
  > = DevExpress.ui.dxTreeList.Node<TRowData, TKey>;
  /**
   * @deprecated use Properties instead
   */
  export interface dxTreeListOptions<TRowData = any, TKey = any>
    extends GridBaseOptions<dxTreeList<TRowData, TKey>, TRowData, TKey> {
    /**
     * Specifies whether all rows are expanded initially.
     */
    autoExpandAll?: boolean;
    /**
     * Configures columns.
     */
    columns?: Array<DevExpress.ui.dxTreeList.Column<TRowData, TKey> | string>;
    /**
     * Customizes columns after they are created.
     */
    customizeColumns?: (
      columns: Array<DevExpress.ui.dxTreeList.Column<TRowData, TKey>>
    ) => void;
    /**
     * Notifies the UI component of the used data structure.
     */
    dataStructure?: DevExpress.common.DataStructure;
    /**
     * Configures editing.
     */
    editing?: DevExpress.ui.dxTreeList.Editing<TRowData, TKey>;
    /**
     * Specifies whether nodes appear expanded or collapsed after filtering is applied.
     */
    expandNodesOnFiltering?: boolean;
    /**
     * Specifies keys of the initially expanded rows.
     */
    expandedRowKeys?: Array<TKey>;
    /**
     * Specifies whether filter and search results should include matching rows only, matching rows with ancestors, or matching rows with ancestors and descendants (full branch).
     */
    filterMode?: DevExpress.ui.dxTreeList.TreeListFilterMode;
    /**
     * Specifies which data field defines whether the node has children.
     */
    hasItemsExpr?: string | Function;
    /**
     * Specifies which data field contains nested items. Set this property when your data has a hierarchical structure.
     */
    itemsExpr?: string | Function;
    /**
     * Specifies the key property (or properties) that provide(s) key values to access data items. Each key value must be unique.
     */
    keyExpr?: string | Function;
    /**
     * A function that is executed when a cell is clicked or tapped. Executed before onRowClick.
     */
    onCellClick?: (
      e: DevExpress.ui.dxTreeList.CellClickEvent<TRowData, TKey>
    ) => void;
    /**
     * A function that is executed when a cell is double-clicked or double-tapped. Executed before onRowDblClick.
     */
    onCellDblClick?: (
      e: DevExpress.ui.dxTreeList.CellDblClickEvent<TRowData, TKey>
    ) => void;
    /**
     * A function that is executed after the pointer enters or leaves a cell.
     */
    onCellHoverChanged?: (
      e: DevExpress.ui.dxTreeList.CellHoverChangedEvent<TRowData, TKey>
    ) => void;
    /**
     * A function that is executed after a grid cell is created.
     */
    onCellPrepared?: (
      e: DevExpress.ui.dxTreeList.CellPreparedEvent<TRowData, TKey>
    ) => void;
    /**
     * A function that is executed before the context menu is rendered.
     */
    onContextMenuPreparing?: (
      e: DevExpress.ui.dxTreeList.ContextMenuPreparingEvent<TRowData, TKey>
    ) => void;
    /**
     * A function that is executed before a cell or row switches to the editing state.
     */
    onEditingStart?: (
      e: DevExpress.ui.dxTreeList.EditingStartEvent<TRowData, TKey>
    ) => void;
    /**
     * A function that is executed after an editor is created. Not executed for cells with an editCellTemplate.
     */
    onEditorPrepared?: (
      options: DevExpress.ui.dxTreeList.EditorPreparedEvent<TRowData, TKey>
    ) => void;
    /**
     * A function used to customize a cell&apos;s editor. Not executed for cells with an editCellTemplate.
     */
    onEditorPreparing?: (
      e: DevExpress.ui.dxTreeList.EditorPreparingEvent<TRowData, TKey>
    ) => void;
    /**
     * A function that is executed after the focused cell changes. Applies only to cells in data rows.
     */
    onFocusedCellChanged?: (
      e: DevExpress.ui.dxTreeList.FocusedCellChangedEvent<TRowData, TKey>
    ) => void;
    /**
     * A function that is executed before the focused cell changes. Applies only to cells in data rows.
     */
    onFocusedCellChanging?: (
      e: DevExpress.ui.dxTreeList.FocusedCellChangingEvent<TRowData, TKey>
    ) => void;
    /**
     * A function that executed when the focused row changes. Applies only to data rows. focusedRowEnabled should be true.
     */
    onFocusedRowChanged?: (
      e: DevExpress.ui.dxTreeList.FocusedRowChangedEvent<TRowData, TKey>
    ) => void;
    /**
     * A function that is executed before the focused row changes. Applies only to data rows. focusedRowEnabled should be true.
     */
    onFocusedRowChanging?: (
      e: DevExpress.ui.dxTreeList.FocusedRowChangingEvent<TRowData, TKey>
    ) => void;
    /**
     * A function that is executed after the loaded nodes are initialized.
     */
    onNodesInitialized?: (
      e: DevExpress.ui.dxTreeList.NodesInitializedEvent<TRowData, TKey>
    ) => void;
    /**
     * A function that is executed when a grid row is clicked or tapped.
     */
    onRowClick?: (
      e: DevExpress.ui.dxTreeList.RowClickEvent<TRowData, TKey>
    ) => void;
    /**
     * A function that is executed when a row is double-clicked or double-tapped. Executed after onCellDblClick.
     */
    onRowDblClick?: (
      e: DevExpress.ui.dxTreeList.RowDblClickEvent<TRowData, TKey>
    ) => void;
    /**
     * A function that is executed after a row is created.
     */
    onRowPrepared?: (
      e: DevExpress.ui.dxTreeList.RowPreparedEvent<TRowData, TKey>
    ) => void;
    /**
     * Configures paging.
     */
    paging?: DevExpress.ui.dxTreeList.Paging;
    /**
     * Specifies which data field provides parent keys.
     */
    parentIdExpr?: string | Function;
    /**
     * Notifies the TreeList of the server&apos;s data processing operations. Applies only if data has a plain structure.
     */
    remoteOperations?:
      | {
          /**
           * Specifies whether filtering should be performed on the server.
           */
          filtering?: boolean;
          /**
           * Specifies whether grouping should be performed on the server.
           */
          grouping?: boolean;
          /**
           * Specifies whether sorting should be performed on the server.
           */
          sorting?: boolean;
        }
      | DevExpress.common.Mode;
    /**
     * Specifies the root node&apos;s identifier. Applies if dataStructure is &apos;plain&apos;.
     */
    rootValue?: TKey;
    /**
     * Configures scrolling.
     */
    scrolling?: DevExpress.ui.dxTreeList.Scrolling;
    /**
     * Configures runtime selection.
     */
    selection?: DevExpress.ui.dxTreeList.Selection;
    /**
     * Configures the toolbar.
     */
    toolbar?: DevExpress.ui.dxTreeList.Toolbar;
  }
  /**
   * @deprecated 
   */
  export type dxTreeListPaging = DevExpress.ui.dxTreeList.Paging;
  /**
   * @deprecated Use DevExpress.ui.dxTreeList.Scrolling instead
   */
  export type dxTreeListScrolling = DevExpress.ui.dxTreeList.Scrolling;
  /**
   * @deprecated Use DevExpress.ui.dxTreeList.Selection instead
   */
  export type dxTreeListSelection = DevExpress.ui.dxTreeList.Selection;
  /**
   * The TreeView UI component is a tree-like representation of textual data.
   */
  export class dxTreeView<TKey = any> extends HierarchicalCollectionWidget<
    dxTreeViewOptions<TKey>,
    dxTreeViewItem,
    TKey
  > {
    /**
     * Collapses all items.
     */
    collapseAll(): void;
    /**
     * Collapses an item with a specific key.
     */
    collapseItem(
      itemData: DevExpress.ui.dxTreeView.Item
    ): DevExpress.core.utils.DxPromise<void>;
    /**
     * Collapses an item found using its DOM node.
     */
    collapseItem(itemElement: Element): DevExpress.core.utils.DxPromise<void>;
    /**
     * Collapses an item with a specific key.
     */
    collapseItem(key: TKey): DevExpress.core.utils.DxPromise<void>;
    /**
     * Expands all items. If you load items on demand, this method expands only the loaded items.
     */
    expandAll(): void;
    /**
     * Expands an item found using its data object.
     */
    expandItem(
      itemData: DevExpress.ui.dxTreeView.Item
    ): DevExpress.core.utils.DxPromise<void>;
    /**
     * Expands an item found using its DOM node.
     */
    expandItem(itemElement: Element): DevExpress.core.utils.DxPromise<void>;
    /**
     * Expands an item with a specific key.
     */
    expandItem(key: TKey): DevExpress.core.utils.DxPromise<void>;
    /**
     * Gets all nodes.
     */
    getNodes(): Array<DevExpress.ui.dxTreeView.Node<TKey>>;
    /**
     * Gets selected nodes.
     */
    getSelectedNodes(): Array<DevExpress.ui.dxTreeView.Node<TKey>>;
    /**
     * Gets the keys of selected nodes.
     */
    getSelectedNodeKeys(): Array<TKey>;
    /**
     * Selects all nodes.
     */
    selectAll(): void;
    /**
     * 
     */
    getScrollable(): DevExpress.ui.dxTreeView.Scrollable;
    /**
     * Selects a node found using its data object.
     */
    selectItem(itemData: DevExpress.ui.dxTreeView.Item): boolean;
    /**
     * Selects a TreeView node found using its DOM node.
     */
    selectItem(itemElement: Element): boolean;
    /**
     * Selects a node with a specific key.
     */
    selectItem(key: TKey): boolean;
    /**
     * Cancels the selection of all nodes.
     */
    unselectAll(): void;
    /**
     * Cancels the selection of a node found using its data object.
     */
    unselectItem(itemData: DevExpress.ui.dxTreeView.Item): boolean;
    /**
     * Cancels the selection of a TreeView node found using its DOM node.
     */
    unselectItem(itemElement: Element): boolean;
    /**
     * Cancels the selection of a node with a specific key.
     */
    unselectItem(key: TKey): boolean;
    /**
     * Updates the tree view scrollbars according to the current size of the UI component content.
     */
    updateDimensions(): DevExpress.core.utils.DxPromise<void>;
    /**
     * Scrolls the content to an item found using its data.
     */
    scrollToItem(
      itemData: DevExpress.ui.dxTreeView.Item
    ): DevExpress.core.utils.DxPromise<void>;
    /**
     * Scrolls the content to an item found using its DOM node.
     */
    scrollToItem(itemElement: Element): DevExpress.core.utils.DxPromise<void>;
    /**
     * Scrolls the content to an item found using its key.
     */
    scrollToItem(key: TKey): DevExpress.core.utils.DxPromise<void>;
  }
  module dxTreeView {
    export type ContentReadyEvent<TKey = any> = DevExpress.events.EventInfo<
      dxTreeView<TKey>
    >;
    export type DisposingEvent<TKey = any> = DevExpress.events.EventInfo<
      dxTreeView<TKey>
    >;
    export type ExplicitTypes<TKey = any> = {
      Properties: Properties<TKey>;
      Node: Node<TKey>;
      ContentReadyEvent: ContentReadyEvent<TKey>;
      DisposingEvent: DisposingEvent<TKey>;
      InitializedEvent: InitializedEvent<TKey>;
      ItemClickEvent: ItemClickEvent<TKey>;
      ItemCollapsedEvent: ItemCollapsedEvent<TKey>;
      ItemContextMenuEvent: ItemContextMenuEvent<TKey>;
      ItemExpandedEvent: ItemExpandedEvent<TKey>;
      ItemHoldEvent: ItemHoldEvent<TKey>;
      ItemRenderedEvent: ItemRenderedEvent<TKey>;
      ItemSelectionChangedEvent: ItemSelectionChangedEvent<TKey>;
      OptionChangedEvent: OptionChangedEvent<TKey>;
      SelectAllValueChangedEvent: SelectAllValueChangedEvent<TKey>;
      SelectionChangedEvent: SelectionChangedEvent<TKey>;
    };
    export type InitializedEvent<TKey = any> =
      DevExpress.events.InitializedEventInfo<dxTreeView<TKey>>;
    export type ItemClickEvent<TKey = any> = DevExpress.events.NativeEventInfo<
      dxTreeView<TKey>,
      KeyboardEvent | MouseEvent | PointerEvent
    > &
      ItemInfo<TKey>;
    export type ItemCollapsedEvent<TKey = any> =
      DevExpress.events.NativeEventInfo<
        dxTreeView<TKey>,
        MouseEvent | PointerEvent
      > &
        ItemInfo<TKey>;
    export type ItemContextMenuEvent<TKey = any> =
      DevExpress.events.NativeEventInfo<
        dxTreeView<TKey>,
        MouseEvent | PointerEvent | TouchEvent
      > &
        ItemInfo<TKey>;
    export type ItemExpandedEvent<TKey = any> =
      DevExpress.events.NativeEventInfo<
        dxTreeView<TKey>,
        MouseEvent | PointerEvent
      > &
        ItemInfo<TKey>;
    export type ItemHoldEvent<TKey = any> = DevExpress.events.NativeEventInfo<
      dxTreeView<TKey>,
      MouseEvent | PointerEvent | TouchEvent
    > &
      ItemInfo<TKey>;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    interface ItemInfo<TKey = any> {
      readonly itemData?: Item;
      readonly itemElement?: DevExpress.core.DxElement;
      readonly itemIndex?: number;
      readonly node?: Node<TKey>;
    }
    export type ItemRenderedEvent<TKey = any> = DevExpress.events.EventInfo<
      dxTreeView<TKey>
    > &
      ItemInfo<TKey>;
    export type ItemSelectionChangedEvent<TKey = any> =
      DevExpress.events.EventInfo<dxTreeView<TKey>> & ItemInfo<TKey>;
    export type Node<TKey = any> = dxTreeViewNode<TKey>;
    export type OptionChangedEvent<TKey = any> = DevExpress.events.EventInfo<
      dxTreeView<TKey>
    > &
      DevExpress.events.ChangedOptionInfo;
    export type Properties<TKey = any> = dxTreeViewOptions<TKey>;
    export type Scrollable = DevExpress.core.Skip<
      dxScrollable,
      | '_templateManager'
      | '_cancelOptionChange'
      | '_getTemplate'
      | '_invalidate'
      | '_refresh'
      | '_notifyOptionChanged'
      | '_createElement'
    >;
    export type SelectAllValueChangedEvent<TKey = any> =
      DevExpress.events.EventInfo<dxTreeView<TKey>> & {
        readonly value?: boolean | undefined;
      };
    export type SelectionChangedEvent<TKey = any> = DevExpress.events.EventInfo<
      dxTreeView<TKey>
    >;
    export type TreeViewCheckBoxMode = 'none' | 'normal' | 'selectAll';
    export type TreeViewExpandEvent = 'dblclick' | 'click';
  }
  /**
   * @deprecated Use Item instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxTreeViewItem extends CollectionWidgetItem {
    /**
     * Specifies whether or not the tree view item is displayed expanded.
     */
    expanded?: boolean;
    /**
     * Specifies whether or not the tree view item has children.
     */
    hasItems?: boolean;
    /**
     * Specifies the tree view item&apos;s icon.
     */
    icon?: string;
    /**
     * Specifies nested tree view items.
     */
    items?: Array<dxTreeViewItem>;
    /**
     * Holds the unique key of an item.
     */
    id?: number | string;
    /**
     * Holds the key of the parent item.
     */
    parentId?: number | string;
    /**
     * Specifies whether the TreeView item should be displayed as selected.
     */
    selected?: boolean;

    [key: string]: any;
  }
  /**
   * A TreeView node.
   * @deprecated Use Node instead.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxTreeViewNode<TKey = any> {
    /**
     * Contains all the child nodes of the current node.
     */
    children?: Array<dxTreeViewNode<TKey>>;
    /**
     * Equals to true if the node is disabled; otherwise false.
     */
    disabled?: boolean;
    /**
     * Equals true if the node is expanded; false if collapsed.
     */
    expanded?: boolean;
    /**
     * Contains the data source object corresponding to the node.
     */
    itemData?: DevExpress.ui.dxTreeView.Item;
    /**
     * Contains the key value of the node.
     */
    key?: TKey;
    /**
     * Refers to the parent node of the current node.
     */
    parent?: dxTreeViewNode<TKey>;
    /**
     * Equals to true if the node is selected; false if not.
     */
    selected?: boolean;
    /**
     * Contains the text displayed by the node.
     */
    text?: string;
  }
  /**
   * @deprecated use Properties instead
   */
  export interface dxTreeViewOptions<TKey = any>
    extends DevExpress.core.Skip<
        HierarchicalCollectionWidgetOptions<
          dxTreeView<TKey>,
          dxTreeViewItem,
          TKey
        >,
        'dataSource'
      >,
      SearchBoxMixinOptions {
    /**
     * Specifies whether or not to animate item collapsing and expanding.
     */
    animationEnabled?: boolean;
    /**
     * Allows you to load nodes on demand.
     */
    createChildren?: (
      parentNode: DevExpress.ui.dxTreeView.Node<TKey>
    ) => PromiseLike<any> | Array<any>;
    /**
     * Binds the UI component to data.
     */
    dataSource?: DevExpress.data.DataSource.DataSourceLike<
      DevExpress.ui.dxTreeView.Item,
      TKey
    > | null;
    /**
     * Notifies the UI component of the used data structure.
     */
    dataStructure?: DevExpress.common.DataStructure;
    /**
     * Specifies whether or not a user can expand all tree view items by the &apos;*&apos; hot key.
     */
    expandAllEnabled?: boolean;
    /**
     * Specifies the event on which to expand/collapse a node.
     */
    expandEvent?: DevExpress.ui.dxTreeView.TreeViewExpandEvent;
    /**
     * Specifies whether or not all parent nodes of an initially expanded node are displayed expanded.
     */
    expandNodesRecursive?: boolean;
    /**
     * Specifies which data source field specifies whether an item is expanded.
     */
    expandedExpr?: string | Function;
    /**
     * Specifies the name of the data source item field whose value defines whether or not the corresponding node includes child nodes.
     */
    hasItemsExpr?: string | Function;
    /**
     * An array of items displayed by the UI component.
     */
    items?: Array<DevExpress.ui.dxTreeView.Item>;
    /**
     * A function that is executed when a collection item is clicked or tapped.
     */
    onItemClick?: (e: DevExpress.ui.dxTreeView.ItemClickEvent<TKey>) => void;
    /**
     * A function that is executed when a tree view item is collapsed.
     */
    onItemCollapsed?: (
      e: DevExpress.ui.dxTreeView.ItemCollapsedEvent<TKey>
    ) => void;
    /**
     * A function that is executed when a collection item is right-clicked or pressed.
     */
    onItemContextMenu?: (
      e: DevExpress.ui.dxTreeView.ItemContextMenuEvent<TKey>
    ) => void;
    /**
     * A function that is executed when a tree view item is expanded.
     */
    onItemExpanded?: (
      e: DevExpress.ui.dxTreeView.ItemExpandedEvent<TKey>
    ) => void;
    /**
     * A function that is executed when a collection item has been held for a specified period.
     */
    onItemHold?: (e: DevExpress.ui.dxTreeView.ItemHoldEvent<TKey>) => void;
    /**
     * A function that is executed after a collection item is rendered.
     */
    onItemRendered?: (
      e: DevExpress.ui.dxTreeView.ItemRenderedEvent<TKey>
    ) => void;
    /**
     * A function that is executed when a single TreeView item is selected or selection is canceled.
     */
    onItemSelectionChanged?: (
      e: DevExpress.ui.dxTreeView.ItemSelectionChangedEvent<TKey>
    ) => void;
    /**
     * A function that is executed when the &apos;Select All&apos; check box value is changed. Applies only if showCheckBoxesMode is &apos;selectAll&apos; and selectionMode is &apos;multiple&apos;.
     */
    onSelectAllValueChanged?: (
      e: DevExpress.ui.dxTreeView.SelectAllValueChangedEvent<TKey>
    ) => void;
    /**
     * A function that is executed when a TreeView item is selected or selection is canceled.
     */
    onSelectionChanged?: (
      e: DevExpress.ui.dxTreeView.SelectionChangedEvent<TKey>
    ) => void;
    /**
     * Specifies the name of the data source item field for holding the parent key of the corresponding node.
     */
    parentIdExpr?: string | Function;
    /**
     * Specifies the parent ID value of the root item.
     */
    rootValue?: any;
    /**
     * A string value specifying available scrolling directions.
     */
    scrollDirection?: DevExpress.common.ScrollDirection;
    /**
     * Specifies the text displayed at the &apos;Select All&apos; check box.
     */
    selectAllText?: string;
    /**
     * Specifies whether an item becomes selected if a user clicks it.
     */
    selectByClick?: boolean;
    /**
     * Specifies whether all child nodes should be selected when their parent node is selected. Applies only if the selectionMode is &apos;multiple&apos;.
     */
    selectNodesRecursive?: boolean;
    /**
     * Specifies item selection mode. Applies only if selection is enabled.
     */
    selectionMode?: DevExpress.common.SingleOrMultiple;
    /**
     * Specifies the checkbox display mode.
     */
    showCheckBoxesMode?: DevExpress.ui.dxTreeView.TreeViewCheckBoxMode;
    /**
     * Enables the virtual mode in which nodes are loaded on demand. Use it to enhance the performance on large datasets.
     */
    virtualModeEnabled?: boolean;
    /**
     * Specifies whether or not the UI component uses native scrolling.
     */
    useNativeScrolling?: boolean;
  }
  /**
   * The ValidationGroup is a UI component that allows you to validate several editors simultaneously.
   */
  export class dxValidationGroup extends DOMComponent<dxValidationGroupOptions> {
    /**
     * Resets the value and validation result of the editors that are included to the current validation group.
     */
    reset(): void;
    /**
     * Validates rules of the validators that belong to the current validation group.
     */
    validate(): DevExpress.ui.dxValidationGroup.ValidationResult;
  }
  module dxValidationGroup {
    export type DisposingEvent = DevExpress.events.EventInfo<dxValidationGroup>;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxValidationGroup>;
    export type OptionChangedEvent =
      DevExpress.events.EventInfo<dxValidationGroup> &
        DevExpress.events.ChangedOptionInfo;
    export type Properties = dxValidationGroupOptions;
    export type ValidationResult = dxValidationGroupResult;
  }
  /**
   * @deprecated use Properties instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxValidationGroupOptions
    extends DOMComponentOptions<dxValidationGroup> {}
  /**
   * A group validation result.
   * @deprecated Use ValidationResult instead.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxValidationGroupResult {
    /**
     * An array of the validation rules that failed.
     */
    brokenRules?: Array<
      | RequiredRule
      | NumericRule
      | RangeRule
      | StringLengthRule
      | CustomRule
      | CompareRule
      | PatternRule
      | EmailRule
      | AsyncRule
    >;
    /**
     * A promise that is fulfilled when all async rules are validated.
     */
    complete?: DevExpress.core.utils.DxPromise<dxValidationGroupResult>;
    /**
     * Indicates whether all the rules checked for the group are satisfied.
     */
    isValid?: boolean;
    /**
     * Indicates the validation status.
     */
    status?: DevExpress.common.ValidationStatus;
    /**
     * Validator UI components included in the validated group.
     */
    validators?: Array<any>;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export class dxValidationMessage extends dxOverlay<dxValidationMessageOptions> {}
  module dxValidationMessage {
    export type Properties = dxValidationMessageOptions;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxValidationMessageOptions
    extends dxOverlayOptions<dxValidationMessage> {
    mode?: string;

    validationErrors?: Array<object> | null;

    positionRequest?: string;

    boundary?: String | DevExpress.core.UserDefinedElement;

    offset?: object;
  }
  /**
   * A UI component for displaying the result of checking validation rules for editors.
   */
  export class dxValidationSummary<
    TItem extends DevExpress.ui.CollectionWidget.ItemLike = any,
    TKey = any
  > extends CollectionWidget<
    dxValidationSummaryOptions<TItem, TKey>,
    TItem,
    TKey
  > {
    /**
     * 
     */
    refreshValidationGroup(): void;
  }
  module dxValidationSummary {
    export type ContentReadyEvent<
      TItem extends DevExpress.ui.CollectionWidget.ItemLike = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxValidationSummary<TItem, TKey>>;
    export type DisposingEvent<
      TItem extends DevExpress.ui.CollectionWidget.ItemLike = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxValidationSummary<TItem, TKey>>;
    export type ExplicitTypes<
      TItem extends DevExpress.ui.CollectionWidget.ItemLike,
      TKey
    > = {
      Properties: Properties<TItem, TKey>;
      ContentReadyEvent: ContentReadyEvent<TItem, TKey>;
      DisposingEvent: DisposingEvent<TItem, TKey>;
      InitializedEvent: InitializedEvent<TItem, TKey>;
      ItemClickEvent: ItemClickEvent<TItem, TKey>;
      OptionChangedEvent: OptionChangedEvent<TItem, TKey>;
    };
    export type InitializedEvent<
      TItem extends DevExpress.ui.CollectionWidget.ItemLike = any,
      TKey = any
    > = DevExpress.events.InitializedEventInfo<
      dxValidationSummary<TItem, TKey>
    >;
    export type ItemClickEvent<
      TItem extends DevExpress.ui.CollectionWidget.ItemLike = any,
      TKey = any
    > = DevExpress.events.NativeEventInfo<
      dxValidationSummary<TItem, TKey>,
      MouseEvent | PointerEvent
    > &
      DevExpress.events.ItemInfo<TItem>;
    export type OptionChangedEvent<
      TItem extends DevExpress.ui.CollectionWidget.ItemLike = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxValidationSummary<TItem, TKey>> &
      DevExpress.events.ChangedOptionInfo;
    export type Properties<
      TItem extends DevExpress.ui.CollectionWidget.ItemLike = any,
      TKey = any
    > = dxValidationSummaryOptions<TItem, TKey>;
  }
  /**
   * @deprecated use Properties instead
   */
  export interface dxValidationSummaryOptions<
    TItem extends DevExpress.ui.CollectionWidget.ItemLike = any,
    TKey = any
  > extends CollectionWidgetOptions<
      dxValidationSummary<TItem, TKey>,
      TItem,
      TKey
    > {
    /**
     * Specifies the validation group for which summary should be generated.
     */
    validationGroup?: string;
  }
  /**
   * A UI component that is used to validate the associated DevExtreme editors against the defined validation rules.
   */
  export class dxValidator extends DOMComponent<dxValidatorOptions> {
    /**
     * Sets focus to the editor associated with the current Validator object.
     */
    focus(): void;
    /**
     * Resets the value and validation result of the editor associated with the current Validator object.
     */
    reset(): void;
    /**
     * Validates the value of the editor that is controlled by the current Validator object against the list of the specified validation rules.
     */
    validate(): DevExpress.ui.dxValidator.ValidationResult;
  }
  module dxValidator {
    export type DisposingEvent = DevExpress.events.EventInfo<dxValidator>;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxValidator>;
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxValidator> &
      DevExpress.events.ChangedOptionInfo;
    export type Properties = dxValidatorOptions;
    export type ValidatedEvent = {
      name?: string;
      isValid?: boolean;
      value?: any;
      validationRules?: Array<ValidationRule>;
      brokenRule?: ValidationRule;
      brokenRules?: ValidationRule;
      status?: DevExpress.common.ValidationStatus;
    };
    export type ValidationResult = dxValidatorResult;
  }
  /**
   * @deprecated use Properties instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxValidatorOptions extends DOMComponentOptions<dxValidator> {
    /**
     * An object that specifies what and when to validate, and how to apply the validation result.
     */
    adapter?: {
      /**
       * A function that the Validator UI component calls after validating a specified value.
       */
      applyValidationResults?: Function;
      /**
       * A function that returns a Boolean value specifying whether or not to bypass validation.
       */
      bypass?: Function;
      /**
       * A function that sets focus to a validated editor when the corresponding ValidationSummary item is focused.
       */
      focus?: Function;
      /**
       * A function that returns the value to be validated.
       */
      getValue?: Function;
      /**
       * A function that resets the validated values.
       */
      reset?: Function;
      /**
       * Callbacks to be executed on the value validation.
       */
      validationRequestsCallbacks?: Array<Function>;
    };
    /**
     * Specifies the editor name to be used in the validation default messages.
     */
    name?: string;
    /**
     * A function that is executed after a value is validated.
     */
    onValidated?: (
      validatedInfo: DevExpress.ui.dxValidator.ValidatedEvent
    ) => void;
    /**
     * Specifies the validation group the editor will be related to.
     */
    validationGroup?: string;
    /**
     * An array of validation rules to be checked for the editor with which the dxValidator object is associated.
     */
    validationRules?: Array<ValidationRule>;
  }
  /**
   * A validation result.
   * @deprecated Use ValidationResult instead.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxValidatorResult {
    /**
     * A rule that failed to pass the check. Contains the first item from the brokenRules array.
     */
    brokenRule?: ValidationRule;
    /**
     * An array of the validationRules that failed to pass the check.
     */
    brokenRules?: Array<ValidationRule>;
    /**
     * A promise that is fulfilled when all async rules are validated.
     */
    complete?: DevExpress.core.utils.DxPromise<dxValidatorResult>;
    /**
     * Indicates whether all the checked rules are satisfied.
     */
    isValid?: boolean;
    /**
     * An array of async rules whose promises are not fulfilled or rejected. Contains items only when the status is &apos;pending&apos;.
     */
    pendingRules?: Array<AsyncRule>;
    /**
     * Indicates the validation status.
     */
    status?: DevExpress.common.ValidationStatus;
    /**
     * Validation rules specified for the Validator.
     */
    validationRules?: Array<ValidationRule>;
    /**
     * The value being validated.
     */
    value?: any;
  }
  /**
   * A base class for editors.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export class Editor<
    TProperties = DevExpress.ui.Editor.Properties
  > extends Widget<TProperties> {
    /**
     * Resets the value property to the default value.
     */
    reset(): void;
  }
  module Editor {
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    interface EditorInstance extends Editor<Properties> {}
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    type Properties = EditorOptions<EditorInstance>;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export interface ValueChangedInfo {
      readonly previousValue?: any;
      readonly value?: any;
    }
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface EditorOptions<TComponent> extends WidgetOptions<TComponent> {
    /**
     * Specifies or indicates whether the editor&apos;s value is valid.
     */
    isValid?: boolean;
    /**
     * A function that is executed after the UI component&apos;s value is changed.
     */
    onValueChanged?: (
      e: DevExpress.events.NativeEventInfo<TComponent, Event> &
        DevExpress.ui.Editor.ValueChangedInfo
    ) => void;
    /**
     * Specifies whether the editor is read-only.
     */
    readOnly?: boolean;
    /**
     * Information on the broken validation rule. Contains the first item from the validationErrors array.
     */
    validationError?: any;
    /**
     * An array of the validation rules that failed.
     */
    validationErrors?: Array<any>;
    /**
     * Specifies how the message about the validation rules that are not satisfied by this editor&apos;s value is displayed.
     */
    validationMessageMode?: DevExpress.common.ValidationMessageMode;
    /**
     * Indicates or specifies the current validation status.
     */
    validationStatus?: DevExpress.common.ValidationStatus;
    /**
     * Specifies the UI component&apos;s value.
     */
    value?: any;
    /**
     * 
     */
    stylingMode?: DevExpress.common.EditorStyle;
  }
  /**
   * A validation rule that demands that the validated field match the Email pattern.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface EmailRule {
    /**
     * If set to true, empty values are valid.
     */
    ignoreEmptyValue?: boolean;
    /**
     * Specifies the message that is shown if the rule is broken.
     */
    message?: string;
    /**
     * Specifies the rule type. Set it to &apos;email&apos; to use the EmailRule.
     */
    type: 'email';
  }
  /**
   * Formats values.
   */
  export type Format =
    | FormatObject
    | DevExpress.common.Format
    | string
    | ((value: number | Date) => string)
    | ((value: Date) => string)
    | ((value: number) => string)
    | ExternalFormat;
  /**
   * 
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface GridBase<TRowData = any, TKey = any> {
    /**
     * Shows the load panel.
     */
    beginCustomLoading(messageText: string): void;
    /**
     * Gets a data object with a specific key.
     */
    byKey(key: TKey): DevExpress.core.utils.DxPromise<TRowData>;
    /**
     * Discards changes that a user made to data.
     */
    cancelEditData(): void;
    /**
     * Gets the value of a cell with a specific row index and a data field, column caption or name.
     */
    cellValue(rowIndex: number, dataField: string): any;
    /**
     * Sets a new value to a cell with a specific row index and a data field, column caption or name.
     */
    cellValue(rowIndex: number, dataField: string, value: any): void;
    /**
     * Gets the value of a cell with specific row and column indexes.
     */
    cellValue(rowIndex: number, visibleColumnIndex: number): any;
    /**
     * Sets a new value to a cell with specific row and column indexes.
     */
    cellValue(rowIndex: number, visibleColumnIndex: number, value: any): void;
    /**
     * Clears all filters applied to UI component rows.
     */
    clearFilter(): void;
    /**
     * Clears all row filters of a specific type.
     */
    clearFilter(filterName: string): void;
    /**
     * Clears selection of all rows on all pages.
     */
    clearSelection(): void;
    /**
     * Clears sorting settings of all columns at once.
     */
    clearSorting(): void;
    /**
     * Switches the cell being edited back to the normal state. Takes effect only if editing.mode is batch or cell and showEditorAlways is false.
     */
    closeEditCell(): void;
    /**
     * Collapses the currently expanded adaptive detail row (if there is one).
     */
    collapseAdaptiveDetailRow(): void;
    /**
     * Gets the data column count. Includes visible and hidden columns, excludes command columns.
     */
    columnCount(): number;
    /**
     * Gets all properties of a column with a specific identifier.
     */
    columnOption(id: number | string): any;
    /**
     * Gets the value of a single column property.
     */
    columnOption(id: number | string, optionName: string): any;
    /**
     * Updates the value of a single column property.
     */
    columnOption(
      id: number | string,
      optionName: string,
      optionValue: any
    ): void;
    /**
     * Updates the values of several column properties.
     */
    columnOption(id: number | string, options: any): void;
    /**
     * Removes a column.
     */
    deleteColumn(id: number | string): void;
    /**
     * Removes a row with a specific index.
     */
    deleteRow(rowIndex: number): void;
    /**
     * Clears the selection of all rows on all pages or the currently rendered page only.
     */
    deselectAll(): DevExpress.core.utils.DxPromise<void>;
    /**
     * Cancels the selection of rows with specific keys.
     */
    deselectRows(keys: Array<any>): DevExpress.core.utils.DxPromise<any>;
    /**
     * Switches a cell with a specific row index and a data field to the editing state. Takes effect only if the editing mode is &apos;batch&apos; or &apos;cell&apos;.
     */
    editCell(rowIndex: number, dataField: string): void;
    /**
     * Switches a cell with specific row and column indexes to the editing state. Takes effect only if the editing mode is &apos;batch&apos; or &apos;cell&apos;.
     */
    editCell(rowIndex: number, visibleColumnIndex: number): void;
    /**
     * Switches a row with a specific index to the editing state. Takes effect only if the editing mode is &apos;row&apos;, &apos;popup&apos; or &apos;form&apos;.
     */
    editRow(rowIndex: number): void;
    /**
     * Hides the load panel.
     */
    endCustomLoading(): void;
    /**
     * Expands an adaptive detail row.
     */
    expandAdaptiveDetailRow(key: TKey): void;
    /**
     * Gets a filter expression applied to the UI component&apos;s data source using the filter(filterExpr) method and the DataSource&apos;s filter property.
     */
    filter(): any;
    /**
     * Applies a filter to the dataSource.
     */
    filter(filterExpr: any): void;
    focus(): void;
    /**
     * Sets focus on a specific cell.
     */
    focus(element: DevExpress.core.UserDefinedElement): void;
    /**
     * Gets a cell with a specific row index and a data field, column caption or name.
     */
    getCellElement(
      rowIndex: number,
      dataField: string
    ): DevExpress.core.DxElement | undefined;
    /**
     * Gets a cell with specific row and column indexes.
     */
    getCellElement(
      rowIndex: number,
      visibleColumnIndex: number
    ): DevExpress.core.DxElement | undefined;
    /**
     * Gets the total filter that combines all the filters applied.
     */
    getCombinedFilter(): any;
    /**
     * Gets the total filter that combines all the filters applied.
     */
    getCombinedFilter(returnDataField: boolean): any;
    getDataSource(): DevExpress.data.DataSource<TRowData, TKey>;
    /**
     * Gets the key of a row with a specific index.
     */
    getKeyByRowIndex(rowIndex: number): TKey | undefined;
    /**
     * Gets the container of a row with a specific index.
     */
    getRowElement(
      rowIndex: number
    ): DevExpress.core.UserDefinedElementsArray | undefined;
    /**
     * Gets the index of a row with a specific key.
     */
    getRowIndexByKey(key: TKey): number;
    /**
     * Gets the instance of the UI component&apos;s scrollable part.
     */
    getScrollable(): DevExpress.ui.dxDataGrid.Scrollable;
    /**
     * Gets the index of a visible column.
     */
    getVisibleColumnIndex(id: number | string): number;
    /**
     * Checks whether the UI component has unsaved changes.
     */
    hasEditData(): boolean;
    /**
     * Hides the column chooser.
     */
    hideColumnChooser(): void;
    /**
     * Checks whether an adaptive detail row is expanded or collapsed.
     */
    isAdaptiveDetailRowExpanded(key: TKey): boolean;
    /**
     * Checks whether a row with a specific key is focused.
     */
    isRowFocused(key: TKey): boolean;
    /**
     * Checks whether a row with a specific key is selected.
     */
    isRowSelected(key: TKey): boolean;
    /**
     * Gets a data object&apos;s key.
     */
    keyOf(obj: TRowData): TKey;
    /**
     * Navigates to a row with the specified key.
     */
    navigateToRow(key: TKey): DevExpress.core.utils.DxPromise<void>;
    /**
     * Gets the total page count.
     */
    pageCount(): number;
    /**
     * Gets the current page index.
     */
    pageIndex(): number;
    /**
     * Switches the UI component to a specific page using a zero-based index.
     */
    pageIndex(newIndex: number): DevExpress.core.utils.DxPromise<void>;
    /**
     * Gets the current page size.
     */
    pageSize(): number;
    /**
     * Sets the page size.
     */
    pageSize(value: number): void;
    /**
     * Reloads data and repaints data rows.
     */
    refresh(): DevExpress.core.utils.DxPromise<void>;
    /**
     * Reloads data and repaints all or only updated data rows.
     */
    refresh(changesOnly: boolean): DevExpress.core.utils.DxPromise<void>;
    /**
     * Repaints specific rows.
     */
    repaintRows(rowIndexes: Array<number>): void;
    /**
     * Saves changes that a user made to data.
     */
    saveEditData(): DevExpress.core.utils.DxPromise<void>;
    /**
     * Seeks a search string in the columns whose allowSearch property is true.
     */
    searchByText(text: string): void;
    /**
     * Selects all rows.
     */
    selectAll(): DevExpress.core.utils.DxPromise<void>;
    /**
     * Selects rows with specific keys.
     */
    selectRows(
      keys: Array<TKey>,
      preserve: boolean
    ): DevExpress.core.utils.DxPromise<Array<TRowData>>;
    /**
     * Selects rows with specific indexes.
     */
    selectRowsByIndexes(
      indexes: Array<number>
    ): DevExpress.core.utils.DxPromise<Array<TRowData>>;
    /**
     * Shows the column chooser.
     */
    showColumnChooser(): void;
    /**
     * Gets the current UI component state.
     */
    state(): any;
    /**
     * Sets the UI component state.
     */
    state(state: any): void;
    /**
     * Recovers a row deleted in batch editing mode.
     */
    undeleteRow(rowIndex: number): void;
    /**
     * Updates the UI component&apos;s content after resizing.
     */
    updateDimensions(): void;
  }
  /**
   * @deprecated 
   */
  export type GridBaseColumn<TRowData = any> =
    DevExpress.ui.dxDataGrid.ColumnBase<TRowData>;
  /**
   * @deprecated 
   */
  export type GridBaseColumnButton = DevExpress.ui.dxDataGrid.ColumnButtonBase;
  /**
   * @deprecated 
   */
  export type GridBaseEditing<
    TRowData = any,
    TKey = any
  > = DevExpress.ui.dxDataGrid.EditingBase<TRowData, TKey>;
  /**
   * @deprecated 
   */
  export type GridBaseEditingTexts = DevExpress.ui.dxDataGrid.EditingTextsBase;
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface GridBaseOptions<
    TComponent extends GridBase<TRowData, TKey>,
    TRowData = any,
    TKey = any
  > extends WidgetOptions<TComponent> {
    /**
     * Specifies whether a user can reorder columns.
     */
    allowColumnReordering?: boolean;
    /**
     * Specifies whether a user can resize columns.
     */
    allowColumnResizing?: boolean;
    /**
     * Automatically scrolls to the focused row when the focusedRowKey is changed.
     */
    autoNavigateToFocusedRow?: boolean;
    /**
     * Specifies whether data should be cached.
     */
    cacheEnabled?: boolean;
    /**
     * Enables a hint that appears when a user hovers the mouse pointer over a cell with truncated content.
     */
    cellHintEnabled?: boolean;
    /**
     * Specifies whether columns should adjust their widths to the content.
     */
    columnAutoWidth?: boolean;
    /**
     * Configures the column chooser.
     */
    columnChooser?: DevExpress.common.grids.ColumnChooser;
    /**
     * Configures column fixing.
     */
    columnFixing?: DevExpress.common.grids.ColumnFixing;
    /**
     * Specifies whether the UI component should hide columns to adapt to the screen or container size. Ignored if allowColumnResizing is true and columnResizingMode is &apos;widget&apos;.
     */
    columnHidingEnabled?: boolean;
    /**
     * Specifies the minimum width of columns.
     */
    columnMinWidth?: number;
    /**
     * Specifies how the UI component resizes columns. Applies only if allowColumnResizing is true.
     */
    columnResizingMode?: DevExpress.ui.dxDataGrid.ColumnResizeMode;
    /**
     * Specifies the width for all data columns. Has a lower priority than the column.width property.
     */
    columnWidth?: number | DevExpress.common.Mode;
    /**
     * Overridden.
     */
    columns?: Array<DevExpress.ui.dxDataGrid.ColumnBase<TRowData> | string>;
    /**
     * Binds the UI component to data.
     */
    dataSource?: DevExpress.data.DataSource.DataSourceLike<
      TRowData,
      TKey
    > | null;
    /**
     * Specifies the format in which date-time values should be sent to the server.
     */
    dateSerializationFormat?: string;
    /**
     * Overriden.
     */
    editing?: DevExpress.ui.dxDataGrid.EditingBase<TRowData, TKey>;
    /**
     * Indicates whether to show the error row.
     */
    errorRowEnabled?: boolean;
    /**
     * Configures the integrated filter builder.
     */
    filterBuilder?: dxFilterBuilderOptions;
    /**
     * Configures the popup in which the integrated filter builder is shown.
     */
    filterBuilderPopup?: DevExpress.ui.dxPopup.Properties;
    /**
     * Configures the filter panel.
     */
    filterPanel?: DevExpress.ui.dxDataGrid.FilterPanel<
      TComponent,
      TRowData,
      TKey
    >;
    /**
     * Configures the filter row.
     */
    filterRow?: DevExpress.common.grids.FilterRow;
    /**
     * Specifies whether to synchronize the filter row, header filter, and filter builder. The synchronized filter expression is stored in the filterValue property.
     */
    filterSyncEnabled?: boolean | DevExpress.common.Mode;
    /**
     * Specifies a filter expression.
     */
    filterValue?: string | Array<any> | Function;
    /**
     * The index of the column that contains the focused data cell. This index is taken from the columns array.
     */
    focusedColumnIndex?: number;
    /**
     * Specifies whether the focused row feature is enabled.
     */
    focusedRowEnabled?: boolean;
    /**
     * Specifies or indicates the focused data row&apos;s index.
     */
    focusedRowIndex?: number;
    /**
     * Specifies initially or currently focused grid row&apos;s key.
     */
    focusedRowKey?: TKey;
    /**
     * Configures the header filter feature.
     */
    headerFilter?: DevExpress.common.grids.HeaderFilter;
    /**
     * Specifies whether to highlight rows and cells with edited data. repaintChangesOnly should be true.
     */
    highlightChanges?: boolean;
    /**
     * Configures keyboard navigation.
     */
    keyboardNavigation?: DevExpress.common.grids.KeyboardNavigation;
    /**
     * Configures the load panel.
     */
    loadPanel?: DevExpress.common.grids.LoadPanel;
    /**
     * Specifies a text string shown when the widget does not display any data.
     */
    noDataText?: string;
    /**
     * A function that is executed before an adaptive detail row is rendered.
     */
    onAdaptiveDetailRowPreparing?: (
      e: DevExpress.events.EventInfo<TComponent> &
        DevExpress.ui.dxDataGrid.AdaptiveDetailRowPreparingInfo
    ) => void;
    /**
     * A function that is executed when an error occurs in the data source.
     */
    onDataErrorOccurred?: (
      e: DevExpress.events.EventInfo<TComponent> &
        DevExpress.ui.dxDataGrid.DataErrorOccurredInfo
    ) => void;
    /**
     * A function that is executed after row changes are discarded.
     */
    onEditCanceled?: (
      e: DevExpress.events.EventInfo<TComponent> &
        DevExpress.ui.dxDataGrid.DataChangeInfo<TRowData, TKey>
    ) => void;
    /**
     * A function that is executed when the edit operation is canceled, but row changes are not yet discarded.
     */
    onEditCanceling?: (
      e: DevExpress.events.Cancelable &
        DevExpress.events.EventInfo<TComponent> &
        DevExpress.ui.dxDataGrid.DataChangeInfo<TRowData, TKey>
    ) => void;
    /**
     * A function that is executed before a new row is added to the UI component.
     */
    onInitNewRow?: (
      e: DevExpress.events.EventInfo<TComponent> &
        DevExpress.ui.dxDataGrid.NewRowInfo<TRowData>
    ) => void;
    /**
     * A function that is executed when the UI component is in focus and a key has been pressed down.
     */
    onKeyDown?: (
      e: DevExpress.events.NativeEventInfo<TComponent, KeyboardEvent> &
        DevExpress.ui.dxDataGrid.KeyDownInfo
    ) => void;
    /**
     * A function that is executed after a row is collapsed.
     */
    onRowCollapsed?: (
      e: DevExpress.events.EventInfo<TComponent> &
        DevExpress.ui.dxDataGrid.RowKeyInfo<TKey>
    ) => void;
    /**
     * A function that is executed before a row is collapsed.
     */
    onRowCollapsing?: (
      e: DevExpress.events.Cancelable &
        DevExpress.events.EventInfo<TComponent> &
        DevExpress.ui.dxDataGrid.RowKeyInfo<TKey>
    ) => void;
    /**
     * A function that is executed after a row is expanded.
     */
    onRowExpanded?: (
      e: DevExpress.events.EventInfo<TComponent> &
        DevExpress.ui.dxDataGrid.RowKeyInfo<TKey>
    ) => void;
    /**
     * A function that is executed before a row is expanded.
     */
    onRowExpanding?: (
      e: DevExpress.events.Cancelable &
        DevExpress.events.EventInfo<TComponent> &
        DevExpress.ui.dxDataGrid.RowKeyInfo<TKey>
    ) => void;
    /**
     * A function that is executed after a new row has been inserted into the data source.
     */
    onRowInserted?: (
      e: DevExpress.events.EventInfo<TComponent> &
        DevExpress.ui.dxDataGrid.RowInsertedInfo<TRowData, TKey>
    ) => void;
    /**
     * A function that is executed before a new row is inserted into the data source.
     */
    onRowInserting?: (
      e: DevExpress.events.EventInfo<TComponent> &
        DevExpress.ui.dxDataGrid.RowInsertingInfo<TRowData>
    ) => void;
    /**
     * A function that is executed after a row has been removed from the data source.
     */
    onRowRemoved?: (
      e: DevExpress.events.EventInfo<TComponent> &
        DevExpress.ui.dxDataGrid.RowRemovedInfo<TRowData, TKey>
    ) => void;
    /**
     * A function that is executed before a row is removed from the data source.
     */
    onRowRemoving?: (
      e: DevExpress.events.EventInfo<TComponent> &
        DevExpress.ui.dxDataGrid.RowRemovingInfo<TRowData, TKey>
    ) => void;
    /**
     * A function that is executed after a row has been updated in the data source.
     */
    onRowUpdated?: (
      e: DevExpress.events.EventInfo<TComponent> &
        DevExpress.ui.dxDataGrid.RowUpdatedInfo<TRowData, TKey>
    ) => void;
    /**
     * A function that is executed before a row is updated in the data source.
     */
    onRowUpdating?: (
      e: DevExpress.events.EventInfo<TComponent> &
        DevExpress.ui.dxDataGrid.RowUpdatingInfo<TRowData, TKey>
    ) => void;
    /**
     * A function that is executed after cells in a row are validated against validation rules.
     */
    onRowValidating?: (
      e: DevExpress.events.EventInfo<TComponent> &
        DevExpress.ui.dxDataGrid.RowValidatingInfo<TRowData, TKey>
    ) => void;
    /**
     * A function that is executed after row changes are saved.
     */
    onSaved?: (
      e: DevExpress.events.EventInfo<TComponent> &
        DevExpress.ui.dxDataGrid.DataChangeInfo<TRowData, TKey>
    ) => void;
    /**
     * A function that is executed before pending row changes are saved.
     */
    onSaving?: (
      e: DevExpress.events.EventInfo<TComponent> &
        DevExpress.ui.dxDataGrid.SavingInfo<TRowData, TKey>
    ) => void;
    /**
     * A function that is executed after selecting a row or clearing its selection.
     */
    onSelectionChanged?: (
      e: DevExpress.events.EventInfo<TComponent> &
        DevExpress.ui.dxDataGrid.SelectionChangedInfo<TRowData, TKey>
    ) => void;
    /**
     * A function that is executed before the toolbar is created.
     */
    onToolbarPreparing?: (
      e: DevExpress.events.EventInfo<TComponent> &
        DevExpress.ui.dxDataGrid.ToolbarPreparingInfo
    ) => void;
    /**
     * Configures the pager.
     */
    pager?: DevExpress.common.grids.Pager;
    /**
     * Configures paging.
     */
    paging?: DevExpress.ui.dxDataGrid.PagingBase;
    /**
     * Specifies whether to render the filter row, command columns, and columns with showEditorAlways set to true after other elements.
     */
    renderAsync?: boolean;
    /**
     * Specifies whether to repaint only those cells whose data changed.
     */
    repaintChangesOnly?: boolean;
    /**
     * Specifies whether rows should be shaded differently.
     */
    rowAlternationEnabled?: boolean;
    /**
     * Configures row reordering using drag and drop gestures.
     */
    rowDragging?: DevExpress.ui.dxDataGrid.RowDragging<
      TComponent,
      TRowData,
      TKey
    >;
    /**
     * 
     */
    scrolling?: DevExpress.ui.dxDataGrid.ScrollingBase;
    /**
     * Configures the search panel.
     */
    searchPanel?: DevExpress.common.grids.SearchPanel;
    /**
     * Allows you to select rows or determine which rows are selected.
     */
    selectedRowKeys?: Array<TKey>;
    /**
     * 
     */
    selection?: DevExpress.ui.dxDataGrid.SelectionBase;
    /**
     * Specifies whether the outer borders of the UI component are visible.
     */
    showBorders?: boolean;
    /**
     * Specifies whether column headers are visible.
     */
    showColumnHeaders?: boolean;
    /**
     * Specifies whether vertical lines that separate one column from another are visible.
     */
    showColumnLines?: boolean;
    /**
     * Specifies whether horizontal lines that separate one row from another are visible.
     */
    showRowLines?: boolean;
    /**
     * Configures runtime sorting.
     */
    sorting?: DevExpress.common.grids.Sorting;
    /**
     * Configures state storing.
     */
    stateStoring?: DevExpress.common.grids.StateStoring;
    /**
     * Specifies whether to enable two-way data binding.
     */
    twoWayBindingEnabled?: boolean;
    /**
     * Specifies whether text that does not fit into a column should be wrapped.
     */
    wordWrapEnabled?: boolean;
    /**
     * 
     */
    syncLookupFilterValues?: boolean;
  }
  /**
   * @deprecated 
   */
  export type GridBasePaging = DevExpress.ui.dxDataGrid.PagingBase;
  /**
   * @deprecated 
   */
  export type GridBaseScrolling = DevExpress.ui.dxDataGrid.ScrollingBase;
  /**
   * @deprecated 
   */
  export type GridBaseSelection = DevExpress.ui.dxDataGrid.SelectionBase;
  /**
   * 
   */
  export function hideToasts(): void;
  /**
   * 
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export class HierarchicalCollectionWidget<
    TProperties extends HierarchicalCollectionWidgetOptions<any, TItem, TKey>,
    TItem extends DevExpress.ui.CollectionWidget.ItemLike = any,
    TKey = any
  > extends CollectionWidget<TProperties, TItem, TKey> {}
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface HierarchicalCollectionWidgetOptions<
    TComponent extends HierarchicalCollectionWidget<any, TItem, TKey>,
    TItem extends DevExpress.ui.CollectionWidget.ItemLike = any,
    TKey = any
  > extends CollectionWidgetOptions<TComponent, TItem, TKey> {
    /**
     * Specifies the name of the data source item field whose value defines whether or not the corresponding UI component item is disabled.
     */
    disabledExpr?: string | Function;
    /**
     * Specifies the data field whose values should be displayed.
     */
    displayExpr?: string | ((item: TItem) => string);
    /**
     * Specifies whether the UI component can be focused using keyboard navigation.
     */
    focusStateEnabled?: boolean;
    /**
     * Specifies whether the UI component changes its state when a user pauses on it.
     */
    hoverStateEnabled?: boolean;
    /**
     * Specifies which data field contains nested items.
     */
    itemsExpr?: string | Function;
    /**
     * Specifies which data field provides keys for TreeView items.
     */
    keyExpr?: string | Function;
    /**
     * Specifies the name of the data source item field whose value defines whether or not the corresponding UI component items is selected.
     */
    selectedExpr?: string | Function;
  }
  export interface MapLocation {
    /**
     * The latitude location of the UI component.
     */
    lat: number;
    /**
     * The longitude location of the UI component.
     */
    lng: number;
  }
  /**
   * Creates a toast message.
   */
  export function notify(
    message: string,
    type?: string,
    displayTime?: number
  ): void;
  /**
   * Creates a toast message.
   */
  export function notify(
    options: any,
    type?: string,
    displayTime?: number
  ): void;
  /**
   * 
   */
  export function notify(message: string, stack?: Stack): void;
  /**
   * 
   */
  export function notify(options: any, stack?: Stack): void;
  /**
   * A validation rule that demands that the validated field has a numeric value.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface NumericRule {
    /**
     * If set to true, empty values are valid.
     */
    ignoreEmptyValue?: boolean;
    /**
     * Specifies the message that is shown if the rule is broken.
     */
    message?: string;
    /**
     * Specifies the rule type. Set it to &apos;numeric&apos; to use the NumericRule.
     */
    type: 'numeric';
  }
  /**
   * A validation rule that demands that the validated field match a specified pattern.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface PatternRule {
    /**
     * If set to true, empty values are valid.
     */
    ignoreEmptyValue?: boolean;
    /**
     * Specifies the message that is shown if the rule is broken.
     */
    message?: string;
    /**
     * Specifies the regular expression that the validated value must match.
     */
    pattern?: RegExp | string;
    /**
     * Specifies the rule type. Set it to &apos;pattern&apos; to use the PatternRule.
     */
    type: 'pattern';
  }
  /**
   * A validation rule that demands the target value be within the specified value range (including the range&apos;s end points).
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface RangeRule {
    /**
     * If set to true, empty values are valid.
     */
    ignoreEmptyValue?: boolean;
    /**
     * Specifies the maximum value allowed for the validated value.
     */
    max?: Date | number;
    /**
     * Specifies the message that is shown if the rule is broken.
     */
    message?: string;
    /**
     * Specifies the minimum value allowed for the validated value.
     */
    min?: Date | number;
    /**
     * Indicates whether the rule should be always checked for the target value or only when the target value changes.
     */
    reevaluate?: boolean;
    /**
     * Specifies the rule type. Set it to &apos;range&apos; to use the RangeRule.
     */
    type: 'range';
  }
  /**
   * Repaints the Floating Action Button.
   */
  export function repaintFloatingActionButton(): void;
  /**
   * A validation rule that demands that a validated field has a value.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface RequiredRule {
    /**
     * Specifies the message that is shown if the rule is broken.
     */
    message?: string;
    /**
     * Indicates whether to remove the Space characters from the validated value.
     */
    trim?: boolean;
    /**
     * Specifies the rule type. Set it to &apos;required&apos; to use the RequiredRule.
     */
    type: 'required';
  }
  /**
   * 
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export class SearchBoxMixin {
    constructor(options?: SearchBoxMixinOptions);
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface SearchBoxMixinOptions {
    /**
     * Configures the search panel.
     */
    searchEditorOptions?: DevExpress.ui.dxTextBox.Properties;
    /**
     * Specifies whether the search panel is visible.
     */
    searchEnabled?: boolean;
    /**
     * Specifies a data object&apos;s field name or an expression whose value is compared to the search string.
     */
    searchExpr?: string | Function | Array<string | Function>;
    /**
     * Specifies a comparison operation used to search UI component items.
     */
    searchMode?: DevExpress.common.SearchMode;
    /**
     * Specifies a delay in milliseconds between when a user finishes typing, and the search is executed.
     */
    searchTimeout?: number;
    /**
     * Specifies the current search string.
     */
    searchValue?: string;
  }
  interface Stack {
    /**
     * 
     */
    position?:
      | 'top left'
      | 'top right'
      | 'bottom left'
      | 'bottom right'
      | 'top center'
      | 'bottom center'
      | 'left center'
      | 'right center'
      | 'center'
      | {
          /**
           * 
           */
          top?: number;
          /**
           * 
           */
          left?: number;
          /**
           * 
           */
          bottom?: number;
          /**
           * 
           */
          right?: number;
        };
    /**
     * 
     */
    direction?:
      | 'down-push'
      | 'up-push'
      | 'left-push'
      | 'right-push'
      | 'down-stack'
      | 'up-stack'
      | 'left-stack'
      | 'right-stack';
  }
  /**
   * A validation rule that demands the target value length be within the specified value range (including the range&apos;s end points).
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface StringLengthRule {
    /**
     * If set to true, empty values are valid.
     */
    ignoreEmptyValue?: boolean;
    /**
     * Specifies the maximum length allowed for the validated value.
     */
    max?: number;
    /**
     * Specifies the message that is shown if the rule is broken.
     */
    message?: string;
    /**
     * Specifies the minimum length allowed for the validated value.
     */
    min?: number;
    /**
     * Indicates whether or not to remove the Space characters from the validated value.
     */
    trim?: boolean;
    /**
     * Specifies the rule type. Set it to &apos;stringLength&apos; to use the StringLengthRule.
     */
    type: 'stringLength';
  }
  /**
   * 
   * @deprecated 
   */
  export type Template = DevExpress.core.template;
  /**
   * An object that serves as a namespace for the methods that work with DevExtreme CSS Themes.
   */
  export class themes {
    /**
     * Gets the current theme&apos;s name.
     */
    static current(): string;
    /**
     * Sets a theme with a specific name.
     */
    static current(themeName: string): void;
    /**
     * Specifies a function to be executed each time a theme is switched.
     */
    static ready(callback: Function): void;
    /**
     * Specifies a function to be executed after a theme is loaded.
     */
    static initialized(callback: Function): void;
    static isMaterial(theme: string): boolean;
  }
  export interface ValidationCallbackData {
    value?: any;
    rule: any;
    validator: any;
    data?: any;
    column?: any;
    formItem?: any;
  }
  export type ValidationRule =
    | AsyncRule
    | CompareRule
    | CustomRule
    | EmailRule
    | NumericRule
    | PatternRule
    | RangeRule
    | RequiredRule
    | StringLengthRule;
  export type ValidationRuleType =
    | 'required'
    | 'numeric'
    | 'range'
    | 'stringLength'
    | 'custom'
    | 'compare'
    | 'pattern'
    | 'email'
    | 'async';
  /**
   * The base class for UI components.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export class Widget<TProperties> extends DOMComponent<TProperties> {
    /**
     * Sets focus on the UI component.
     */
    focus(): void;
    /**
     * Registers a handler to be executed when a user presses a specific key.
     */
    registerKeyHandler(key: string, handler: Function): void;
    /**
     * Repaints the UI component without reloading data. Call it to update the UI component&apos;s markup.
     */
    repaint(): void;
  }
  module Widget {
    /**
     * 
     * @deprecated 
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export type format = Format;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface WidgetOptions<TComponent>
    extends DOMComponentOptions<TComponent> {
    /**
     * Specifies the shortcut key that sets focus on the UI component.
     */
    accessKey?: string;
    /**
     * Specifies whether or not the UI component changes its state when interacting with a user.
     */
    activeStateEnabled?: boolean;
    /**
     * Specifies whether the UI component responds to user interaction.
     */
    disabled?: boolean;
    /**
     * Specifies whether the UI component can be focused using keyboard navigation.
     */
    focusStateEnabled?: boolean;
    /**
     * Specifies text for a hint that appears when a user pauses on the UI component.
     */
    hint?: string;
    /**
     * Specifies whether the UI component changes its state when a user pauses on it.
     */
    hoverStateEnabled?: boolean;
    /**
     * A function that is executed when the UI component&apos;s content is ready and each time the content is changed.
     */
    onContentReady?: (e: DevExpress.events.EventInfo<TComponent>) => void;
    /**
     * Specifies the number of the element when the Tab key is used for navigating.
     */
    tabIndex?: number;
    /**
     * Specifies whether the UI component is visible.
     */
    visible?: boolean;
  }
}
declare module DevExpress.ui.dialog {
  /**
   * Displays an alert dialog with a message and OK button.
   */
  export function alert(
    messageHtml: string,
    title: string
  ): DevExpress.core.utils.DxPromise<void>;
  /**
   * Creates a confirmation dialog with a message and Yes and No buttons.
   */
  export function confirm(
    messageHtml: string,
    title: string
  ): DevExpress.core.utils.DxPromise<boolean>;
  /**
   * Creates a dialog with custom buttons.
   */
  export function custom(options: CustomDialogOptions): any;
}
declare module DevExpress.ui.dxAccordion {
  export type Item = dxAccordionItem;
}
declare module DevExpress.ui.dxActionSheet {
  export type Item<TKey = any> = dxActionSheetItem<TKey>;
}
declare module DevExpress.ui.dxBox {
  export type Item<TKey = any> = dxBoxItem<TKey>;
}
declare module DevExpress.ui.dxButtonGroup {
  export type Item = dxButtonGroupItem;
}
declare module DevExpress.ui.dxContextMenu {
  export type Item = dxContextMenuItem;
}
declare module DevExpress.ui.dxDataGrid {
  /**
   * Configures the toolbar.
   */
  export type Toolbar = {
    /**
     * Configures toolbar items.
     */
    items?: Array<DataGridPredefinedToolbarItem | ToolbarItem>;
    /**
     * Specifies whether the toolbar is visible.
     */
    visible?: boolean;
    /**
     * Specifies whether the toolbar responds to user interaction.
     */
    disabled?: boolean;
  };
  /**
   * Configures toolbar items.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface ToolbarItem extends dxToolbarItem {
    /**
     * A name used to identify the toolbar item.
     */
    name?: DataGridPredefinedToolbarItem | string;
    /**
     * Specifies a location for the item on the toolbar.
     */
    location?: DevExpress.common.ToolbarItemLocation;
  }
}
declare module DevExpress.ui.dxDiagram {
  export type Item = dxDiagramItem;
}
declare module DevExpress.ui.dxDropDownButton {
  export type Item = dxDropDownButtonItem;
}
declare module DevExpress.ui.dxFileManager {
  export type ContextMenuItem = dxFileManagerContextMenuItem;
  export type ToolbarItem = dxFileManagerToolbarItem;
}
declare module DevExpress.ui.dxForm {
  export type ButtonItem = dxFormButtonItem;
  export type EmptyItem = dxFormEmptyItem;
  export type GroupItem = dxFormGroupItem;
  export type Item =
    | SimpleItem
    | GroupItem
    | TabbedItem
    | EmptyItem
    | ButtonItem;
  export type SimpleItem = dxFormSimpleItem;
  export type TabbedItem = dxFormTabbedItem;
}
declare module DevExpress.ui.dxGallery {
  export type Item = dxGalleryItem;
}
declare module DevExpress.ui.dxGantt {
  export type ContextMenuItem = dxGanttContextMenuItem;
  export type ToolbarItem = dxGanttToolbarItem;
}
declare module DevExpress.ui.dxHtmlEditor {
  export type ContextMenuItem = dxHtmlEditorTableContextMenuItem;
  export type ImageUploadTab = dxHtmlEditorImageUploadTabItem;
  export type ToolbarItem = dxHtmlEditorToolbarItem;
}
declare module DevExpress.ui.dxList {
  export type Item = dxListItem;
}
declare module DevExpress.ui.dxMenu {
  export type Item = dxMenuItem;
}
declare module DevExpress.ui.dxMultiView {
  export type Item = dxMultiViewItem;
}
declare module DevExpress.ui.dxNavBar {
  export type Item = dxNavBarItem;
}
declare module DevExpress.ui.dxOverlay {
  /**
   * Specifies the base z-index for all overlay UI components.
   */
  export function baseZIndex(zIndex: number): void;
}
declare module DevExpress.ui.dxPivotGrid {
  export type Cell = dxPivotGridPivotGridCell;
}
declare module DevExpress.ui.dxPopup {
  export type ToolbarItem = dxPopupToolbarItem;
}
declare module DevExpress.ui.dxResponsiveBox {
  export type Item = dxResponsiveBoxItem;
}
declare module DevExpress.ui.dxSlideOut {
  export type Item = dxSlideOutItem;
}
declare module DevExpress.ui.dxTabPanel {
  export type Item = dxTabPanelItem;
}
declare module DevExpress.ui.dxTabs {
  export type Item = dxTabsItem;
}
declare module DevExpress.ui.dxTileView {
  export type Item = dxTileViewItem;
}
declare module DevExpress.ui.dxToolbar {
  export type Item = dxToolbarItem;
}
declare module DevExpress.ui.dxTreeList {
  /**
   * Configures the toolbar.
   */
  export type Toolbar = {
    /**
     * Configures toolbar items.
     */
    items?: Array<TreeListPredefinedToolbarItem | ToolbarItem>;
    /**
     * Specifies whether the toolbar is visible.
     */
    visible?: boolean;
    /**
     * Specifies whether the toolbar responds to user interaction.
     */
    disabled?: boolean;
  };
  /**
   * Configures toolbar items.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface ToolbarItem extends dxToolbarItem {
    /**
     * A name used to identify the toolbar item.
     */
    name?: TreeListPredefinedToolbarItem | string;
    /**
     * Specifies a location for the item on the toolbar.
     */
    location?: DevExpress.common.ToolbarItemLocation;
  }
}
declare module DevExpress.ui.dxTreeView {
  export type Item = dxTreeViewItem;
}
declare module DevExpress.utils {
  /**
   * Cancels an animation frame request scheduled with the requestAnimationFrame method.
   */
  export function cancelAnimationFrame(requestID: number): void;
  /**
   * Gets the list of IANA time zone objects.
   */
  export function getTimeZones(date?: Date): Array<dxSchedulerTimeZone>;
  /**
   * Sets parameters for the viewport meta tag. Takes effect for mobile applications only.
   */
  export function initMobileViewport(options: {
    allowZoom?: boolean;
    allowPan?: boolean;
    allowSelection?: boolean;
  }): void;
  /**
   * Makes the browser call a function to update animation before the next repaint.
   */
  export function requestAnimationFrame(callback: Function): number;
}
declare module DevExpress.viz {
  /**
   * An object that provides information about a bar in the BarGauge UI component.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface BarGaugeBarInfo {
    /**
     * The bar&apos;s hexadecimal color code.
     */
    color?: string;
    /**
     * The bar&apos;s zero-based index. Bars closest to the gauge&apos;s center have higher indexes.
     */
    index?: number;
    /**
     * The bar&apos;s value.
     */
    value?: number;
  }
  /**
   * @deprecated Use LegendItem instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface BarGaugeLegendItem extends BaseLegendItem {
    /**
     * The bar that the legend item represents.
     */
    item?: BarGaugeBarInfo;
  }
  /**
   * A base class for all chart UI components included in the ChartJS library.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export class BaseChart<TProperties> extends BaseWidget<TProperties> {
    /**
     * Deselects the chart&apos;s selected series. The series is displayed in an initial style.
     */
    clearSelection(): void;
    /**
     * Gets all the series.
     */
    getAllSeries(): Array<baseSeriesObject>;
    getDataSource(): DevExpress.data.DataSource;
    /**
     * Gets a series with a specific name.
     */
    getSeriesByName(seriesName: any): chartSeriesObject;
    /**
     * Gets a series with a specific index.
     */
    getSeriesByPos(seriesIndex: number): chartSeriesObject;
    /**
     * Hides all UI component tooltips.
     */
    hideTooltip(): void;
    /**
     * Reloads data and repaints the UI component.
     */
    refresh(): void;
    render(): void;
    /**
     * Redraws the UI component.
     */
    render(renderOptions: any): void;
  }
  module BaseChart {
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export interface PointInteractionInfo {
      readonly target: basePointObject;
    }
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export interface TooltipInfo {
      target?: basePointObject | dxChartAnnotationConfig | any;
    }
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface BaseChartAdaptiveLayout {
    /**
     * Specifies the minimum container height at which the layout begins to adapt.
     */
    height?: number;
    /**
     * Specifies whether point labels should be kept when the UI component adapts the layout.
     */
    keepLabels?: boolean;
    /**
     * Specifies the minimum container width at which the layout begins to adapt.
     */
    width?: number;
  }
  /**
   * 
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface BaseChartAnnotationConfig
    extends BaseWidgetAnnotationConfig {
    /**
     * Positions the annotation relative to a specific argument.
     */
    argument?: number | Date | string;
    /**
     * Anchors the annotation to a series point. Accepts the name of the point&apos;s series.
     */
    series?: string;
    /**
     * Positions the annotation relative to a value on the specified value axis.
     */
    value?: number | Date | string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface BaseChartLegend extends BaseLegend {
    /**
     * Allows you to change the order, text, and visibility of legend items.
     */
    customizeItems?: (
      items: Array<BaseChartLegendItem>
    ) => Array<BaseChartLegendItem>;
    /**
     * Specifies an SVG element that serves as a custom legend item marker.
     */
    markerTemplate?:
      | DevExpress.core.template
      | ((
          legendItem: BaseChartLegendItem,
          element: SVGGElement
        ) => string | DevExpress.core.UserDefinedElement<SVGElement>);
  }
  /**
   * An object that provides information about a legend item in the Chart and PolarChart UI components.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface BaseChartLegendItem extends BaseLegendItem {
    /**
     * The series that the item represents on the legend.
     */
    series?: baseSeriesObject;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface BaseChartOptions<TComponent>
    extends BaseWidgetOptions<TComponent> {
    /**
     * Specifies adaptive layout properties.
     */
    adaptiveLayout?: BaseChartAdaptiveLayout;
    /**
     * Specifies animation properties.
     */
    animation?:
      | {
          /**
           * Specifies how long the animation runs in milliseconds.
           */
          duration?: number;
          /**
           * Specifies the easing function of the animation.
           */
          easing?: DevExpress.common.charts.AnimationEaseMode;
          /**
           * Enables the animation in the UI component.
           */
          enabled?: boolean;
          /**
           * Specifies how many series points the UI component should have before the animation will be disabled.
           */
          maxPointCountSupported?: number;
        }
      | boolean;
    /**
     * Customizes the appearance of an individual point label.
     */
    customizeLabel?: (pointInfo: any) => dxChartSeriesTypesCommonSeriesLabel;
    /**
     * Customizes the appearance of an individual series point.
     */
    customizePoint?: (pointInfo: any) => dxChartSeriesTypesCommonSeriesPoint;
    /**
     * Binds the UI component to data.
     */
    dataSource?: DevExpress.data.DataSource.DataSourceLike<any> | null;
    /**
     * Specifies properties of the legend.
     */
    legend?: BaseChartLegend;
    /**
     * A function that is executed when all series are ready.
     */
    onDone?: (e: DevExpress.events.EventInfo<TComponent>) => void;
    /**
     * A function that is executed when a series point is clicked or tapped.
     */
    onPointClick?:
      | ((
          e: DevExpress.events.NativeEventInfo<
            TComponent,
            MouseEvent | PointerEvent
          > &
            DevExpress.viz.BaseChart.PointInteractionInfo
        ) => void)
      | string;
    /**
     * A function that is executed after the pointer enters or leaves a series point.
     */
    onPointHoverChanged?: (
      e: DevExpress.events.EventInfo<TComponent> &
        DevExpress.viz.BaseChart.PointInteractionInfo
    ) => void;
    /**
     * A function that is executed when a series point is selected or selection is canceled.
     */
    onPointSelectionChanged?: (
      e: DevExpress.events.EventInfo<TComponent> &
        DevExpress.viz.BaseChart.PointInteractionInfo
    ) => void;
    /**
     * A function that is executed when a tooltip becomes hidden.
     */
    onTooltipHidden?: (
      e: DevExpress.events.EventInfo<TComponent> &
        DevExpress.viz.BaseChart.TooltipInfo
    ) => void;
    /**
     * A function that is executed when a tooltip appears.
     */
    onTooltipShown?: (
      e: DevExpress.events.EventInfo<TComponent> &
        DevExpress.viz.BaseChart.TooltipInfo
    ) => void;
    /**
     * Sets the palette to be used for colorizing series and their elements.
     */
    palette?: Array<string> | DevExpress.common.charts.Palette;
    /**
     * Specifies what to do with colors in the palette when their number is less than the number of series (in the Chart UI component) or points in a series (in the PieChart UI component).
     */
    paletteExtensionMode?: DevExpress.common.charts.PaletteExtensionMode;
    /**
     * Specifies whether a single point or multiple points can be selected in the chart.
     */
    pointSelectionMode?: DevExpress.common.SingleOrMultiple;
    /**
     * Specifies properties for series.
     */
    series?: any | Array<any>;
    /**
     * Configures tooltips.
     */
    tooltip?: BaseChartTooltip;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface BaseChartTooltip extends BaseWidgetTooltip {
    /**
     * Formats the point argument before it is displayed in the tooltip. To format the point value, use the format property.
     */
    argumentFormat?: DevExpress.ui.Format;
    /**
     * Specifies a custom template for a tooltip.
     */
    contentTemplate?:
      | DevExpress.core.template
      | ((
          pointInfo: any,
          element: DevExpress.core.DxElement
        ) => string | DevExpress.core.UserDefinedElement);
    /**
     * Allows you to change tooltip appearance.
     */
    customizeTooltip?: (pointInfo: any) => any;
    /**
     * Specifies whether the tooltip is shared across all series points with the same argument.
     */
    shared?: boolean;
    /**
     * Allows users to interact with the tooltip content.
     */
    interactive?: boolean;
  }
  /**
   * A gauge UI component.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export class BaseGauge<TProperties> extends BaseWidget<TProperties> {
    /**
     * Gets subvalues.
     */
    subvalues(): Array<number>;
    /**
     * Updates subvalues.
     */
    subvalues(subvalues: Array<number>): void;
    /**
     * Gets the main value.
     */
    value(): number;
    /**
     * Updates the main value.
     */
    value(value: number): void;
  }
  module BaseGauge {
    export type GaugeIndicatorType =
      | 'circle'
      | 'rangeBar'
      | 'rectangle'
      | 'rectangleNeedle'
      | 'rhombus'
      | 'textCloud'
      | 'triangleMarker'
      | 'triangleNeedle'
      | 'twoColorNeedle';
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export interface TooltipInfo {
      target: any;
    }
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface BaseGaugeAnimation {
    /**
     * Determines how long animation runs.
     */
    duration?: number;
    /**
     * Specifies the animation easing mode.
     */
    easing?: DevExpress.common.charts.AnimationEaseMode;
    /**
     * Indicates whether or not animation is enabled.
     */
    enabled?: boolean;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface BaseGaugeLoadingIndicator
    extends BaseWidgetLoadingIndicator {
    /**
     * 
     */
    enabled?: boolean;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface BaseGaugeOptions<TComponent>
    extends BaseWidgetOptions<TComponent> {
    /**
     * Specifies animation properties.
     */
    animation?: BaseGaugeAnimation;
    /**
     * Specifies the color of the parent page element.
     */
    containerBackgroundColor?: string;
    /**
     * Configures the loading indicator.
     */
    loadingIndicator?: BaseGaugeLoadingIndicator;
    /**
     * A function that is executed when a tooltip becomes hidden.
     */
    onTooltipHidden?: (
      e: DevExpress.events.EventInfo<TComponent> &
        DevExpress.viz.BaseGauge.TooltipInfo
    ) => void;
    /**
     * A function that is executed when a tooltip appears.
     */
    onTooltipShown?: (
      e: DevExpress.events.EventInfo<TComponent> &
        DevExpress.viz.BaseGauge.TooltipInfo
    ) => void;
    /**
     * Specifies properties of the gauge&apos;s range container.
     */
    rangeContainer?: BaseGaugeRangeContainer;
    /**
     * Specifies properties of the gauge&apos;s scale.
     */
    scale?: BaseGaugeScale;
    /**
     * Specifies a set of subvalues to be designated by the subvalue indicators.
     */
    subvalues?: Array<number>;
    /**
     * Configures tooltips.
     */
    tooltip?: BaseGaugeTooltip;
    /**
     * Specifies the main value on a gauge.
     */
    value?: number;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface BaseGaugeRangeContainer {
    /**
     * Specifies a range container&apos;s background color.
     */
    backgroundColor?: string;
    /**
     * Specifies the offset of the range container from an invisible scale line in pixels.
     */
    offset?: number;
    /**
     * Specifies the palette to be used for colorizing ranges in the range container.
     */
    palette?: Array<string> | DevExpress.common.charts.Palette;
    /**
     * Specifies what to do with colors in the palette when their number is less than the number of ranges in the range container.
     */
    paletteExtensionMode?: DevExpress.common.charts.PaletteExtensionMode;
    /**
     * An array of objects representing ranges contained in the range container.
     */
    ranges?: Array<{
      /**
       * Specifies a color of a range.
       */
      color?: string;
      /**
       * Specifies an end value of a range.
       */
      endValue?: number;
      /**
       * Specifies a start value of a range.
       */
      startValue?: number;
    }>;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface BaseGaugeScale {
    /**
     * Specifies whether to allow decimal values on the scale. When false, the scale contains integer values only.
     */
    allowDecimals?: boolean;
    /**
     * Specifies an array of custom minor ticks.
     */
    customMinorTicks?: Array<number>;
    /**
     * Specifies an array of custom major ticks.
     */
    customTicks?: Array<number>;
    /**
     * Specifies the end value for the scale of the gauge.
     */
    endValue?: number;
    /**
     * Specifies common properties for scale labels.
     */
    label?: BaseGaugeScaleLabel;
    /**
     * Specifies properties of the gauge&apos;s minor ticks.
     */
    minorTick?: {
      /**
       * Specifies the color of the scale&apos;s minor ticks.
       */
      color?: string;
      /**
       * Specifies the length of the scale&apos;s minor ticks.
       */
      length?: number;
      /**
       * Specifies the opacity of the scale&apos;s minor ticks.
       */
      opacity?: number;
      /**
       * Indicates whether scale minor ticks are visible or not.
       */
      visible?: boolean;
      /**
       * Specifies the width of the scale&apos;s minor ticks.
       */
      width?: number;
    };
    /**
     * Specifies an interval between minor ticks.
     */
    minorTickInterval?: number;
    /**
     * Specifies the minimum distance between two neighboring major ticks in pixels.
     */
    scaleDivisionFactor?: number;
    /**
     * Specifies the start value for the scale of the gauge.
     */
    startValue?: number;
    /**
     * Specifies properties of the gauge&apos;s major ticks.
     */
    tick?: {
      /**
       * Specifies the color of the scale&apos;s major ticks.
       */
      color?: string;
      /**
       * Specifies the length of the scale&apos;s major ticks.
       */
      length?: number;
      /**
       * Specifies the opacity of the scale&apos;s major ticks.
       */
      opacity?: number;
      /**
       * Indicates whether scale major ticks are visible or not.
       */
      visible?: boolean;
      /**
       * Specifies the width of the scale&apos;s major ticks.
       */
      width?: number;
    };
    /**
     * Specifies an interval between major ticks.
     */
    tickInterval?: number;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface BaseGaugeScaleLabel {
    /**
     * Specifies a callback function that returns the text to be displayed in scale labels.
     */
    customizeText?: (scaleValue: {
      value?: number;
      valueText?: string;
    }) => string;
    /**
     * Specifies font properties for the text displayed in the scale labels of the gauge.
     */
    font?: Font;
    /**
     * Formats a value before it is displayed in a scale label. Accepts only numeric formats.
     */
    format?: DevExpress.ui.Format;
    /**
     * Decides how to arrange scale labels when there is not enough space to keep all of them.
     */
    overlappingBehavior?: DevExpress.common.charts.LabelOverlap;
    /**
     * Specifies whether or not scale labels should be colored similarly to their corresponding ranges in the range container.
     */
    useRangeColors?: boolean;
    /**
     * Specifies whether or not scale labels are visible on the gauge.
     */
    visible?: boolean;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface BaseGaugeTooltip extends BaseWidgetTooltip {
    /**
     * Specifies a custom template for a tooltip.
     */
    contentTemplate?:
      | DevExpress.core.template
      | ((
          scaleValue: { value?: number; valueText?: string },
          element: DevExpress.core.DxElement
        ) => string | DevExpress.core.UserDefinedElement);
    /**
     * Allows you to change the appearance of specified tooltips.
     */
    customizeTooltip?: (scaleValue: {
      value?: number;
      valueText?: string;
    }) => any;
    /**
     * Allows users to interact with the tooltip content.
     */
    interactive?: boolean;
  }
  /**
   * This section describes the Label object, which represents a point label.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface baseLabelObject {
    /**
     * Gets the parameters of the label&apos;s minimum bounding rectangle (MBR).
     */
    getBoundingRect(): any;
    /**
     * Hides the point label.
     */
    hide(): void;
    /**
     * Hides the point label and keeps it invisible until the show() method is called.
     */
    hide(holdInvisible: boolean): void;
    /**
     * Checks whether the point label is visible.
     */
    isVisible(): boolean;
    /**
     * Shows the point label.
     */
    show(): void;
    /**
     * Shows the point label and keeps it visible until the hide() method is called.
     */
    show(holdVisible: boolean): void;
  }
  /**
   * 
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface BaseLegend {
    /**
     * Colors the legend&apos;s background.
     */
    backgroundColor?: string;
    /**
     * Configures the legend&apos;s border.
     */
    border?: {
      /**
       * Colors the legend&apos;s border.
       */
      color?: string;
      /**
       * Makes all the legend&apos;s corners rounded.
       */
      cornerRadius?: number;
      /**
       * Sets a dash style for the legend&apos;s border.
       */
      dashStyle?: DevExpress.common.charts.DashStyle;
      /**
       * Specifies the transparency of the legend&apos;s border.
       */
      opacity?: number;
      /**
       * Shows the legend&apos;s border.
       */
      visible?: boolean;
      /**
       * Specifies the width of the legend&apos;s border in pixels.
       */
      width?: number;
    };
    /**
     * Arranges legend items into several columns.
     */
    columnCount?: number;
    /**
     * Specifies an empty space between item columns in pixels.
     */
    columnItemSpacing?: number;
    /**
     * Specifies the legend items&apos; font properties.
     */
    font?: Font;
    /**
     * Along with verticalAlignment, specifies the legend&apos;s position.
     */
    horizontalAlignment?: DevExpress.common.HorizontalAlignment;
    /**
     * Specifies the text&apos;s position relative to the marker in a legend item.
     */
    itemTextPosition?: DevExpress.common.Position;
    /**
     * Aligns items in the last column or row (depending on the legend&apos;s orientation). Applies when legend items are not divided into columns or rows equally.
     */
    itemsAlignment?: DevExpress.common.HorizontalAlignment;
    /**
     * Generates an empty space, measured in pixels, around the legend.
     */
    margin?:
      | number
      | {
          /**
           * Specifies the legend&apos;s bottom margin in pixels.
           */
          bottom?: number;
          /**
           * Specifies the legend&apos;s left margin in pixels.
           */
          left?: number;
          /**
           * Specifies the legend&apos;s right margin in pixels.
           */
          right?: number;
          /**
           * Specifies the legend&apos;s top margin in pixels.
           */
          top?: number;
        };
    /**
     * Specifies the marker&apos;s size in a legend item in pixels.
     */
    markerSize?: number;
    /**
     * Arranges legend items vertically (in a column) or horizontally (in a row). The default value is &apos;horizontal&apos; if the legend.horizontalAlignment is &apos;center&apos;. Otherwise, it is &apos;vertical&apos;.
     */
    orientation?: DevExpress.common.Orientation;
    /**
     * Generates an empty space, measured in pixels, between the legend&apos;s left/right border and its items.
     */
    paddingLeftRight?: number;
    /**
     * Generates an empty space, measured in pixels, between the legend&apos;s top/bottom border and its items.
     */
    paddingTopBottom?: number;
    /**
     * Arranges legend items in several rows.
     */
    rowCount?: number;
    /**
     * Specifies an empty space between item rows in pixels.
     */
    rowItemSpacing?: number;
    /**
     * Configures the legend title.
     */
    title?:
      | {
          /**
           * Specifies the legend title&apos;s font properties.
           */
          font?: Font;
          /**
           * Along with verticalAlignment, specifies the legend title&apos;s position.
           */
          horizontalAlignment?: DevExpress.common.HorizontalAlignment;
          /**
           * Generates space around the legend title.
           */
          margin?: {
            /**
             * Specifies the legend title&apos;s bottom margin.
             */
            bottom?: number;
            /**
             * Specifies the legend title&apos;s left margin.
             */
            left?: number;
            /**
             * Specifies the legend title&apos;s right margin.
             */
            right?: number;
            /**
             * Specifies the legend title&apos;s top margin.
             */
            top?: number;
          };
          /**
           * Reserves a pixel-measured space for the legend title.
           */
          placeholderSize?: number;
          /**
           * Configures the legend subtitle. The subtitle appears only if the title is specified.
           */
          subtitle?:
            | {
                /**
                 * Specifies the legend subtitle&apos;s font properties.
                 */
                font?: Font;
                /**
                 * Specifies the distance between the legend&apos;s title and subtitle in pixels.
                 */
                offset?: number;
                /**
                 * Specifies the subtitle&apos;s text.
                 */
                text?: string;
              }
            | string;
          /**
           * Specifies the legend title&apos;s text.
           */
          text?: string;
          /**
           * Specifies the legend title&apos;s vertical alignment.
           */
          verticalAlignment?: DevExpress.common.VerticalEdge;
        }
      | string;
    /**
     * Along with horizontalAlignment, specifies the legend&apos;s position.
     */
    verticalAlignment?: DevExpress.common.VerticalEdge;
    /**
     * Specifies the legend&apos;s visibility.
     */
    visible?: boolean;
  }
  /**
   * 
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface BaseLegendItem {
    /**
     * A legend item marker.
     */
    marker?: {
      /**
       * The marker&apos;s color.
       */
      fill?: string;
      /**
       * The marker&apos;s opacity.
       */
      opacity?: number;
      /**
       * The markerSize in pixels.
       */
      size?: number;
      /**
       * The marker&apos;s state.
       */
      state?: DevExpress.common.charts.LegendMarkerState;
    };
    /**
     * The text that the legend item displays.
     */
    text?: string;
    /**
     * Indicates and specifies whether the legend item is visible.
     */
    visible?: boolean;
  }
  /**
   * This section describes the Point object, which represents a series point.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface basePointObject {
    /**
     * Switches the point from the hover state back to normal.
     */
    clearHover(): void;
    /**
     * Deselects the point.
     */
    clearSelection(): void;
    /**
     * Contains the data object that the series point represents.
     */
    data?: any;
    /**
     * Provides information about the state of the point object.
     */
    fullState?: number;
    /**
     * Gets the color of a particular point.
     */
    getColor(): string;
    /**
     * Allows you to obtain the label(s) of the series point.
     */
    getLabel(): baseLabelObject & Array<baseLabelObject>;
    /**
     * Hides the tooltip of the point.
     */
    hideTooltip(): void;
    /**
     * Switches the point into the hover state, the same as when a user places the mouse pointer on it.
     */
    hover(): void;
    /**
     * Provides information about the hover state of a point.
     */
    isHovered(): boolean;
    /**
     * Provides information about the selection state of a point.
     */
    isSelected(): boolean;
    /**
     * Returns the point&apos;s argument value that was set in the data source.
     */
    originalArgument?: string | number | Date;
    /**
     * Returns the point&apos;s value that was set in the data source.
     */
    originalValue?: string | number | Date;
    /**
     * Selects the point. The point is displayed in a &apos;selected&apos; style until another point is selected or the current point is deselected programmatically.
     */
    select(): void;
    /**
     * Returns the series object to which the point belongs.
     */
    series?: any;
    /**
     * Shows the tooltip of the point.
     */
    showTooltip(): void;
    /**
     * Returns the tag of the point.
     */
    tag?: any;
  }
  /**
   * This section describes the Series object, which represents a series.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface baseSeriesObject {
    /**
     * Switches the series from the hover state back to normal.
     */
    clearHover(): void;
    /**
     * Cancels the selection of this particular series. The series is displayed in its initial style.
     */
    clearSelection(): void;
    /**
     * Deselects the specified point. The point is displayed in an initial style.
     */
    deselectPoint(point: basePointObject): void;
    /**
     * Provides information about the state of the series object.
     */
    fullState?: number;
    /**
     * Gets all points in the series.
     */
    getAllPoints(): Array<basePointObject>;
    /**
     * Gets the color of a particular series.
     */
    getColor(): string;
    /**
     * Gets a series point with the specified index.
     */
    getPointByPos(positionIndex: number): basePointObject;
    /**
     * Gets a series point with the specified argument value.
     */
    getPointsByArg(pointArg: number | string | Date): Array<basePointObject>;
    /**
     * Gets visible series points.
     */
    getVisiblePoints(): Array<basePointObject>;
    /**
     * Hides a series at runtime.
     */
    hide(): void;
    /**
     * Switches the series into the hover state, the same as when a user places the mouse pointer on it.
     */
    hover(): void;
    /**
     * Provides information about the hover state of a series.
     */
    isHovered(): boolean;
    /**
     * Provides information about the selection state of a series.
     */
    isSelected(): boolean;
    /**
     * Provides information about the visibility state of a series.
     */
    isVisible(): boolean;
    /**
     * Returns the name of the series.
     */
    name?: any;
    /**
     * Selects the series.
     */
    select(): void;
    /**
     * Selects the specified point. The point is displayed in a &apos;selected&apos; style.
     */
    selectPoint(point: basePointObject): void;
    /**
     * Makes a particular series visible.
     */
    show(): void;
    /**
     * Returns the tag of the series.
     */
    tag?: any;
    /**
     * Returns the type of the series.
     */
    type?: string;
  }
  /**
   * Overridden by descriptions for particular UI components.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export class BaseSparkline<TProperties> extends BaseWidget<TProperties> {
    /**
     * Hides the loading indicator.
     */
    hideLoadingIndicator(): void;
    /**
     * Shows the loading indicator.
     */
    showLoadingIndicator(): void;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface BaseSparklineOptions<TComponent>
    extends BaseWidgetOptions<TComponent> {
    /**
     * Configures the exporting and printing features.
     */
    export?: BaseWidgetExport;
    /**
     * Configures the loading indicator.
     */
    loadingIndicator?: BaseWidgetLoadingIndicator;
    /**
     * A function that is executed when a tooltip becomes hidden.
     */
    onTooltipHidden?: (e: DevExpress.events.EventInfo<TComponent>) => void;
    /**
     * A function that is executed when a tooltip appears.
     */
    onTooltipShown?: (e: DevExpress.events.EventInfo<TComponent>) => void;
    /**
     * Specifies whether to redraw the UI component when the size of the parent browser window changes or a mobile device rotates.
     */
    redrawOnResize?: boolean;
    /**
     * Configures the UI component&apos;s title.
     */
    title?: BaseWidgetTitle | string;
    /**
     * Configures the tooltip.
     */
    tooltip?: BaseSparklineTooltip;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface BaseSparklineTooltip extends BaseWidgetTooltip {
    /**
     * Specifies a custom template for tooltips.
     */
    contentTemplate?:
      | DevExpress.core.template
      | ((
          pointsInfo: any,
          element: DevExpress.core.DxElement
        ) => string | DevExpress.core.UserDefinedElement);
    /**
     * Allows you to change tooltip appearance.
     */
    customizeTooltip?: (pointsInfo: any) => any;
    /**
     * Enables tooltips.
     */
    enabled?: boolean;
    /**
     * Allows users to interact with the tooltip content.
     */
    interactive?: boolean;
  }
  /**
   * This section describes properties and methods that are common to all UI components.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export class BaseWidget<TProperties> extends DOMComponent<TProperties> {
    /**
     * 
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    static defaultOptions<TProperties>(
      rule: DevExpress.core.DefaultOptionsRule<TProperties>
    ): void;
    /**
     * Exports the UI component.
     */
    exportTo(fileName: string, format: string): void;
    /**
     * Gets the current UI component size.
     */
    getSize(): BaseWidgetSize;
    /**
     * Hides the loading indicator.
     */
    hideLoadingIndicator(): void;
    /**
     * Opens the browser&apos;s print window.
     */
    print(): void;
    /**
     * Redraws the UI component.
     */
    render(): void;
    /**
     * Shows the loading indicator.
     */
    showLoadingIndicator(): void;
    /**
     * Gets the UI component&apos;s SVG markup.
     */
    svg(): string;
  }
  module BaseWidget {
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export interface ExportInfo {
      readonly fileName: string;
      readonly format: string;
    }
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export type FileSavingEventInfo<T> = DevExpress.events.Cancelable & {
      readonly component: T;
      readonly element: DevExpress.core.DxElement;
      readonly fileName: string;
      readonly format: string;
      readonly data: Blob;
    };
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export interface IncidentInfo {
      readonly target: any;
    }
  }
  /**
   * 
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface BaseWidgetAnnotationConfig {
    /**
     * Specifies whether users can drag and drop the annotation.
     */
    allowDragging?: boolean;
    /**
     * Specifies the length of the annotation&apos;s arrow in pixels.
     */
    arrowLength?: number;
    /**
     * Specifies the width of the annotation&apos;s arrow at its junction with the annotation rectangle.
     */
    arrowWidth?: number;
    /**
     * Configures the appearance of the annotation&apos;s border.
     */
    border?: {
      /**
       * Colors the annotation&apos;s border.
       */
      color?: string;
      /**
       * Makes the annotation&apos;s corners rounded.
       */
      cornerRadius?: number;
      /**
       * Specifies the dash style of the annotation&apos;s border.
       */
      dashStyle?: DevExpress.common.charts.DashStyle;
      /**
       * Specifies the opacity of the annotation&apos;s border.
       */
      opacity?: number;
      /**
       * Specifies the visibility of the annotation&apos;s border.
       */
      visible?: boolean;
      /**
       * Specifies the width of the annotation&apos;s border in pixels.
       */
      width?: number;
    };
    /**
     * Specifies the color that fills the annotation.
     */
    color?: string;
    /**
     * A container for custom data.
     */
    data?: any;
    /**
     * Specifies the annotation&apos;s description in the tooltip.
     */
    description?: string;
    /**
     * Specifies the annotation&apos;s font properties. Applies to text annotations only.
     */
    font?: Font;
    /**
     * Specifies the annotation&apos;s height in pixels.
     */
    height?: number;
    /**
     * Configures the image to be displayed in the annotation. Applies only if the type is &apos;image&apos;.
     */
    image?:
      | string
      | {
          /**
           * Specifies the image&apos;s height in pixels.
           */
          height?: number;
          /**
           * Specifies the image&apos;s URL.
           */
          url?: string;
          /**
           * Specifies the image&apos;s width in pixels.
           */
          width?: number;
        };
    /**
     * Moves the annotation horizontally.
     */
    offsetX?: number;
    /**
     * Moves the annotation vertically.
     */
    offsetY?: number;
    /**
     * Specifies the annotation&apos;s opacity.
     */
    opacity?: number;
    /**
     * Used with paddingTopBottom to generate an empty space around the annotation&apos;s text or image (specified in pixels).
     */
    paddingLeftRight?: number;
    /**
     * Along with paddingLeftRight, generates an empty space around the annotation&apos;s text or image; specified in pixels.
     */
    paddingTopBottom?: number;
    /**
     * Configures the annotation&apos;s shadows.
     */
    shadow?: {
      /**
       * Specifies the blur distance of the shadows. A larger value increases the blur distance.
       */
      blur?: number;
      /**
       * Colors the annotation&apos;s shadows.
       */
      color?: string;
      /**
       * Moves the shadows horizontally.
       */
      offsetX?: number;
      /**
       * Moves the shadows vertically.
       */
      offsetY?: number;
      /**
       * Specifies the opacity of the shadows.
       */
      opacity?: number;
    };
    /**
     * Specifies the annotation&apos;s text. Applies only if the type is &apos;text&apos;.
     */
    text?: string;
    /**
     * Specifies what to do with the annotation&apos;s text when it overflows the allocated space after applying wordWrap: hide, truncate it and display an ellipsis, or do nothing.
     */
    textOverflow?: DevExpress.common.charts.TextOverflow;
    /**
     * Specifies whether the annotation tooltip is enabled.
     */
    tooltipEnabled?: boolean;
    /**
     * Specifies whether the annotation displays text, an image, or a template. This is a required setting.
     */
    type?: DevExpress.common.charts.AnnotationType;
    /**
     * Specifies the annotation&apos;s width in pixels.
     */
    width?: number;
    /**
     * Specifies how to wrap the annotation&apos;s text if it does not fit into a single line.
     */
    wordWrap?: DevExpress.common.charts.WordWrap;
    /**
     * Used with y to position the annotation&apos;s center at a specific pixel coordinate. (0, 0) is the upper left corner of the UI component.
     */
    x?: number;
    /**
     * Used with x to position the annotation&apos;s center at a specific pixel coordinate. (0, 0) is the upper left corner of the UI component.
     */
    y?: number;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface BaseWidgetExport {
    /**
     * Specifies the color that will fill transparent regions in the resulting file or document.
     */
    backgroundColor?: string;
    /**
     * Enables the client-side exporting in the UI component.
     */
    enabled?: boolean;
    /**
     * Specifies a default name for the file to which the UI component will be exported.
     */
    fileName?: string;
    /**
     * Specifies a set of export formats.
     */
    formats?: Array<DevExpress.common.ExportFormat>;
    /**
     * Adds an empty space around the exported UI component; measured in pixels.
     */
    margin?: number;
    /**
     * Enables the printing feature in the UI component. Applies only if the export.enabled property is true.
     */
    printingEnabled?: boolean;
    /**
     * Specifies the URL of the server-side proxy that streams the resulting file to the end user to enable exporting in the Safari browser.
     * @deprecated Since v10, Safari browser supports API for saving files, and this property is no longer required.
     */
    proxyUrl?: string;
    /**
     * A function that renders SVG markup on the HTML canvas. Required to export custom SVG elements (for example, markerTemplate).
     */
    svgToCanvas?: (
      svg: SVGElement,
      canvas: HTMLCanvasElement
    ) => PromiseLike<void>;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface BaseWidgetLoadingIndicator {
    /**
     * Colors the background of the loading indicator.
     */
    backgroundColor?: string;
    /**
     * Specifies whether the loading indicator should be displayed and hidden automatically.
     */
    enabled?: boolean;
    /**
     * Specifies font properties for the loading indicator.
     */
    font?: Font;
    /**
     * Allows you to change the loading indicator&apos;s visibility.
     */
    show?: boolean;
    /**
     * Specifies the text to be displayed by the loading indicator.
     */
    text?: string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface BaseWidgetMargin {
    /**
     * Specifies the bottom margin of the UI component in pixels.
     */
    bottom?: number;
    /**
     * Specifies the left margin of the UI component in pixels.
     */
    left?: number;
    /**
     * Specifies the right margin of the UI component in pixels.
     */
    right?: number;
    /**
     * Specifies the top margin of the UI component in pixels.
     */
    top?: number;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface BaseWidgetOptions<TComponent>
    extends DOMComponentOptions<TComponent> {
    /**
     * Specifies whether the UI component responds to user interaction.
     */
    disabled?: boolean;
    /**
     * Configures the exporting and printing features.
     */
    export?: BaseWidgetExport;
    /**
     * 
     */
    height?: number | string | (() => number | string);
    /**
     * Configures the loading indicator.
     */
    loadingIndicator?: BaseWidgetLoadingIndicator;
    /**
     * Generates space around the UI component.
     */
    margin?: BaseWidgetMargin;
    /**
     * A function that is executed when the UI component&apos;s rendering has finished.
     */
    onDrawn?: (e: DevExpress.events.EventInfo<TComponent>) => void;
    /**
     * A function that is executed after the UI component is exported.
     */
    onExported?: (e: DevExpress.events.EventInfo<TComponent>) => void;
    /**
     * A function that is executed before the UI component is exported.
     */
    onExporting?: (
      e: DevExpress.events.EventInfo<TComponent> &
        DevExpress.viz.BaseWidget.ExportInfo
    ) => void;
    /**
     * A function that is executed before a file with exported UI component is saved to the user&apos;s local storage.
     */
    onFileSaving?: (
      e: DevExpress.viz.BaseWidget.FileSavingEventInfo<TComponent>
    ) => void;
    /**
     * A function that is executed when an error or warning occurs.
     */
    onIncidentOccurred?: (
      e: DevExpress.events.EventInfo<TComponent> &
        DevExpress.viz.BaseWidget.IncidentInfo
    ) => void;
    /**
     * Notifies the UI component that it is embedded into an HTML page that uses a tag modifying the path.
     */
    pathModified?: boolean;
    /**
     * Specifies whether to redraw the UI component when the size of the parent browser window changes or a mobile device rotates.
     */
    redrawOnResize?: boolean;
    /**
     * Switches the UI component to a right-to-left representation.
     */
    rtlEnabled?: boolean;
    /**
     * Specifies the UI component&apos;s size in pixels.
     */
    size?: BaseWidgetSize;
    /**
     * Sets the name of the theme the UI component uses.
     */
    theme?: DevExpress.common.charts.Theme;
    /**
     * Configures the UI component&apos;s title.
     */
    title?: BaseWidgetTitle | string;
    /**
     * Configures tooltips - small pop-up rectangles that display information about a data-visualizing UI component element being pressed or hovered over with the mouse pointer.
     */
    tooltip?: BaseWidgetTooltip;
    /**
     * 
     */
    width?: number | string | (() => number | string);
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface BaseWidgetSize {
    /**
     * Specifies the height of the UI component in pixels.
     */
    height?: number;
    /**
     * Specifies the width of the UI component in pixels.
     */
    width?: number;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface BaseWidgetTitle {
    /**
     * Specifies font properties for the title.
     */
    font?: Font;
    /**
     * Specifies the title&apos;s alignment in a horizontal direction.
     */
    horizontalAlignment?: DevExpress.common.HorizontalAlignment;
    /**
     * Generates space around the title.
     */
    margin?:
      | number
      | {
          /**
           * Specifies the bottom margin of the title.
           */
          bottom?: number;
          /**
           * Specifies the left margin of the title.
           */
          left?: number;
          /**
           * Specifies the right margin of the title.
           */
          right?: number;
          /**
           * Specifies the top margin of the title.
           */
          top?: number;
        };
    /**
     * Reserves a pixel-measured space for the title.
     */
    placeholderSize?: number;
    /**
     * Configures the UI component&apos;s subtitle.
     */
    subtitle?:
      | {
          /**
           * Specifies font properties for the subtitle.
           */
          font?: Font;
          /**
           * Specifies the distance between the title and subtitle in pixels.
           */
          offset?: number;
          /**
           * Specifies text for the subtitle.
           */
          text?: string;
          /**
           * Specifies what to do with the subtitle when it overflows the allocated space after applying wordWrap: hide, truncate it and display an ellipsis, or do nothing.
           */
          textOverflow?: DevExpress.common.charts.TextOverflow;
          /**
           * Specifies how to wrap the subtitle if it does not fit into a single line.
           */
          wordWrap?: DevExpress.common.charts.WordWrap;
        }
      | string;
    /**
     * Specifies the title&apos;s text.
     */
    text?: string;
    /**
     * Specifies what to do with the title when it overflows the allocated space after applying wordWrap: hide, truncate it and display an ellipsis, or do nothing.
     */
    textOverflow?: DevExpress.common.charts.TextOverflow;
    /**
     * Specifies the title&apos;s alignment in a vertical direction.
     */
    verticalAlignment?: DevExpress.common.VerticalEdge;
    /**
     * Specifies how to wrap the title if it does not fit into a single line.
     */
    wordWrap?: DevExpress.common.charts.WordWrap;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface BaseWidgetTooltip {
    /**
     * Specifies the length of a tooltip&apos;s arrow in pixels.
     */
    arrowLength?: number;
    /**
     * Configures a tooltip&apos;s border.
     */
    border?: {
      /**
       * Colors a tooltip&apos;s border.
       */
      color?: string;
      /**
       * Specifies the dash style of a tooltip&apos;s border.
       */
      dashStyle?: DevExpress.common.charts.DashStyle;
      /**
       * Specifies the transparency of a tooltip&apos;s border.
       */
      opacity?: number;
      /**
       * Specifies whether a tooltip&apos;s border is visible.
       */
      visible?: boolean;
      /**
       * Specifies the width of a tooltip&apos;s border in pixels.
       */
      width?: number;
    };
    /**
     * Colors all tooltips.
     */
    color?: string;
    /**
     * Specifies the container in which to draw tooltips. The default container is the HTML DOM `` element.
     */
    container?: string | DevExpress.core.UserDefinedElement;
    /**
     * Makes all the tooltip&apos;s corners rounded.
     */
    cornerRadius?: number;
    /**
     * Enables tooltips.
     */
    enabled?: boolean;
    /**
     * Specifies tooltips&apos; font properties.
     */
    font?: Font;
    /**
     * Formats a value before it is displayed it in a tooltip.
     */
    format?: DevExpress.ui.Format;
    /**
     * Specifies tooltips&apos; transparency.
     */
    opacity?: number;
    /**
     * Generates an empty space, measured in pixels, between a tooltip&apos;s left/right border and its text.
     */
    paddingLeftRight?: number;
    /**
     * Generates an empty space, measured in pixels, between a tooltip&apos;s top/bottom border and its text.
     */
    paddingTopBottom?: number;
    /**
     * Configures a tooltip&apos;s shadow.
     */
    shadow?: {
      /**
       * Specifies the blur distance of a tooltip&apos;s shadow. The larger the value, the blurrier the shadow&apos;s edge.
       */
      blur?: number;
      /**
       * Colors a tooltip&apos;s shadow.
       */
      color?: string;
      /**
       * Specifies the horizontal offset of a tooltip&apos;s shadow relative to the tooltip itself. Measured in pixels.
       */
      offsetX?: number;
      /**
       * Specifies the vertical offset of a tooltip&apos;s shadow relative to the tooltip itself. Measured in pixels.
       */
      offsetY?: number;
      /**
       * Specifies the transparency of a tooltip&apos;s shadow.
       */
      opacity?: number;
    };
    /**
     * Specifies a tooltip&apos;s z-index.
     */
    zIndex?: number;
  }
  /**
   * This section describes the Axis object. This object represents a chart axis.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface chartAxisObject {
    /**
     * Gets the axis&apos; displayed range.
     */
    visualRange(): VizRange;
    /**
     * Sets the axis&apos;s displayed range.
     */
    visualRange(visualRange: Array<number | string | Date> | VizRange): void;
  }
  /**
   * 
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface chartPointAggregationInfoObject {
    /**
     * Contains the length of the aggregation interval in axis units (numbers or dates). If the interval is set in pixels (using the aggregationGroupWidth property), it will be converted to axis units.
     */
    aggregationInterval?: any;
    /**
     * Contains data objects that were aggregated into this point.
     */
    data?: Array<any>;
    /**
     * Contains the end value of the interval to which the point belongs.
     */
    intervalEnd?: any;
    /**
     * Contains the start value of the interval to which the point belongs.
     */
    intervalStart?: any;
  }
  /**
   * This section describes the Point object, which represents a series point.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface chartPointObject extends basePointObject {
    /**
     * Provides information about the aggregation interval and the data objects that fall within it.
     */
    aggregationInfo?: chartPointAggregationInfoObject;
    /**
     * Gets the parameters of the point&apos;s minimum bounding rectangle (MBR).
     */
    getBoundingRect(): any;
    /**
     * Contains the close value of the point. This field is useful for points belonging to a series of the candle stick or stock type only.
     */
    originalCloseValue?: number | string;
    /**
     * Contains the high value of the point. This field is useful for points belonging to a series of the candle stick or stock type only.
     */
    originalHighValue?: number | string;
    /**
     * Contains the low value of the point. This field is useful for points belonging to a series of the candle stick or stock type only.
     */
    originalLowValue?: number | string;
    /**
     * Contains the first value of the point. This field is useful for points belonging to a series of the range area or range bar type only.
     */
    originalMinValue?: string | number | Date;
    /**
     * Contains the open value of the point. This field is useful for points belonging to a series of the candle stick or stock type only.
     */
    originalOpenValue?: number | string;
    /**
     * Contains the size of the bubble as it was set in the data source. This field is useful for points belonging to a series of the bubble type only.
     */
    size?: number | string;
  }
  /**
   * Specifies properties for Chart UI component series.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface ChartSeries extends dxChartSeriesTypesCommonSeries {
    /**
     * Specifies the name that identifies the series.
     */
    name?: string;
    /**
     * Specifies data about a series.
     */
    tag?: any;
    /**
     * Sets the series type.
     */
    type?: SeriesType;
  }
  /**
   * This section describes the Series object, which represents a series.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface chartSeriesObject extends baseSeriesObject {
    /**
     * Returns the name of the value axis of the series.
     */
    axis?: string;
    /**
     * The name of the series&apos; barOverlapGroup.
     */
    barOverlapGroup?: string;
    /**
     * Gets the argument axis to which the series belongs.
     */
    getArgumentAxis(): chartAxisObject;
    /**
     * Gets the value axis to which the series belongs.
     */
    getValueAxis(): chartAxisObject;
    /**
     * Returns the name of the series pane.
     */
    pane?: string;
    /**
     * The name of the series&apos; stack.
     */
    stack?: string;
  }
  /**
   * A base object for gauge value and subvalue indicators. Includes the properties of indicators of all types.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface CommonIndicator {
    /**
     * Specifies the length of an arrow for the indicator of the textCloud type in pixels.
     */
    arrowLength?: number;
    /**
     * Specifies the background color for the indicator of the rangeBar type.
     */
    backgroundColor?: string;
    /**
     * Specifies the base value for the indicator of the rangeBar type.
     */
    baseValue?: number;
    /**
     * Specifies a radius small enough for the indicator to begin adapting.
     */
    beginAdaptingAtRadius?: number;
    /**
     * Specifies a color of the indicator.
     */
    color?: string;
    /**
     * Specifies the orientation of the rangeBar indicator. Applies only if the geometry.orientation property is &apos;vertical&apos;.
     */
    horizontalOrientation?: DevExpress.common.HorizontalEdge;
    /**
     * Specifies the distance between the needle and the center of a gauge for the indicator of a needle-like type.
     */
    indentFromCenter?: number;
    /**
     * Specifies the indicator length.
     */
    length?: number;
    /**
     * Specifies the distance between the indicator and the invisible scale line.
     */
    offset?: number;
    /**
     * Sets the palette to be used to colorize indicators differently.
     */
    palette?: Array<string> | DevExpress.common.charts.Palette;
    /**
     * Specifies the second color for the indicator of the twoColorNeedle type.
     */
    secondColor?: string;
    /**
     * Specifies the length of a twoNeedleColor type indicator tip as a percentage.
     */
    secondFraction?: number;
    /**
     * Specifies the range bar size for an indicator of the rangeBar type.
     */
    size?: number;
    /**
     * Specifies the inner diameter in pixels, so that the spindle has the shape of a ring.
     */
    spindleGapSize?: number;
    /**
     * Specifies the spindle&apos;s diameter in pixels for the indicator of a needle-like type.
     */
    spindleSize?: number;
    /**
     * Specifies the appearance of the text displayed in an indicator of the rangeBar type.
     */
    text?: {
      /**
       * Specifies a callback function that returns the text to be displayed in an indicator.
       */
      customizeText?: (indicatedValue: {
        value?: number;
        valueText?: string;
      }) => string;
      /**
       * Specifies font properties for the text displayed by the indicator.
       */
      font?: Font;
      /**
       * Formats a value before it is displayed in an indicator. Accepts only numeric formats.
       */
      format?: DevExpress.ui.Format;
      /**
       * Specifies the range bar&apos;s label indent in pixels.
       */
      indent?: number;
    };
    /**
     * Specifies the orientation of the rangeBar indicator. Applies only if the geometry.orientation property is &apos;horizontal&apos;.
     */
    verticalOrientation?: DevExpress.common.VerticalEdge;
    /**
     * Specifies the width of an indicator in pixels.
     */
    width?: number;
  }
  /**
   * Gets the current palette&apos;s name.
   */
  export function currentPalette(): string;
  /**
   * Changes the current palette for all data visualization UI components on the page.
   */
  export function currentPalette(paletteName: string): void;
  /**
   * Gets the current theme&apos;s name.
   */
  export function currentTheme(): string;
  /**
   * Changes the current theme for all data visualization UI components on the page. The color scheme is defined separately.
   */
  export function currentTheme(platform: string, colorScheme: string): void;
  /**
   * Changes the current theme for all data visualization UI components on the page.
   */
  export function currentTheme(theme: string): void;
  /**
   * The BarGauge UI component contains several circular bars that each indicates a single value.
   */
  export class dxBarGauge extends BaseWidget<dxBarGaugeOptions> {
    /**
     * Gets all the values.
     */
    values(): Array<number>;
    /**
     * Updates all the values.
     */
    values(values: Array<number>): void;
  }
  module dxBarGauge {
    export type DisposingEvent = DevExpress.events.EventInfo<dxBarGauge>;
    export type DrawnEvent = DevExpress.events.EventInfo<dxBarGauge>;
    export type ExportedEvent = DevExpress.events.EventInfo<dxBarGauge>;
    export type ExportingEvent = DevExpress.events.EventInfo<dxBarGauge> &
      DevExpress.viz.BaseWidget.ExportInfo;
    export type FileSavingEvent =
      DevExpress.viz.BaseWidget.FileSavingEventInfo<dxBarGauge>;
    export type IncidentOccurredEvent =
      DevExpress.events.EventInfo<dxBarGauge> &
        DevExpress.viz.BaseWidget.IncidentInfo;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxBarGauge>;
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxBarGauge> &
      DevExpress.events.ChangedOptionInfo;
    export type Properties = dxBarGaugeOptions;
    export type TooltipHiddenEvent = DevExpress.events.EventInfo<dxBarGauge> &
      TooltipInfo;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export interface TooltipInfo {
      target?: any;
    }
    export type TooltipShownEvent = DevExpress.events.EventInfo<dxBarGauge> &
      TooltipInfo;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxBarGaugeLegend extends BaseLegend {
    /**
     * Specifies the hint that appears when a user hovers the mouse pointer over a legend item.
     */
    customizeHint?: (arg: { item?: BarGaugeBarInfo; text?: string }) => string;
    /**
     * Allows you to change the order, text, and visibility of legend items.
     */
    customizeItems?: (
      items: Array<DevExpress.viz.dxBarGauge.LegendItem>
    ) => Array<DevExpress.viz.dxBarGauge.LegendItem>;
    /**
     * Customizes the text displayed by legend items.
     */
    customizeText?: (arg: { item?: BarGaugeBarInfo; text?: string }) => string;
    /**
     * Formats the item text before it is displayed. Accepts only numeric formats. When unspecified, it inherits the label&apos;s format.
     */
    itemTextFormat?: DevExpress.ui.Format;
    /**
     * Specifies an SVG element that serves as a custom legend item marker.
     */
    markerTemplate?:
      | DevExpress.core.template
      | ((
          legendItem: DevExpress.viz.dxBarGauge.LegendItem,
          element: SVGGElement
        ) => string | DevExpress.core.UserDefinedElement<SVGElement>);
    /**
     * Specifies the legend&apos;s visibility.
     */
    visible?: boolean;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxBarGaugeLoadingIndicator
    extends BaseWidgetLoadingIndicator {
    /**
     * 
     */
    enabled?: boolean;
  }
  /**
   * @deprecated use Properties instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxBarGaugeOptions extends BaseWidgetOptions<dxBarGauge> {
    /**
     * Specifies animation properties.
     */
    animation?: any;
    /**
     * Specifies a color for the remaining segment of the bar&apos;s track.
     */
    backgroundColor?: string;
    /**
     * Specifies a distance between bars in pixels.
     */
    barSpacing?: number;
    /**
     * Specifies a base value for bars.
     */
    baseValue?: number;
    /**
     * Specifies an end value for the gauge&apos;s invisible scale.
     */
    endValue?: number;
    /**
     * Defines the shape of the gauge&apos;s arc.
     */
    geometry?: {
      /**
       * Specifies the end angle of the bar gauge&apos;s arc.
       */
      endAngle?: number;
      /**
       * Specifies the start angle of the bar gauge&apos;s arc.
       */
      startAngle?: number;
    };
    /**
     * Specifies the properties of the labels that accompany gauge bars.
     */
    label?: {
      /**
       * Specifies a color for the label connector text.
       */
      connectorColor?: string;
      /**
       * Specifies the width of the label connector in pixels.
       */
      connectorWidth?: number;
      /**
       * Specifies a callback function that returns a text for labels.
       */
      customizeText?: (barValue: {
        value?: number;
        valueText?: string;
      }) => string;
      /**
       * Specifies font properties for bar labels.
       */
      font?: Font;
      /**
       * Formats a value before it is displayed in a label. Accepts only numeric formats.
       */
      format?: DevExpress.ui.Format;
      /**
       * Specifies the distance between the upper bar and bar labels in pixels.
       */
      indent?: number;
      /**
       * Specifies whether bar labels appear on a gauge or not.
       */
      visible?: boolean;
    };
    /**
     * Configures the legend.
     */
    legend?: dxBarGaugeLegend;
    /**
     * Configures the loading indicator.
     */
    loadingIndicator?: dxBarGaugeLoadingIndicator;
    /**
     * A function that is executed when a tooltip becomes hidden.
     */
    onTooltipHidden?: (e: DevExpress.viz.dxBarGauge.TooltipHiddenEvent) => void;
    /**
     * A function that is executed when a tooltip appears.
     */
    onTooltipShown?: (e: DevExpress.viz.dxBarGauge.TooltipShownEvent) => void;
    /**
     * Sets the palette to be used for colorizing bars in the gauge.
     */
    palette?: Array<string> | DevExpress.common.charts.Palette;
    /**
     * Specifies what to do with colors in the palette when their number is less than the number of bars in the gauge.
     */
    paletteExtensionMode?: DevExpress.common.charts.PaletteExtensionMode;
    /**
     * Defines the radius of the bar that is closest to the center relatively to the radius of the topmost bar.
     */
    relativeInnerRadius?: number;
    /**
     * Specifies how the UI component should behave when bar labels overlap: hide certain labels or leave them overlapped.
     */
    resolveLabelOverlapping?: DevExpress.common.charts.LabelOverlap;
    /**
     * Specifies a start value for the gauge&apos;s invisible scale.
     */
    startValue?: number;
    /**
     * Configures tooltips.
     */
    tooltip?: dxBarGaugeTooltip;
    /**
     * Specifies the array of values to be indicated on a bar gauge.
     */
    values?: Array<number>;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxBarGaugeTooltip extends BaseWidgetTooltip {
    /**
     * Specifies a custom template for a tooltip.
     */
    contentTemplate?:
      | DevExpress.core.template
      | ((
          scaleValue: { value?: number; valueText?: string; index?: number },
          element: DevExpress.core.DxElement
        ) => string | DevExpress.core.UserDefinedElement);
    /**
     * Allows you to change tooltip appearance.
     */
    customizeTooltip?: (scaleValue: {
      value?: number;
      valueText?: string;
      index?: number;
    }) => any;
    /**
     * Allows users to interact with the tooltip content.
     */
    interactive?: boolean;
  }
  /**
   * The Bullet UI component is useful when you need to compare a single measure to a target value. The UI component comprises a horizontal bar indicating the measure and a vertical line indicating the target value.
   */
  export class dxBullet extends BaseSparkline<dxBulletOptions> {}
  module dxBullet {
    export type DisposingEvent = DevExpress.events.EventInfo<dxBullet>;
    export type DrawnEvent = DevExpress.events.EventInfo<dxBullet>;
    export type ExportedEvent = DevExpress.events.EventInfo<dxBullet>;
    export type ExportingEvent = DevExpress.events.EventInfo<dxBullet> &
      DevExpress.viz.BaseWidget.ExportInfo;
    export type FileSavingEvent =
      DevExpress.viz.BaseWidget.FileSavingEventInfo<dxBullet>;
    export type IncidentOccurredEvent = DevExpress.events.EventInfo<dxBullet> &
      DevExpress.viz.BaseWidget.IncidentInfo;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxBullet>;
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxBullet> &
      DevExpress.events.ChangedOptionInfo;
    export type Properties = dxBulletOptions;
    export type TooltipHiddenEvent = DevExpress.events.EventInfo<dxBullet>;
    export type TooltipShownEvent = DevExpress.events.EventInfo<dxBullet>;
  }
  /**
   * @deprecated use Properties instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxBulletOptions extends BaseSparklineOptions<dxBullet> {
    /**
     * Specifies a color for the bullet bar.
     */
    color?: string;
    /**
     * Specifies an end value for the invisible scale.
     */
    endScaleValue?: number;
    /**
     * Specifies whether or not to show the target line.
     */
    showTarget?: boolean;
    /**
     * Specifies whether or not to show the line indicating zero on the invisible scale.
     */
    showZeroLevel?: boolean;
    /**
     * Specifies a start value for the invisible scale.
     */
    startScaleValue?: number;
    /**
     * Specifies the value indicated by the target line.
     */
    target?: number;
    /**
     * Specifies a color for both the target and zero level lines.
     */
    targetColor?: string;
    /**
     * Specifies the width of the target line.
     */
    targetWidth?: number;
    /**
     * Specifies the primary value indicated by the bullet bar.
     */
    value?: number;
  }
  /**
   * The Chart is a UI component that visualizes data from a local or remote storage using a great variety of series types along with different interactive elements, such as tooltips, crosshair pointer, legend, etc.
   */
  export class dxChart extends BaseChart<dxChartOptions> {
    /**
     * Gets the argument axis.
     */
    getArgumentAxis(): chartAxisObject;
    /**
     * Gets a value axis.
     */
    getValueAxis(): chartAxisObject;
    /**
     * Gets a value axis with the specified name.
     */
    getValueAxis(name: string): chartAxisObject;
    /**
     * Resets the visual ranges of both axes to the data range or to the whole range if it is within the data range.
     */
    resetVisualRange(): void;
    /**
     * Sets the argument axis&apos; start and end values.
     */
    zoomArgument(
      startValue: number | Date | string,
      endValue: number | Date | string
    ): void;
  }
  module dxChart {
    export type AggregatedPointsPosition = 'betweenTicks' | 'crossTicks';
    export type ArgumentAxisClickEvent = DevExpress.events.NativeEventInfo<
      dxChart,
      MouseEvent | PointerEvent
    > & {
      readonly argument: Date | number | string;
    };
    export type ChartBubbleSeriesAggregationMethod = 'avg' | 'custom';
    export type ChartFinancialSeriesAggregationMethod = 'ohlc' | 'custom';
    export type ChartLabelDisplayMode = 'rotate' | 'stagger' | 'standard';
    export type ChartRangeSeriesAggregationMethod = 'range' | 'custom';
    export type ChartSeriesAggregationMethod =
      | 'avg'
      | 'count'
      | 'max'
      | 'min'
      | 'ohlc'
      | 'range'
      | 'sum'
      | 'custom';
    export type ChartSingleValueSeriesAggregationMethod =
      | 'avg'
      | 'count'
      | 'max'
      | 'min'
      | 'sum'
      | 'custom';
    export type ChartTooltipLocation = 'center' | 'edge';
    export type ChartZoomAndPanMode = 'both' | 'none' | 'pan' | 'zoom';
    export type DisposingEvent = DevExpress.events.EventInfo<dxChart>;
    export type DoneEvent = DevExpress.events.EventInfo<dxChart>;
    export type DrawnEvent = DevExpress.events.EventInfo<dxChart>;
    export type EventKeyModifier = 'alt' | 'ctrl' | 'meta' | 'shift';
    export type ExportedEvent = DevExpress.events.EventInfo<dxChart>;
    export type ExportingEvent = DevExpress.events.EventInfo<dxChart> &
      DevExpress.viz.BaseWidget.ExportInfo;
    export type FileSavingEvent =
      DevExpress.viz.BaseWidget.FileSavingEventInfo<dxChart>;
    export type FinancialChartReductionLevel =
      | 'close'
      | 'high'
      | 'low'
      | 'open';
    export type IncidentOccurredEvent = DevExpress.events.EventInfo<dxChart> &
      DevExpress.viz.BaseWidget.IncidentInfo;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxChart>;
    export type LegendClickEvent = DevExpress.events.Cancelable &
      DevExpress.events.NativeEventInfo<dxChart, MouseEvent | PointerEvent> & {
        readonly target: chartSeriesObject;
      };
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxChart> &
      DevExpress.events.ChangedOptionInfo;
    export type PointClickEvent = DevExpress.events.Cancelable &
      DevExpress.events.NativeEventInfo<dxChart, MouseEvent | PointerEvent> &
      DevExpress.viz.BaseChart.PointInteractionInfo;
    export type PointHoverChangedEvent = DevExpress.events.EventInfo<dxChart> &
      DevExpress.viz.BaseChart.PointInteractionInfo;
    export type PointSelectionChangedEvent =
      DevExpress.events.EventInfo<dxChart> &
        DevExpress.viz.BaseChart.PointInteractionInfo;
    export type Properties = dxChartOptions;
    export type SeriesClickEvent = DevExpress.events.NativeEventInfo<
      dxChart,
      MouseEvent | PointerEvent
    > & {
      readonly target: chartSeriesObject;
    };
    export type SeriesHoverChangedEvent = DevExpress.events.EventInfo<dxChart> &
      SeriesInteractionInfo;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    interface SeriesInteractionInfo {
      target: chartSeriesObject;
    }
    export type SeriesSelectionChangedEvent =
      DevExpress.events.EventInfo<dxChart> & SeriesInteractionInfo;
    export type TooltipHiddenEvent = DevExpress.events.EventInfo<dxChart> &
      DevExpress.viz.BaseChart.TooltipInfo;
    export type TooltipShownEvent = DevExpress.events.EventInfo<dxChart> &
      DevExpress.viz.BaseChart.TooltipInfo;
    export type ZoomEndEvent = DevExpress.events.Cancelable &
      DevExpress.events.NativeEventInfo<dxChart, MouseEvent | TouchEvent> & {
        readonly rangeStart: Date | number;
        readonly rangeEnd: Date | number;
        readonly axis: chartAxisObject;
        readonly range: VizRange;
        readonly previousRange: VizRange;
        readonly actionType: DevExpress.common.charts.ZoomPanAction;
        readonly zoomFactor: number;
        readonly shift: number;
      };
    export type ZoomStartEvent = DevExpress.events.Cancelable &
      DevExpress.events.NativeEventInfo<dxChart, MouseEvent | TouchEvent> & {
        readonly axis: chartAxisObject;
        readonly range: VizRange;
        readonly actionType?: DevExpress.common.charts.ZoomPanAction;
      };
  }
  /**
   * 
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartAnnotationConfig
    extends dxChartCommonAnnotationConfig {
    /**
     * Specifies the annotation&apos;s name.
     */
    name?: string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartArgumentAxis extends dxChartCommonAxisSettings {
    /**
     * Aggregates series points that fall into the same category.
     */
    aggregateByCategory?: boolean;
    /**
     * Specifies the length of aggregation intervals in pixels. Does not apply if aggregateByCategory is true. May be ignored in favor of the aggregationInterval property.
     */
    aggregationGroupWidth?: number;
    /**
     * Specifies the length of aggregation intervals in axis units. Applies only to axes of continuous and logarithmic types.
     */
    aggregationInterval?: VizTimeInterval;
    /**
     * Casts arguments to a specified data type.
     */
    argumentType?: DevExpress.common.charts.ChartsDataType;
    /**
     * Specifies the minimum distance between two neighboring major ticks in pixels. Applies only to the axes of the &apos;continuous&apos; and &apos;logarithmic&apos; types.
     */
    axisDivisionFactor?: number;
    /**
     * Declares a scale break collection. Applies only if the axis&apos; type is &apos;continuous&apos; or &apos;logarithmic&apos;.
     */
    breaks?: Array<ScaleBreak>;
    /**
     * Specifies the order of categories on an axis of the &apos;discrete&apos; type.
     */
    categories?: Array<number | string | Date>;
    /**
     * Specifies the appearance of those constant lines that belong to the argument axis.
     */
    constantLineStyle?: dxChartArgumentAxisConstantLineStyle;
    /**
     * Declares a collection of constant lines belonging to the argument axis.
     */
    constantLines?: Array<dxChartArgumentAxisConstantLines>;
    /**
     * Specifies whether to force the axis to start and end on ticks.
     */
    endOnTick?: boolean;
    /**
     * Dates to be excluded from the axis when workdaysOnly is true.
     */
    holidays?: Array<Date | string> | Array<number>;
    /**
     * Specifies chart elements to be highlighted when a user points to an axis label.
     */
    hoverMode?: DevExpress.common.charts.ArgumentAxisHoverMode;
    /**
     * Configures the labels of the argument axis.
     */
    label?: dxChartArgumentAxisLabel;
    /**
     * Specifies a value used to calculate the range on a logarithmic axis within which the axis should be linear. Applies only if the data source contains negative values or zeroes.
     */
    linearThreshold?: number;
    /**
     * Specifies the value to be raised to a power when generating ticks for an axis of the &apos;logarithmic&apos; type.
     */
    logarithmBase?: number;
    /**
     * Specifies the minimum length of the visual range.
     */
    minVisualRangeLength?: VizTimeInterval;
    /**
     * Specifies how many minor ticks to place between two neighboring major ticks.
     */
    minorTickCount?: number;
    /**
     * Specifies the interval between minor ticks. Applies only to the axes of the &apos;continuous&apos; type.
     */
    minorTickInterval?: VizTimeInterval;
    /**
     * Relocates the argument axis.
     */
    position?: DevExpress.common.Position;
    /**
     * Specifies the position of the argument axis on the value axis.
     */
    customPosition?: number | Date | string;
    /**
     * Specifies the name of a value axis on which the argument axis should be positioned. Applies only to multi-axis charts.
     */
    customPositionAxis?: string;
    /**
     * Specifies the shift in pixels of the argument axis.
     */
    offset?: number;
    /**
     * Dates to be included on the axis when workdaysOnly is true.
     */
    singleWorkdays?: Array<Date | string> | Array<number>;
    /**
     * Declares a collection of strips belonging to the argument axis.
     */
    strips?: Array<dxChartArgumentAxisStrips>;
    /**
     * Specifies the interval between major ticks.
     */
    tickInterval?: VizTimeInterval;
    /**
     * Configures the axis title.
     */
    title?: dxChartArgumentAxisTitle;
    /**
     * Specifies the type of the argument axis.
     */
    type?: DevExpress.common.charts.AxisScaleType;
    /**
     * Defines the axis&apos; displayed range. Cannot be wider than the wholeRange.
     */
    visualRange?: VizRange | Array<number | string | Date>;
    /**
     * Specifies how the axis&apos;s visual range should behave when chart data is updated.
     */
    visualRangeUpdateMode?: DevExpress.common.charts.VisualRangeUpdateMode;
    /**
     * Defines the range where the axis can be zoomed and panned.
     */
    wholeRange?: VizRange | Array<number | string | Date>;
    /**
     * Specifies which days are workdays. The array can contain values from 0 (Sunday) to 6 (Saturday). Applies only if workdaysOnly is true.
     */
    workWeek?: Array<number>;
    /**
     * Leaves only workdays on the axis: the work week days plus single workdays minus holidays. Applies only if the axis&apos; argumentType is &apos;datetime&apos;.
     */
    workdaysOnly?: boolean;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartArgumentAxisConstantLines
    extends dxChartCommonAxisSettingsConstantLineStyle {
    /**
     * Specifies whether to display the constant line behind or in front of the series.
     */
    displayBehindSeries?: boolean;
    /**
     * Specifies whether to extend the axis&apos;s default visual range to display the constant line.
     */
    extendAxis?: boolean;
    /**
     * Configures the constant line label.
     */
    label?: dxChartArgumentAxisConstantLinesLabel;
    /**
     * Specifies the value indicated by a constant line. Setting this property is necessary.
     */
    value?: number | Date | string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartArgumentAxisConstantLinesLabel
    extends dxChartCommonAxisSettingsConstantLineStyleLabel {
    /**
     * Aligns constant line labels in the horizontal direction.
     */
    horizontalAlignment?: DevExpress.common.HorizontalAlignment;
    /**
     * Specifies the text of a constant line label. By default, equals to the value of the constant line.
     */
    text?: string;
    /**
     * Aligns constant line labels in the vertical direction.
     */
    verticalAlignment?: DevExpress.common.VerticalAlignment;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartArgumentAxisConstantLineStyle
    extends dxChartCommonAxisSettingsConstantLineStyle {
    /**
     * Specifies the appearance of the labels of those constant lines that belong to the argument axis.
     */
    label?: dxChartArgumentAxisConstantLineStyleLabel;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartArgumentAxisConstantLineStyleLabel
    extends dxChartCommonAxisSettingsConstantLineStyleLabel {
    /**
     * Aligns constant line labels in the horizontal direction.
     */
    horizontalAlignment?: DevExpress.common.HorizontalAlignment;
    /**
     * Aligns constant line labels in the vertical direction.
     */
    verticalAlignment?: DevExpress.common.VerticalAlignment;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartArgumentAxisLabel
    extends dxChartCommonAxisSettingsLabel {
    /**
     * Specifies the hint that appears when a user points to an axis label.
     */
    customizeHint?: (argument: {
      value?: Date | number | string;
      valueText?: string;
    }) => string;
    /**
     * Customizes the text displayed by axis labels.
     */
    customizeText?: (argument: {
      value?: Date | number | string;
      valueText?: string;
    }) => string;
    /**
     * Formats a value before it is displayed in an axis label.
     */
    format?: DevExpress.ui.Format;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartArgumentAxisStrips
    extends dxChartCommonAxisSettingsStripStyle {
    /**
     * Specifies the color of the strip.
     */
    color?: string;
    /**
     * Along with the startValue property, limits the strip.
     */
    endValue?: number | Date | string;
    /**
     * Configures the strip label.
     */
    label?: dxChartArgumentAxisStripsLabel;
    /**
     * Along with the endValue property, limits the strip.
     */
    startValue?: number | Date | string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartArgumentAxisStripsLabel
    extends dxChartCommonAxisSettingsStripStyleLabel {
    /**
     * Specifies the text of the strip label.
     */
    text?: string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartArgumentAxisTitle
    extends dxChartCommonAxisSettingsTitle {
    /**
     * Specifies the text of the axis title.
     */
    text?: string;
  }
  /**
   * 
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartCommonAnnotationConfig
    extends BaseChartAnnotationConfig {
    /**
     * Specifies the name of the value axis on which the value is specified. Useful for a multi-axis chart.
     */
    axis?: string;
    /**
     * Customizes the text and appearance of the annotation&apos;s tooltip.
     */
    customizeTooltip?: (annotation: dxChartAnnotationConfig | any) => any;
    /**
     * Specifies a custom template for the annotation. Applies only if the type is &apos;custom&apos;.
     */
    template?:
      | DevExpress.core.template
      | ((
          annotation: dxChartAnnotationConfig | any,
          element: SVGGElement
        ) => string | DevExpress.core.UserDefinedElement<SVGElement>);
    /**
     * Specifies a custom template for an annotation&apos;s tooltip.
     */
    tooltipTemplate?:
      | DevExpress.core.template
      | ((
          annotation: dxChartAnnotationConfig | any,
          element: DevExpress.core.DxElement
        ) => string | DevExpress.core.UserDefinedElement);
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartCommonAxisSettings {
    /**
     * Specifies whether to allow decimal values on the axis. When false, the axis contains integer values only.
     */
    allowDecimals?: boolean;
    /**
     * Configures the scale breaks&apos; appearance.
     */
    breakStyle?: {
      /**
       * Specifies the scale breaks&apos; color.
       */
      color?: string;
      /**
       * Specifies the scale breaks&apos; line style.
       */
      line?: DevExpress.common.charts.ScaleBreakLineStyle;
      /**
       * Specifies the scale breaks&apos; width in pixels.
       */
      width?: number;
    };
    /**
     * Specifies the color of the axis line.
     */
    color?: string;
    /**
     * Configures the appearance of all constant lines in the UI component.
     */
    constantLineStyle?: dxChartCommonAxisSettingsConstantLineStyle;
    /**
     * Specifies whether ticks and grid lines should cross axis labels or lie between them. Applies only to the axes of the &apos;discrete&apos; type.
     */
    discreteAxisDivisionMode?: DevExpress.common.charts.DiscreteAxisDivisionMode;
    /**
     * 
     */
    aggregatedPointsPosition?: DevExpress.viz.dxChart.AggregatedPointsPosition;
    /**
     * Specifies whether to force the axis to start and end on ticks.
     */
    endOnTick?: boolean;
    /**
     * Configures the grid.
     */
    grid?: {
      /**
       * Specifies the color of grid lines.
       */
      color?: string;
      /**
       * Specifies how transparent grid lines should be.
       */
      opacity?: number;
      /**
       * Makes grid lines visible.
       */
      visible?: boolean;
      /**
       * Specifies the width of grid lines in pixels.
       */
      width?: number;
    };
    /**
     * Inverts the axis.
     */
    inverted?: boolean;
    /**
     * Configures axis labels.
     */
    label?: dxChartCommonAxisSettingsLabel;
    /**
     * Controls the empty space between the maximum series points and the axis. Applies only to the axes of the &apos;continuous&apos; and &apos;logarithmic&apos; type.
     */
    maxValueMargin?: number;
    /**
     * Controls the empty space between the minimum series points and the axis. Applies only to the axes of the &apos;continuous&apos; and &apos;logarithmic&apos; type.
     */
    minValueMargin?: number;
    /**
     * Configures the minor grid.
     */
    minorGrid?: {
      /**
       * Specifies a color for the lines of the minor grid.
       */
      color?: string;
      /**
       * Specifies how transparent the lines of the minor grid should be.
       */
      opacity?: number;
      /**
       * Makes the minor grid visible.
       */
      visible?: boolean;
      /**
       * Specifies a width for the lines of the minor grid in pixels.
       */
      width?: number;
    };
    /**
     * Configures the appearance of minor axis ticks.
     */
    minorTick?: {
      /**
       * Specifies the color of minor ticks.
       */
      color?: string;
      /**
       * Specifies the length of minor ticks in pixels.
       */
      length?: number;
      /**
       * Specifies how transparent minor ticks should be.
       */
      opacity?: number;
      /**
       * Shifts minor ticks from the reference position.
       */
      shift?: number;
      /**
       * Makes minor ticks visible.
       */
      visible?: boolean;
      /**
       * Specifies the width of minor ticks in pixels.
       */
      width?: number;
    };
    /**
     * Specifies how transparent the axis line should be.
     */
    opacity?: number;
    /**
     * Reserves a pixel-measured space for the axis.
     */
    placeholderSize?: number;
    /**
     * Configures the appearance of strips.
     */
    stripStyle?: dxChartCommonAxisSettingsStripStyle;
    /**
     * Configures the appearance of major axis ticks.
     */
    tick?: {
      /**
       * Specifies the color of ticks.
       */
      color?: string;
      /**
       * Specifies the length of ticks in pixels.
       */
      length?: number;
      /**
       * Specifies how transparent ticks should be.
       */
      opacity?: number;
      /**
       * Shifts ticks from the reference position.
       */
      shift?: number;
      /**
       * Makes ticks visible.
       */
      visible?: boolean;
      /**
       * Specifies the width of ticks in pixels.
       */
      width?: number;
    };
    /**
     * Configures axis titles.
     */
    title?: dxChartCommonAxisSettingsTitle;
    /**
     * Adds an empty space between the axis and the minimum and maximum series points.
     */
    valueMarginsEnabled?: boolean;
    /**
     * Makes the axis line visible.
     */
    visible?: boolean;
    /**
     * Specifies the width of the axis line in pixels.
     */
    width?: number;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartCommonAxisSettingsConstantLineStyle {
    /**
     * Specifies the color of constant lines.
     */
    color?: string;
    /**
     * Specifies the dash style of constant lines.
     */
    dashStyle?: DevExpress.common.charts.DashStyle;
    /**
     * Configures constant line labels.
     */
    label?: dxChartCommonAxisSettingsConstantLineStyleLabel;
    /**
     * Generates a pixel-measured empty space between the left/right side of a constant line and the constant line label.
     */
    paddingLeftRight?: number;
    /**
     * Generates a pixel-measured empty space between the top/bottom side of a constant line and the constant line label.
     */
    paddingTopBottom?: number;
    /**
     * Specifies the width of constant lines in pixels.
     */
    width?: number;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartCommonAxisSettingsConstantLineStyleLabel {
    /**
     * Specifies font properties for constant line labels.
     */
    font?: Font;
    /**
     * Specifies the position of constant line labels on the chart plot.
     */
    position?: DevExpress.common.charts.RelativePosition;
    /**
     * Makes constant line labels visible.
     */
    visible?: boolean;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartCommonAxisSettingsLabel {
    /**
     * Specifies a custom template for axis labels.
     */
    template?:
      | DevExpress.core.template
      | ((
          data: object,
          element: SVGGElement
        ) => string | DevExpress.core.UserDefinedElement<SVGElement>);
    /**
     * Aligns axis labels in relation to ticks.
     */
    alignment?: DevExpress.common.HorizontalAlignment;
    /**
     * Allows you to rotate or stagger axis labels. Applies to the horizontal axis only.
     */
    displayMode?: DevExpress.viz.dxChart.ChartLabelDisplayMode;
    /**
     * Specifies font properties for axis labels.
     */
    font?: Font;
    /**
     * Adds a pixel-measured empty space between an axis and its labels.
     */
    indentFromAxis?: number;
    /**
     * Decides how to arrange axis labels when there is not enough space to keep all of them.
     */
    overlappingBehavior?: DevExpress.common.charts.ChartsAxisLabelOverlap;
    /**
     * Specifies the position of labels relative to the chart or its axis.
     */
    position?:
      | DevExpress.common.charts.RelativePosition
      | DevExpress.common.Position;
    /**
     * Specifies the rotation angle of axis labels. Applies only if displayMode or overlappingBehavior is &apos;rotate&apos;.
     */
    rotationAngle?: number;
    /**
     * Adds a pixel-measured empty space between two staggered rows of axis labels. Applies only if displayMode or overlappingBehavior is &apos;stagger&apos;.
     */
    staggeringSpacing?: number;
    /**
     * Specifies what to do with axis labels that overflow the allocated space after applying wordWrap: hide, truncate them and display an ellipsis, or do nothing.
     */
    textOverflow?: DevExpress.common.charts.TextOverflow;
    /**
     * Shows/hides axis labels.
     */
    visible?: boolean;
    /**
     * Specifies how to wrap texts that do not fit into a single line.
     */
    wordWrap?: DevExpress.common.charts.WordWrap;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartCommonAxisSettingsStripStyle {
    /**
     * Configures the appearance of strip labels.
     */
    label?: dxChartCommonAxisSettingsStripStyleLabel;
    /**
     * Generates a pixel-measured empty space between the left/right border of a strip and the strip label.
     */
    paddingLeftRight?: number;
    /**
     * Generates a pixel-measured empty space between the top/bottom border of a strip and the strip label.
     */
    paddingTopBottom?: number;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartCommonAxisSettingsStripStyleLabel {
    /**
     * Specifies font properties for strip labels.
     */
    font?: Font;
    /**
     * Aligns strip labels in the horizontal direction.
     */
    horizontalAlignment?: DevExpress.common.HorizontalAlignment;
    /**
     * Aligns strip labels in the vertical direction.
     */
    verticalAlignment?: DevExpress.common.VerticalAlignment;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartCommonAxisSettingsTitle {
    /**
     * Aligns the axis title to the left, center, or right of the axis.
     */
    alignment?: DevExpress.common.HorizontalAlignment;
    /**
     * Specifies font properties for the axis title.
     */
    font?: Font;
    /**
     * Adds a pixel-measured empty space between the axis title and axis labels.
     */
    margin?: number;
    /**
     * Specifies what to do with the axis title when it overflows the allocated space after applying wordWrap: hide, truncate them and display an ellipsis, or do nothing.
     */
    textOverflow?: DevExpress.common.charts.TextOverflow;
    /**
     * Specifies how to wrap the axis title if it does not fit into a single line.
     */
    wordWrap?: DevExpress.common.charts.WordWrap;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartCommonPaneSettings {
    /**
     * Specifies the color of the pane&apos;s background.
     */
    backgroundColor?: string;
    /**
     * Configures the pane border.
     */
    border?: {
      /**
       * Shows/hides the bottom border of the pane. Applies only when the border.visible property is true.
       */
      bottom?: boolean;
      /**
       * Specifies the color of the pane border.
       */
      color?: string;
      /**
       * Specifies the dash style of the pane border.
       */
      dashStyle?: DevExpress.common.charts.DashStyle;
      /**
       * Shows/hides the left border of the pane. Applies only when the border.visible property is true.
       */
      left?: boolean;
      /**
       * Specifies how transparent the pane border should be.
       */
      opacity?: number;
      /**
       * Shows/hides the right border of the pane. Applies only when the border.visible property is true.
       */
      right?: boolean;
      /**
       * Shows/hides the top border of the pane. Applies only when the border.visible property is true.
       */
      top?: boolean;
      /**
       * Shows the pane border.
       */
      visible?: boolean;
      /**
       * Specifies the width of the pane border in pixels.
       */
      width?: number;
    };
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartCommonSeriesSettings
    extends dxChartSeriesTypesCommonSeries {
    /**
     * Defines common settings for all area series.
     */
    area?: any;
    /**
     * Defines common settings for all bar series.
     */
    bar?: any;
    /**
     * Defines common settings for all bubble series.
     */
    bubble?: any;
    /**
     * Defines common settings for all candlestick series.
     */
    candlestick?: any;
    /**
     * Defines common settings for all full-stacked area series.
     */
    fullstackedarea?: any;
    /**
     * Defines common settings for all full-stacked bar series.
     */
    fullstackedbar?: any;
    /**
     * Defines common settings for all full-stacked line series.
     */
    fullstackedline?: any;
    /**
     * Defines common settings for all full-stacked spline series.
     */
    fullstackedspline?: any;
    /**
     * Defines common settings for all full-stacked spline area series.
     */
    fullstackedsplinearea?: any;
    /**
     * Defines common settings for all line series.
     */
    line?: any;
    /**
     * Defines common settings for all range area series.
     */
    rangearea?: any;
    /**
     * Defines common settings for all range bar series.
     */
    rangebar?: any;
    /**
     * Defines common settings for all scatter series.
     */
    scatter?: any;
    /**
     * Defines common settings for all spline series.
     */
    spline?: any;
    /**
     * Defines common settings for all spline area series.
     */
    splinearea?: any;
    /**
     * Defines common settings for all stacked area series.
     */
    stackedarea?: any;
    /**
     * Defines common settings for all stacked bar series.
     */
    stackedbar?: any;
    /**
     * Defines common settings for all stacked line series.
     */
    stackedline?: any;
    /**
     * Defines common settings for all stacked spline series.
     */
    stackedspline?: any;
    /**
     * Defines common settings for all stacked spline area series.
     */
    stackedsplinearea?: any;
    /**
     * Defines common settings for all step area series.
     */
    steparea?: any;
    /**
     * Defines common settings for all step line series.
     */
    stepline?: any;
    /**
     * Defines common settings for all stock series.
     */
    stock?: any;
    /**
     * Specifies the type of the series.
     */
    type?: SeriesType;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartLegend extends BaseChartLegend {
    /**
     * Specifies the text for a hint that appears when a user hovers the mouse pointer over a legend item.
     */
    customizeHint?: (seriesInfo: {
      seriesName?: any;
      seriesIndex?: number;
      seriesColor?: string;
    }) => string;
    /**
     * Specifies a callback function that returns the text to be displayed by a legend item.
     */
    customizeText?: (seriesInfo: {
      seriesName?: any;
      seriesIndex?: number;
      seriesColor?: string;
    }) => string;
    /**
     * Specifies what series elements to highlight when a corresponding item in the legend is hovered over.
     */
    hoverMode?: DevExpress.common.charts.LegendHoverMode;
    /**
     * Specifies whether the legend is located outside or inside the chart&apos;s plot.
     */
    position?: DevExpress.common.charts.RelativePosition;
  }
  /**
   * @deprecated use Properties instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartOptions extends BaseChartOptions<dxChart> {
    /**
     * Specifies whether to adjust the value axis&apos;s visualRange when the argument axis is being zoomed or panned.
     */
    adjustOnZoom?: boolean;
    /**
     * Specifies the annotation collection.
     */
    annotations?: Array<dxChartAnnotationConfig | any>;
    /**
     * Configures the argument axis.
     */
    argumentAxis?: dxChartArgumentAxis;
    /**
     * Specifies whether to hide series point markers automatically to reduce visual clutter.
     */
    autoHidePointMarkers?: boolean;
    /**
     * Controls the padding and consequently the width of a group of bars with the same argument using relative units. Ignored if the barGroupWidth property is set.
     */
    barGroupPadding?: number;
    /**
     * Specifies a fixed width for groups of bars with the same argument, measured in pixels. Takes precedence over the barGroupPadding property.
     */
    barGroupWidth?: number;
    /**
     * Specifies settings common for all annotations in the chart.
     */
    commonAnnotationSettings?: dxChartCommonAnnotationConfig;
    /**
     * Defines common settings for both the argument and value axis in a chart.
     */
    commonAxisSettings?: dxChartCommonAxisSettings;
    /**
     * Defines common settings for all panes in a chart.
     */
    commonPaneSettings?: dxChartCommonPaneSettings;
    /**
     * Specifies settings common for all series in the chart.
     */
    commonSeriesSettings?: dxChartCommonSeriesSettings;
    /**
     * Colors the background of the chart container.
     */
    containerBackgroundColor?: string;
    /**
     * Configures the crosshair feature.
     */
    crosshair?: {
      /**
       * Specifies the color of the crosshair lines.
       */
      color?: string;
      /**
       * Specifies the dash style of the crosshair lines.
       */
      dashStyle?: DevExpress.common.charts.DashStyle;
      /**
       * Enables the crosshair.
       */
      enabled?: boolean;
      /**
       * Configures the horizontal crosshair line individually.
       */
      horizontalLine?:
        | {
            /**
             * Specifies the color of the horizontal crosshair line.
             */
            color?: string;
            /**
             * Specifies the dash style of the horizontal crosshair line.
             */
            dashStyle?: DevExpress.common.charts.DashStyle;
            /**
             * Configures the label that belongs to the horizontal crosshair line.
             */
            label?: {
              /**
               * Paints the background of the label that belongs to the horizontal crosshair line.
               */
              backgroundColor?: string;
              /**
               * Customizes the text displayed by the label that belongs to the horizontal crosshair line.
               */
              customizeText?: (info: {
                value?: Date | number | string;
                valueText?: string;
                point?: chartPointObject;
              }) => string;
              /**
               * Specifies font properties for the label of the horizontal crosshair line.
               */
              font?: Font;
              /**
               * Formats a point value before it is displayed in the crosshair label.
               */
              format?: DevExpress.ui.Format;
              /**
               * Makes the label of the horizontal crosshair line visible. Applies only if the crosshair feature is enabled and the horizontal line is visible.
               */
              visible?: boolean;
            };
            /**
             * Specifies how transparent the horizontal crosshair line should be.
             */
            opacity?: number;
            /**
             * Specifies whether to show the horizontal crosshair line or not.
             */
            visible?: boolean;
            /**
             * Specifies the width of the horizontal crosshair line in pixels.
             */
            width?: number;
          }
        | boolean;
      /**
       * Configures the crosshair labels.
       */
      label?: {
        /**
         * Paints the background of the crosshair labels.
         */
        backgroundColor?: string;
        /**
         * Customizes the text displayed by the crosshair labels.
         */
        customizeText?: (info: {
          value?: Date | number | string;
          valueText?: string;
          point?: chartPointObject;
        }) => string;
        /**
         * Specifies font properties for the crosshair labels.
         */
        font?: Font;
        /**
         * Formats a point value/argument before it is displayed in the crosshair label.
         */
        format?: DevExpress.ui.Format;
        /**
         * Makes the crosshair labels visible. Applies only if the crosshair feature is enabled.
         */
        visible?: boolean;
      };
      /**
       * Specifies how transparent the crosshair lines should be.
       */
      opacity?: number;
      /**
       * Configures the vertical crosshair line individually.
       */
      verticalLine?:
        | {
            /**
             * Specifies the color of the vertical crosshair line.
             */
            color?: string;
            /**
             * Specifies the dash style of the vertical crosshair line.
             */
            dashStyle?: DevExpress.common.charts.DashStyle;
            /**
             * Configures the label that belongs to the vertical crosshair line.
             */
            label?: {
              /**
               * Paints the background of the label that belongs to the vertical crosshair line.
               */
              backgroundColor?: string;
              /**
               * Customizes the text displayed by the label that belongs to the vertical crosshair line.
               */
              customizeText?: (info: {
                value?: Date | number | string;
                valueText?: string;
                point?: chartPointObject;
              }) => string;
              /**
               * Specifies font properties for the label of the vertical crosshair line.
               */
              font?: Font;
              /**
               * Formats the point argument before it is displayed in the crosshair label.
               */
              format?: DevExpress.ui.Format;
              /**
               * Makes the label of the vertical crosshair line visible. Applies only if the crosshair feature is enabled and the vertical line is visible.
               */
              visible?: boolean;
            };
            /**
             * Specifies how transparent the vertical crosshair line should be.
             */
            opacity?: number;
            /**
             * Specifies whether to show the vertical crosshair line or not.
             */
            visible?: boolean;
            /**
             * Specifies the width of the vertical crosshair line in pixels.
             */
            width?: number;
          }
        | boolean;
      /**
       * Specifies the width of the crosshair lines.
       */
      width?: number;
    };
    /**
     * Customizes an individual annotation.
     */
    customizeAnnotation?: (
      annotation: dxChartAnnotationConfig | any
    ) => dxChartAnnotationConfig;
    /**
     * Processes data before visualizing it.
     */
    dataPrepareSettings?: {
      /**
       * Validates the type of each value coming from the data source.
       */
      checkTypeForAllData?: boolean;
      /**
       * Converts data coming from a data source into a data type supported by the axis.
       */
      convertToAxisDataType?: boolean;
      /**
       * Specifies the sorting order in which series points should be drawn.
       */
      sortingMethod?: boolean | ((a: any, b: any) => number);
    };
    /**
     * Specifies which pane should be used by default.
     */
    defaultPane?: string;
    /**
     * Specifies the properties of a chart&apos;s legend.
     */
    legend?: dxChartLegend;
    /**
     * Specifies a coefficient determining the diameter of the largest bubble.
     */
    maxBubbleSize?: number;
    /**
     * Specifies the diameter of the smallest bubble measured in pixels.
     */
    minBubbleSize?: number;
    /**
     * Forces the UI component to treat negative values as zeroes. Applies to stacked-like series only.
     */
    negativesAsZeroes?: boolean;
    /**
     * A function that is executed when a label on the argument axis is clicked or tapped.
     */
    onArgumentAxisClick?:
      | ((e: DevExpress.viz.dxChart.ArgumentAxisClickEvent) => void)
      | string;
    /**
     * A function that is executed when a legend item is clicked or tapped.
     */
    onLegendClick?:
      | ((e: DevExpress.viz.dxChart.LegendClickEvent) => void)
      | string;
    /**
     * A function that is executed when a series is clicked or tapped.
     */
    onSeriesClick?:
      | ((e: DevExpress.viz.dxChart.SeriesClickEvent) => void)
      | string;
    /**
     * A function that is executed after the pointer enters or leaves a series.
     */
    onSeriesHoverChanged?: (
      e: DevExpress.viz.dxChart.SeriesHoverChangedEvent
    ) => void;
    /**
     * A function that is executed when a series is selected or selection is canceled.
     */
    onSeriesSelectionChanged?: (
      e: DevExpress.viz.dxChart.SeriesSelectionChangedEvent
    ) => void;
    /**
     * A function that is executed when zooming or panning ends.
     */
    onZoomEnd?: (e: DevExpress.viz.dxChart.ZoomEndEvent) => void;
    /**
     * A function that is executed when zooming or panning begins.
     */
    onZoomStart?: (e: DevExpress.viz.dxChart.ZoomStartEvent) => void;
    /**
     * Declares a collection of panes.
     */
    panes?: dxChartPanes | Array<dxChartPanes>;
    /**
     * Specifies whether panes can be resized if other chart elements require more space after zooming or panning.
     */
    resizePanesOnZoom?: boolean;
    /**
     * Specifies how the chart must behave when series point labels overlap.
     */
    resolveLabelOverlapping?: DevExpress.common.charts.ChartsLabelOverlap;
    /**
     * Swaps the axes around making the value axis horizontal and the argument axis vertical.
     */
    rotated?: boolean;
    /**
     * Specifies the settings of the scroll bar.
     */
    scrollBar?: {
      /**
       * Specifies the color of the scroll bar.
       */
      color?: string;
      /**
       * Specifies the spacing between the scroll bar and the chart&apos;s plot in pixels.
       */
      offset?: number;
      /**
       * Specifies the opacity of the scroll bar.
       */
      opacity?: number;
      /**
       * Specifies the position of the scroll bar in the chart.
       */
      position?: DevExpress.common.Position;
      /**
       * Specifies whether the scroll bar is visible or not.
       */
      visible?: boolean;
      /**
       * Specifies the width of the scroll bar in pixels.
       */
      width?: number;
    };
    /**
     * Specifies properties for Chart UI component series.
     */
    series?: ChartSeries | Array<ChartSeries>;
    /**
     * Specifies whether a single series or multiple series can be selected in the chart.
     */
    seriesSelectionMode?: DevExpress.common.SingleOrMultiple;
    /**
     * Defines properties for the series template.
     */
    seriesTemplate?: {
      /**
       * Specifies a callback function that returns a series object with individual series settings.
       */
      customizeSeries?: (seriesName: any) => ChartSeries;
      /**
       * Specifies a data source field that represents the series name.
       */
      nameField?: string;
    };
    /**
     * Specifies whether a point should remain in the hover state when the mouse pointer moves away.
     */
    stickyHovering?: boolean;
    /**
     * Indicates whether or not to synchronize value axes when they are displayed on a single pane.
     */
    synchronizeMultiAxes?: boolean;
    /**
     * Configures tooltips.
     */
    tooltip?: dxChartTooltip;
    /**
     * Configures the value axis.
     */
    valueAxis?: dxChartValueAxis | Array<dxChartValueAxis>;
    /**
     * Configures zooming and panning.
     */
    zoomAndPan?: {
      /**
       * Specifies whether users can use the mouse wheel to zoom the chart. Applies only if zoom is allowed for the argument or value axis.
       */
      allowMouseWheel?: boolean;
      /**
       * Specifies whether users can use touch gestures to zoom or pan the chart. Applies only if zoom and pan are allowed for the argument or value axis.
       */
      allowTouchGestures?: boolean;
      /**
       * Specifies whether users are allowed to zoom and/or pan the argument axis.
       */
      argumentAxis?: DevExpress.viz.dxChart.ChartZoomAndPanMode;
      /**
       * Configures the box that appears when users zoom the chart by selecting an area with the drag gesture. Applies only if dragToZoom is true.
       */
      dragBoxStyle?: {
        /**
         * Specifies the drag box&apos;s color.
         */
        color?: string;
        /**
         * Specifies the drag box&apos;s transparency.
         */
        opacity?: number;
      };
      /**
       * Enables users to zoom the chart by selecting an area with the drag gesture. Applies only on devices that use a mouse.
       */
      dragToZoom?: boolean;
      /**
       * Specifies the key that enables panning when dragToZoom is true. Applies only on devices that use a mouse.
       */
      panKey?: DevExpress.viz.dxChart.EventKeyModifier;
      /**
       * Specifies whether users are allowed to zoom and/or pan the value axis.
       */
      valueAxis?: DevExpress.viz.dxChart.ChartZoomAndPanMode;
    };
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartPanes extends dxChartCommonPaneSettings {
    /**
     * Specifies the pane&apos;s height (or width when the chart is rotated) in a multi-pane chart.
     */
    height?: number | string;
    /**
     * Specifies the name of the pane.
     */
    name?: string;
  }
  /**
   * This section lists objects that define properties used to configure series of specific types.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypes {
    /**
     * Describes settings supported by a series of the area type.
     */
    AreaSeries?: dxChartSeriesTypesAreaSeries;
    /**
     * Describes settings supported by a series of the bar type.
     */
    BarSeries?: dxChartSeriesTypesBarSeries;
    /**
     * Describes settings supported by a series of the bubble type.
     */
    BubbleSeries?: dxChartSeriesTypesBubbleSeries;
    /**
     * Describes settings supported by a series of the candlestick type.
     */
    CandleStickSeries?: dxChartSeriesTypesCandleStickSeries;
    /**
     * An object that defines configuration properties for chart series.
     */
    CommonSeries?: dxChartSeriesTypesCommonSeries;
    /**
     * Describes settings supported by a series of the full-stacked area type.
     */
    FullStackedAreaSeries?: dxChartSeriesTypesFullStackedAreaSeries;
    /**
     * Describes settings supported by a series of the full-stacked bar type.
     */
    FullStackedBarSeries?: dxChartSeriesTypesFullStackedBarSeries;
    /**
     * Describes settings supported by a series of the full-stacked line type.
     */
    FullStackedLineSeries?: dxChartSeriesTypesFullStackedLineSeries;
    /**
     * Describes settings supported by a series of the full-stacked spline area type.
     */
    FullStackedSplineAreaSeries?: dxChartSeriesTypesFullStackedSplineAreaSeries;
    /**
     * Describes settings supported by a series of the full-stacked spline area type. An object defining a series of the fullStackedSpline type.
     */
    FullStackedSplineSeries?: dxChartSeriesTypesFullStackedSplineSeries;
    /**
     * Describes settings supported by a series of the line type.
     */
    LineSeries?: dxChartSeriesTypesLineSeries;
    /**
     * Describes settings supported by a series of the range area type.
     */
    RangeAreaSeries?: dxChartSeriesTypesRangeAreaSeries;
    /**
     * Describes settings supported by a series of the range bar type.
     */
    RangeBarSeries?: dxChartSeriesTypesRangeBarSeries;
    /**
     * Describes settings supported by a series of the scatter type.
     */
    ScatterSeries?: dxChartSeriesTypesScatterSeries;
    /**
     * Describes settings supported by a series of the spline area type.
     */
    SplineAreaSeries?: dxChartSeriesTypesSplineAreaSeries;
    /**
     * Describes settings supported by a series of the spline type.
     */
    SplineSeries?: dxChartSeriesTypesSplineSeries;
    /**
     * Describes settings supported by a series of the stacked area type.
     */
    StackedAreaSeries?: dxChartSeriesTypesStackedAreaSeries;
    /**
     * Describes settings supported by a series of the stacked bar type.
     */
    StackedBarSeries?: dxChartSeriesTypesStackedBarSeries;
    /**
     * Describes settings supported by a series of the stacked line type.
     */
    StackedLineSeries?: dxChartSeriesTypesStackedLineSeries;
    /**
     * Describes settings supported by a series of the stacked spline area type.
     */
    StackedSplineAreaSeries?: dxChartSeriesTypesStackedSplineAreaSeries;
    /**
     * Describes settings supported by a series of the stacked spline type.
     */
    StackedSplineSeries?: dxChartSeriesTypesStackedSplineSeries;
    /**
     * Describes settings supported by a series of the step rea type.
     */
    StepAreaSeries?: dxChartSeriesTypesStepAreaSeries;
    /**
     * Describes settings supported by a series of the step line type.
     */
    StepLineSeries?: dxChartSeriesTypesStepLineSeries;
    /**
     * Describes settings supported by a series of the stock type.
     */
    StockSeries?: dxChartSeriesTypesStockSeries;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesAreaSeries
    extends dxChartSeriesTypesCommonSeries {
    /**
     * Configures data aggregation for the series.
     */
    aggregation?: dxChartSeriesTypesAreaSeriesAggregation;
    /**
     * Specifies series elements to be highlighted when a user points to a series.
     */
    hoverMode?: 'nearestPoint' | 'includePoints' | 'excludePoints' | 'none';
    /**
     * Configures point labels.
     */
    label?: dxChartSeriesTypesAreaSeriesLabel;
    /**
     * Configures series points in scatter, line- and area-like series.
     */
    point?: dxChartSeriesTypesAreaSeriesPoint;
    /**
     * Specifies series elements to be highlighted when a user selects a series.
     */
    selectionMode?: 'includePoints' | 'excludePoints' | 'none';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesAreaSeriesAggregation
    extends dxChartSeriesTypesCommonSeriesAggregation {
    /**
     * Specifies how to aggregate series points.
     */
    method?: DevExpress.viz.dxChart.ChartSingleValueSeriesAggregationMethod;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesAreaSeriesLabel
    extends dxChartSeriesTypesCommonSeriesLabel {
    /**
     * Customizes the text displayed by point labels.
     */
    customizeText?: (pointInfo: any) => string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesAreaSeriesPoint
    extends dxChartSeriesTypesCommonSeriesPoint {
    /**
     * Makes the series points visible.
     */
    visible?: boolean;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesBarSeries
    extends dxChartSeriesTypesCommonSeries {
    /**
     * Configures data aggregation for the series.
     */
    aggregation?: dxChartSeriesTypesBarSeriesAggregation;
    /**
     * Specifies series elements to be highlighted when a user points to a series.
     */
    hoverMode?: 'onlyPoint' | 'allSeriesPoints' | 'allArgumentPoints' | 'none';
    /**
     * Configures point labels.
     */
    label?: dxChartSeriesTypesBarSeriesLabel;
    /**
     * Specifies series elements to be highlighted when a user selects a bar.
     */
    selectionMode?:
      | 'onlyPoint'
      | 'allSeriesPoints'
      | 'allArgumentPoints'
      | 'none';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesBarSeriesAggregation
    extends dxChartSeriesTypesCommonSeriesAggregation {
    /**
     * Specifies how to aggregate series points.
     */
    method?: DevExpress.viz.dxChart.ChartSingleValueSeriesAggregationMethod;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesBarSeriesLabel
    extends dxChartSeriesTypesCommonSeriesLabel {
    /**
     * Customizes the text displayed by point labels.
     */
    customizeText?: (pointInfo: any) => string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesBubbleSeries
    extends dxChartSeriesTypesCommonSeries {
    /**
     * Configures data aggregation for the series.
     */
    aggregation?: dxChartSeriesTypesBubbleSeriesAggregation;
    /**
     * Specifies series elements to be highlighted when a user points to a series.
     */
    hoverMode?: 'onlyPoint' | 'allSeriesPoints' | 'allArgumentPoints' | 'none';
    /**
     * Configures point labels.
     */
    label?: dxChartSeriesTypesBubbleSeriesLabel;
    /**
     * Specifies series elements to be highlighted when a user selects a bubble.
     */
    selectionMode?:
      | 'onlyPoint'
      | 'allSeriesPoints'
      | 'allArgumentPoints'
      | 'none';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesBubbleSeriesAggregation
    extends dxChartSeriesTypesCommonSeriesAggregation {
    /**
     * Specifies how to aggregate series points.
     */
    method?: DevExpress.viz.dxChart.ChartBubbleSeriesAggregationMethod;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesBubbleSeriesLabel
    extends dxChartSeriesTypesCommonSeriesLabel {
    /**
     * Customizes the text displayed by point labels.
     */
    customizeText?: (pointInfo: any) => string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesCandleStickSeries
    extends dxChartSeriesTypesCommonSeries {
    /**
     * Configures data aggregation for the series.
     */
    aggregation?: dxChartSeriesTypesCandleStickSeriesAggregation;
    /**
     * Specifies which data source field provides arguments for series points.
     */
    argumentField?: string;
    /**
     * Specifies series elements to be highlighted when a user pauses on a series.
     */
    hoverMode?: 'onlyPoint' | 'allSeriesPoints' | 'allArgumentPoints' | 'none';
    /**
     * Configures the appearance adopted by the series when a user points to it.
     */
    hoverStyle?: dxChartSeriesTypesCandleStickSeriesHoverStyle;
    /**
     * Configures point labels.
     */
    label?: dxChartSeriesTypesCandleStickSeriesLabel;
    /**
     * Specifies series elements to be highlighted when a user selects a point.
     */
    selectionMode?:
      | 'onlyPoint'
      | 'allSeriesPoints'
      | 'allArgumentPoints'
      | 'none';
    /**
     * Configures the appearance adopted by the series when a user selects it.
     */
    selectionStyle?: dxChartSeriesTypesCandleStickSeriesSelectionStyle;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesCandleStickSeriesAggregation
    extends dxChartSeriesTypesCommonSeriesAggregation {
    /**
     * Specifies how to aggregate series points.
     */
    method?: DevExpress.viz.dxChart.ChartFinancialSeriesAggregationMethod;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesCandleStickSeriesHoverStyle
    extends dxChartSeriesTypesCommonSeriesHoverStyle {
    /**
     * Configures hatching that applies when a user points to the series.
     */
    hatching?: dxChartSeriesTypesCandleStickSeriesHoverStyleHatching;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesCandleStickSeriesHoverStyleHatching
    extends dxChartSeriesTypesCommonSeriesHoverStyleHatching {
    /**
     * Specifies the direction of hatching lines.
     */
    direction?: DevExpress.common.charts.HatchDirection;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesCandleStickSeriesLabel
    extends dxChartSeriesTypesCommonSeriesLabel {
    /**
     * Customizes the text displayed by point labels.
     */
    customizeText?: (pointInfo: any) => string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesCandleStickSeriesSelectionStyle
    extends dxChartSeriesTypesCommonSeriesSelectionStyle {
    /**
     * Configures hatching that applies when a user selects the series.
     */
    hatching?: dxChartSeriesTypesCandleStickSeriesSelectionStyleHatching;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesCandleStickSeriesSelectionStyleHatching
    extends dxChartSeriesTypesCommonSeriesSelectionStyleHatching {
    /**
     * Specifies the direction of hatching lines.
     */
    direction?: DevExpress.common.charts.HatchDirection;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesCommonSeries {
    /**
     * Configures data aggregation for the series.
     */
    aggregation?: dxChartSeriesTypesCommonSeriesAggregation;
    /**
     * Specifies which data source field provides arguments for series points.
     */
    argumentField?: string;
    /**
     * Binds the series to a value axis.
     */
    axis?: string;
    /**
     * Allows you to group bar series so that bars with the same argument overlap.
     */
    barOverlapGroup?: string;
    /**
     * Controls the padding and consequently the width of all bars in a series using relative units. Ignored if the barWidth property is set.
     */
    barPadding?: number;
    /**
     * Specifies a fixed width for all bars in a series, measured in pixels. Takes precedence over the barPadding property.
     */
    barWidth?: number;
    /**
     * Configures the series border (in area-like series) or the series point border (in bar-like and bubble series).
     */
    border?: dxChartSeriesTypesCommonSeriesBorder;
    /**
     * Specifies which data source field provides close values for points of a financial series.
     */
    closeValueField?: string;
    /**
     * Specifies the color of the series.
     */
    color?: string;
    /**
     * Makes bars look rounded. Applies only to bar-like series.
     */
    cornerRadius?: number;
    /**
     * Specifies the dash style of the series line. Applies only to line-like series.
     */
    dashStyle?: DevExpress.common.charts.DashStyle;
    /**
     * Specifies which data source field provides high values for points of a financial series.
     */
    highValueField?: string;
    /**
     * Specifies series elements to be highlighted when a user points to a series.
     */
    hoverMode?: DevExpress.common.charts.SeriesHoverMode;
    /**
     * Configures the appearance adopted by the series when a user points to it.
     */
    hoverStyle?: dxChartSeriesTypesCommonSeriesHoverStyle;
    /**
     * Specifies whether the series should ignore null data points.
     */
    ignoreEmptyPoints?: boolean;
    /**
     * Specifies a filling color for the body of a series point that visualizes a non-reduced value. Applies only to candlestick series.
     */
    innerColor?: string;
    /**
     * Configures point labels.
     */
    label?: dxChartSeriesTypesCommonSeriesLabel;
    /**
     * Specifies which data source field provides low values for points of a financial series.
     */
    lowValueField?: string;
    /**
     * Specifies a limit for the number of point labels.
     */
    maxLabelCount?: number;
    /**
     * Specifies the minimal possible height (or length if the chart is rotated) of a bar in pixels. Applies only to bar-like series.
     */
    minBarSize?: number;
    /**
     * Specifies how transparent the series should be.
     */
    opacity?: number;
    /**
     * Specifies which data source field provides open values for points of a financial series.
     */
    openValueField?: string;
    /**
     * Specifies which pane the series should belong to. Accepts the name of the pane.
     */
    pane?: string;
    /**
     * Configures series points in scatter, line- and area-like series.
     */
    point?: dxChartSeriesTypesCommonSeriesPoint;
    /**
     * Coupled with the rangeValue2Field property, specifies which data source field provides values for a range-like series.
     */
    rangeValue1Field?: string;
    /**
     * Coupled with the rangeValue1Field property, specifies which data source field provides values for a range-like series.
     */
    rangeValue2Field?: string;
    /**
     * Specifies reduction properties for financial series.
     */
    reduction?: {
      /**
       * Specifies a color for the points whose price has decreased in comparison to the price of the previous point.
       */
      color?: string;
      /**
       * Specifies whether high, low, open or close prices of points should be compared.
       */
      level?: DevExpress.viz.dxChart.FinancialChartReductionLevel;
    };
    /**
     * Specifies series elements to be highlighted when a user selects a series.
     */
    selectionMode?: DevExpress.common.charts.SeriesSelectionMode;
    /**
     * Configures the appearance adopted by the series when a user selects it.
     */
    selectionStyle?: dxChartSeriesTypesCommonSeriesSelectionStyle;
    /**
     * Specifies whether to show the series in the legend or not.
     */
    showInLegend?: boolean;
    /**
     * Specifies which data source field provides size values for bubbles. Required by and applies only to bubble series.
     */
    sizeField?: string;
    /**
     * Specifies which stack the series should belongs to. Applies only to stacked bar and full-stacked bar series.
     */
    stack?: string;
    /**
     * Specifies which data source field provides auxiliary data for series points.
     */
    tagField?: string;
    /**
     * Configures error bars.
     */
    valueErrorBar?: {
      /**
       * Specifies the color of error bars.
       */
      color?: string;
      /**
       * Specifies whether error bars must be displayed in full or partially.
       */
      displayMode?: DevExpress.common.charts.ValueErrorBarDisplayMode;
      /**
       * Specifies the length of the lines that indicate error bar edges.
       */
      edgeLength?: number;
      /**
       * Specifies which data field provides high error values.
       */
      highValueField?: string;
      /**
       * Specifies the width of the error bar line.
       */
      lineWidth?: number;
      /**
       * Specifies which data field provides low error values.
       */
      lowValueField?: string;
      /**
       * Specifies how trasparent error bars should be.
       */
      opacity?: number;
      /**
       * Specifies how error bar values must be calculated.
       */
      type?: DevExpress.common.charts.ValueErrorBarType;
      /**
       * Specifies the value to be used for generating error bars.
       */
      value?: number;
    };
    /**
     * Specifies which data source field provides values for series points.
     */
    valueField?: string;
    /**
     * Specifies whether the series is visible or not.
     */
    visible?: boolean;
    /**
     * Specifies the width of the series line in pixels. Applies only to line-like series.
     */
    width?: number;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesCommonSeriesAggregation {
    /**
     * Specifies a custom aggregate function. Applies only if the aggregation method is &apos;custom&apos;.
     */
    calculate?: (
      aggregationInfo: chartPointAggregationInfoObject,
      series: chartSeriesObject
    ) => any | Array<any>;
    /**
     * Enables data aggregation for the series.
     */
    enabled?: boolean;
    /**
     * Specifies how to aggregate series points.
     */
    method?: DevExpress.viz.dxChart.ChartSeriesAggregationMethod;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesCommonSeriesBorder {
    /**
     * Colors the series border (in area-like series) or the series point border (in bar-like and bubble series).
     */
    color?: string;
    /**
     * Sets a dash style for the series border (in area-like series) or for the series point border (in bar-like and bubble series).
     */
    dashStyle?: DevExpress.common.charts.DashStyle;
    /**
     * Shows the series border (in area-like series) or the series point border (in bar-like and bubble series).
     */
    visible?: boolean;
    /**
     * Sets a pixel-measured width for the series border (in area-like series) or for the series point border (in bar-like and bubble series).
     */
    width?: number;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesCommonSeriesHoverStyle {
    /**
     * Configures the appearance adopted by the series border (in area-like series) or the series point border (in bar-like and bubble series) when a user points to the series.
     */
    border?: dxChartSeriesTypesCommonSeriesHoverStyleBorder;
    /**
     * Specifies the color of the series in the hovered state.
     */
    color?: string;
    /**
     * Specifies the dash style of the series line when the series is in the hovered state. Applies only to line-like series.
     */
    dashStyle?: DevExpress.common.charts.DashStyle;
    /**
     * Configures hatching that applies when a user points to the series.
     */
    hatching?: dxChartSeriesTypesCommonSeriesHoverStyleHatching;
    /**
     * Specifies the pixel-measured width of the series line when the series is in the hovered state.
     */
    width?: number;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesCommonSeriesHoverStyleBorder {
    /**
     * Colors the series border (in area-like series) or the series point border (in bar-like and bubble series) when a user points to the series.
     */
    color?: string;
    /**
     * Sets a dash style for the series border (in area-like series) or for the series point border (in bar-like and bubble series) when a user points to the series.
     */
    dashStyle?: DevExpress.common.charts.DashStyle;
    /**
     * Shows the series border (in area-like series) or the series point border (in bar-like and bubble series) when a user points to the series.
     */
    visible?: boolean;
    /**
     * Sets a pixel-measured width for the series border (in area-like series) or for the series point border (in bar-like and bubble series) when a user points to the series.
     */
    width?: number;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesCommonSeriesHoverStyleHatching {
    /**
     * Specifies the direction of hatching lines.
     */
    direction?: DevExpress.common.charts.HatchDirection;
    /**
     * Specifies how transparent hatching lines should be.
     */
    opacity?: number;
    /**
     * Specifies the distance between two side-by-side hatching lines in pixels.
     */
    step?: number;
    /**
     * Specifies the width of hatching lines in pixels.
     */
    width?: number;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesCommonSeriesLabel {
    /**
     * Aligns point labels in relation to their points.
     */
    alignment?: DevExpress.common.HorizontalAlignment;
    /**
     * Formats the point argument before it is displayed in the point label. To format the point value, use the format property.
     */
    argumentFormat?: DevExpress.ui.Format;
    /**
     * Colors the point labels&apos; background. The default color is inherited from the points.
     */
    backgroundColor?: string;
    /**
     * Configures the borders of point labels.
     */
    border?: {
      /**
       * Colors the border.
       */
      color?: string;
      /**
       * Specifies the dash style of the border.
       */
      dashStyle?: DevExpress.common.charts.DashStyle;
      /**
       * Makes the border visible.
       */
      visible?: boolean;
      /**
       * Specifies the width of the border in pixels.
       */
      width?: number;
    };
    /**
     * Configures the label connectors.
     */
    connector?: {
      /**
       * Colors the connectors.
       */
      color?: string;
      /**
       * Makes the connectors visible. Applies only if label.visible is set to true.
       */
      visible?: boolean;
      /**
       * Specifies the width of the connectors in pixels.
       */
      width?: number;
    };
    /**
     * Customizes the text displayed by point labels.
     */
    customizeText?: (pointInfo: any) => string;
    /**
     * Specifies font properties for point labels.
     */
    font?: Font;
    /**
     * Formats the point value before it is displayed in the point label.
     */
    format?: DevExpress.ui.Format;
    /**
     * Along with verticalOffset, shifts point labels from their initial positions.
     */
    horizontalOffset?: number;
    /**
     * Specifies whether to display point labels inside or outside of series points. Applies only to bubble, range-like and bar-like series.
     */
    position?: DevExpress.common.charts.RelativePosition;
    /**
     * Rotates point labels.
     */
    rotationAngle?: number;
    /**
     * Specifies whether or not to show labels for points with zero value. Applies only to bar-like series.
     */
    showForZeroValues?: boolean;
    /**
     * Along with horizontalOffset, shifts point labels from their initial positions.
     */
    verticalOffset?: number;
    /**
     * Makes the point labels visible.
     */
    visible?: boolean;
    /**
     * 
     */
    displayFormat?: string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesCommonSeriesPoint {
    /**
     * Configures the appearance of the series point border in scatter, line- and area-like series.
     */
    border?: {
      /**
       * Colors the border.
       */
      color?: string;
      /**
       * Makes the border visible.
       */
      visible?: boolean;
      /**
       * Sets the width of the border in pixels.
       */
      width?: number;
    };
    /**
     * Colors the series points.
     */
    color?: string;
    /**
     * Specifies series elements to be highlighted when a user pauses on a series point.
     */
    hoverMode?: DevExpress.common.charts.PointInteractionMode;
    /**
     * Configures the appearance adopted by a series point when a user pauses on it.
     */
    hoverStyle?: {
      /**
       * Configures the appearance of the point border when a user pauses on the point.
       */
      border?: {
        /**
         * Specifies the color of the point border when the point is in the hovered state.
         */
        color?: string;
        /**
         * Makes the border visible when a user pauses on the series point.
         */
        visible?: boolean;
        /**
         * Specifies the width of the point border when the point is in the hovered state.
         */
        width?: number;
      };
      /**
       * Specifies the color of series points in the hovered state.
       */
      color?: string;
      /**
       * Specfies the diameter of series points in the hovered state.
       */
      size?: number;
    };
    /**
     * Substitutes the standard point symbols with an image.
     */
    image?:
      | string
      | {
          /**
           * Specifies the height of the image used instead of a point marker.
           */
          height?:
            | number
            | {
                /**
                 * Specifies the height of the image that represents the maximum point in a range area series.
                 */
                rangeMaxPoint?: number;
                /**
                 * Specifies the height of the image that represents the minimum point in a range area series.
                 */
                rangeMinPoint?: number;
              };
          /**
           * Specifies the URL of the image to be used as a point marker.
           */
          url?:
            | string
            | {
                /**
                 * Specifies the URL of the image to be used as a maximum point marker.
                 */
                rangeMaxPoint?: string;
                /**
                 * Specifies the URL of the image to be used as a maximum point marker.
                 */
                rangeMinPoint?: string;
              };
          /**
           * Specifies the width of an image that is used as a point marker.
           */
          width?:
            | number
            | {
                /**
                 * Specifies the width of the image that represents the maximum point in a range area series.
                 */
                rangeMaxPoint?: number;
                /**
                 * Specifies the width of the image that represents the minimum point in a range area series.
                 */
                rangeMinPoint?: number;
              };
        };
    /**
     * Specifies series elements to be highlighted when a user selects a series point.
     */
    selectionMode?: DevExpress.common.charts.PointInteractionMode;
    /**
     * Configures the appearance of a selected series point.
     */
    selectionStyle?: {
      /**
       * Configures the border of a selected point.
       */
      border?: {
        /**
         * Specifies the color of the point border when the point is selected.
         */
        color?: string;
        /**
         * Makes the border of a selected point visible.
         */
        visible?: boolean;
        /**
         * Specifies the width of the point border when the point is selected.
         */
        width?: number;
      };
      /**
       * Specifies the color of series points in the selected state.
       */
      color?: string;
      /**
       * Specfies the diameter of series points in the selected state.
       */
      size?: number;
    };
    /**
     * Specifies the diameter of series points in pixels.
     */
    size?: number;
    /**
     * Specifies which symbol should represent series points in scatter, line- and area-like series.
     */
    symbol?: DevExpress.common.charts.PointSymbol;
    /**
     * Makes the series points visible.
     */
    visible?: boolean;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesCommonSeriesSelectionStyle {
    /**
     * Configures the appearance adopted by the series border (in area-like series) or the series point border (in bar-like and bubble series) when a user selects the series.
     */
    border?: dxChartSeriesTypesCommonSeriesSelectionStyleBorder;
    /**
     * Specifies the color of the series in the selected state.
     */
    color?: string;
    /**
     * Specifies the dash style of the series line when the series is in the selected state. Applies only to line-like series.
     */
    dashStyle?: DevExpress.common.charts.DashStyle;
    /**
     * Configures hatching that applies when a user selects the series.
     */
    hatching?: dxChartSeriesTypesCommonSeriesSelectionStyleHatching;
    /**
     * Specifies the pixel-measured width of the series line when the series is in the selected state.
     */
    width?: number;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesCommonSeriesSelectionStyleBorder {
    /**
     * Colors the series border (in area-like series) or the series point border (in bar-like and bubble series) when a user selects the series.
     */
    color?: string;
    /**
     * Sets a dash style for the series border (in area-like series) or for the series point border (in bar-like and bubble series) when a user selects the series.
     */
    dashStyle?: DevExpress.common.charts.DashStyle;
    /**
     * Shows the series border (in area-like series) or the series point border (in bar-like and bubble series) when a user selects the series.
     */
    visible?: boolean;
    /**
     * Sets a pixel-measured width for the series border (in area-like series) or for the series point border (in bar-like and bubble series) when a user selects the series.
     */
    width?: number;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesCommonSeriesSelectionStyleHatching {
    /**
     * Specifies the direction of hatching lines.
     */
    direction?: DevExpress.common.charts.HatchDirection;
    /**
     * Specifies how transparent hatching lines should be.
     */
    opacity?: number;
    /**
     * Specifies the distance between two side-by-side hatching lines in pixels.
     */
    step?: number;
    /**
     * Specifies the width of hatching lines in pixels.
     */
    width?: number;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesFullStackedAreaSeries
    extends dxChartSeriesTypesCommonSeries {
    /**
     * Configures data aggregation for the series.
     */
    aggregation?: dxChartSeriesTypesFullStackedAreaSeriesAggregation;
    /**
     * Specifies series elements to be highlighted when a user points to a series.
     */
    hoverMode?: 'nearestPoint' | 'includePoints' | 'excludePoints' | 'none';
    /**
     * An object defining the label configuration properties.
     */
    label?: dxChartSeriesTypesFullStackedAreaSeriesLabel;
    /**
     * Configures series points in scatter, line- and area-like series.
     */
    point?: dxChartSeriesTypesFullStackedAreaSeriesPoint;
    /**
     * Specifies series elements to be highlighted when a user selects a series.
     */
    selectionMode?: 'includePoints' | 'excludePoints' | 'none';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesFullStackedAreaSeriesAggregation
    extends dxChartSeriesTypesCommonSeriesAggregation {
    /**
     * Specifies how to aggregate series points.
     */
    method?: DevExpress.viz.dxChart.ChartSingleValueSeriesAggregationMethod;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesFullStackedAreaSeriesLabel
    extends dxChartSeriesTypesCommonSeriesLabel {
    /**
     * Customizes the text displayed by point labels.
     */
    customizeText?: (pointInfo: any) => string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesFullStackedAreaSeriesPoint
    extends dxChartSeriesTypesCommonSeriesPoint {
    /**
     * Makes the series points visible.
     */
    visible?: boolean;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesFullStackedBarSeries
    extends dxChartSeriesTypesCommonSeries {
    /**
     * Configures data aggregation for the series.
     */
    aggregation?: dxChartSeriesTypesFullStackedBarSeriesAggregation;
    /**
     * Specifies series elements to be highlighted when a user points to a series.
     */
    hoverMode?: 'onlyPoint' | 'allSeriesPoints' | 'allArgumentPoints' | 'none';
    /**
     * Configures point labels.
     */
    label?: dxChartSeriesTypesFullStackedBarSeriesLabel;
    /**
     * Specifies series elements to be highlighted when a user selects a bar.
     */
    selectionMode?:
      | 'onlyPoint'
      | 'allSeriesPoints'
      | 'allArgumentPoints'
      | 'none';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesFullStackedBarSeriesAggregation
    extends dxChartSeriesTypesCommonSeriesAggregation {
    /**
     * Specifies how to aggregate series points.
     */
    method?: DevExpress.viz.dxChart.ChartSingleValueSeriesAggregationMethod;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesFullStackedBarSeriesLabel
    extends dxChartSeriesTypesCommonSeriesLabel {
    /**
     * Customizes the text displayed by point labels.
     */
    customizeText?: (pointInfo: any) => string;
    /**
     * Specifies whether to display point labels inside or outside of series points. Applies only to bubble, range-like and bar-like series.
     */
    position?: DevExpress.common.charts.RelativePosition;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesFullStackedLineSeries
    extends dxChartSeriesTypesCommonSeries {
    /**
     * Configures data aggregation for the series.
     */
    aggregation?: dxChartSeriesTypesFullStackedLineSeriesAggregation;
    /**
     * Specifies series elements to be highlighted when a user points to a series.
     */
    hoverMode?: 'nearestPoint' | 'includePoints' | 'excludePoints' | 'none';
    /**
     * Configures point labels.
     */
    label?: dxChartSeriesTypesFullStackedLineSeriesLabel;
    /**
     * Specifies series elements to be highlighted when a user selects a series.
     */
    selectionMode?: 'includePoints' | 'excludePoints' | 'none';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesFullStackedLineSeriesAggregation
    extends dxChartSeriesTypesCommonSeriesAggregation {
    /**
     * Specifies how to aggregate series points.
     */
    method?: DevExpress.viz.dxChart.ChartSingleValueSeriesAggregationMethod;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesFullStackedLineSeriesLabel
    extends dxChartSeriesTypesCommonSeriesLabel {
    /**
     * Customizes the text displayed by point labels.
     */
    customizeText?: (pointInfo: any) => string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesFullStackedSplineAreaSeries
    extends dxChartSeriesTypesCommonSeries {
    /**
     * Configures data aggregation for the series.
     */
    aggregation?: dxChartSeriesTypesFullStackedSplineAreaSeriesAggregation;
    /**
     * Specifies series elements to be highlighted when a user points to a series.
     */
    hoverMode?: 'nearestPoint' | 'includePoints' | 'excludePoints' | 'none';
    /**
     * Configures point labels.
     */
    label?: dxChartSeriesTypesFullStackedSplineAreaSeriesLabel;
    /**
     * Configures series points in scatter, line- and area-like series.
     */
    point?: dxChartSeriesTypesFullStackedSplineAreaSeriesPoint;
    /**
     * Specifies series elements to be highlighted when a user selects a series.
     */
    selectionMode?: 'includePoints' | 'excludePoints' | 'none';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesFullStackedSplineAreaSeriesAggregation
    extends dxChartSeriesTypesCommonSeriesAggregation {
    /**
     * Specifies how to aggregate series points.
     */
    method?: DevExpress.viz.dxChart.ChartSingleValueSeriesAggregationMethod;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesFullStackedSplineAreaSeriesLabel
    extends dxChartSeriesTypesCommonSeriesLabel {
    /**
     * Customizes the text displayed by point labels.
     */
    customizeText?: (pointInfo: any) => string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesFullStackedSplineAreaSeriesPoint
    extends dxChartSeriesTypesCommonSeriesPoint {
    /**
     * Makes the series points visible.
     */
    visible?: boolean;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesFullStackedSplineSeries
    extends dxChartSeriesTypesCommonSeries {
    /**
     * Configures data aggregation for the series.
     */
    aggregation?: dxChartSeriesTypesFullStackedSplineSeriesAggregation;
    /**
     * Specifies series elements to be highlighted when a user points to a series.
     */
    hoverMode?: 'nearestPoint' | 'includePoints' | 'excludePoints' | 'none';
    /**
     * Configures point labels.
     */
    label?: dxChartSeriesTypesFullStackedSplineSeriesLabel;
    /**
     * Specifies series elements to be highlighted when a user selects a series.
     */
    selectionMode?: 'includePoints' | 'excludePoints' | 'none';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesFullStackedSplineSeriesAggregation
    extends dxChartSeriesTypesCommonSeriesAggregation {
    /**
     * Specifies how to aggregate series points.
     */
    method?: DevExpress.viz.dxChart.ChartSingleValueSeriesAggregationMethod;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesFullStackedSplineSeriesLabel
    extends dxChartSeriesTypesCommonSeriesLabel {
    /**
     * Customizes the text displayed by point labels.
     */
    customizeText?: (pointInfo: any) => string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesLineSeries
    extends dxChartSeriesTypesCommonSeries {
    /**
     * Configures data aggregation for the series.
     */
    aggregation?: dxChartSeriesTypesLineSeriesAggregation;
    /**
     * Specifies series elements to be highlighted when a user points to a series.
     */
    hoverMode?: 'nearestPoint' | 'includePoints' | 'excludePoints' | 'none';
    /**
     * Configures point labels.
     */
    label?: dxChartSeriesTypesLineSeriesLabel;
    /**
     * Specifies series elements to be highlighted when a user selects a series.
     */
    selectionMode?: 'includePoints' | 'excludePoints' | 'none';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesLineSeriesAggregation
    extends dxChartSeriesTypesCommonSeriesAggregation {
    /**
     * Specifies how to aggregate series points.
     */
    method?: DevExpress.viz.dxChart.ChartSingleValueSeriesAggregationMethod;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesLineSeriesLabel
    extends dxChartSeriesTypesCommonSeriesLabel {
    /**
     * Customizes the text displayed by point labels.
     */
    customizeText?: (pointInfo: any) => string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesRangeAreaSeries
    extends dxChartSeriesTypesCommonSeries {
    /**
     * Configures data aggregation for the series.
     */
    aggregation?: dxChartSeriesTypesRangeAreaSeriesAggregation;
    /**
     * Specifies series elements to be highlighted when a user points to a series.
     */
    hoverMode?: 'nearestPoint' | 'includePoints' | 'excludePoints' | 'none';
    /**
     * Configures point labels.
     */
    label?: dxChartSeriesTypesRangeAreaSeriesLabel;
    /**
     * Configures series points in scatter, line- and area-like series.
     */
    point?: dxChartSeriesTypesRangeAreaSeriesPoint;
    /**
     * Specifies series elements to be highlighted when a user selects a series.
     */
    selectionMode?: 'includePoints' | 'excludePoints' | 'none';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesRangeAreaSeriesAggregation
    extends dxChartSeriesTypesCommonSeriesAggregation {
    /**
     * Specifies how to aggregate series points.
     */
    method?: DevExpress.viz.dxChart.ChartRangeSeriesAggregationMethod;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesRangeAreaSeriesLabel
    extends dxChartSeriesTypesCommonSeriesLabel {
    /**
     * Customizes the text displayed by point labels.
     */
    customizeText?: (pointInfo: any) => string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesRangeAreaSeriesPoint
    extends dxChartSeriesTypesCommonSeriesPoint {
    /**
     * Makes the series points visible.
     */
    visible?: boolean;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesRangeBarSeries
    extends dxChartSeriesTypesCommonSeries {
    /**
     * Configures data aggregation for the series.
     */
    aggregation?: dxChartSeriesTypesRangeBarSeriesAggregation;
    /**
     * Specifies series elements to be highlighted when a user points to a series.
     */
    hoverMode?: 'onlyPoint' | 'allSeriesPoints' | 'allArgumentPoints' | 'none';
    /**
     * Configures point labels.
     */
    label?: dxChartSeriesTypesRangeBarSeriesLabel;
    /**
     * Specifies series elements to be highlighted when a user selects a range bar.
     */
    selectionMode?:
      | 'onlyPoint'
      | 'allSeriesPoints'
      | 'allArgumentPoints'
      | 'none';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesRangeBarSeriesAggregation
    extends dxChartSeriesTypesCommonSeriesAggregation {
    /**
     * Specifies how to aggregate series points.
     */
    method?: DevExpress.viz.dxChart.ChartRangeSeriesAggregationMethod;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesRangeBarSeriesLabel
    extends dxChartSeriesTypesCommonSeriesLabel {
    /**
     * Customizes the text displayed by point labels.
     */
    customizeText?: (pointInfo: any) => string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesScatterSeries
    extends dxChartSeriesTypesCommonSeries {
    /**
     * Configures data aggregation for the series.
     */
    aggregation?: dxChartSeriesTypesScatterSeriesAggregation;
    /**
     * Configures point labels.
     */
    label?: dxChartSeriesTypesScatterSeriesLabel;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesScatterSeriesAggregation
    extends dxChartSeriesTypesCommonSeriesAggregation {
    /**
     * Specifies how to aggregate series points.
     */
    method?: DevExpress.viz.dxChart.ChartSingleValueSeriesAggregationMethod;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesScatterSeriesLabel
    extends dxChartSeriesTypesCommonSeriesLabel {
    /**
     * Customizes the text displayed by point labels.
     */
    customizeText?: (pointInfo: any) => string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesSplineAreaSeries
    extends dxChartSeriesTypesCommonSeries {
    /**
     * Configures data aggregation for the series.
     */
    aggregation?: dxChartSeriesTypesSplineAreaSeriesAggregation;
    /**
     * Specifies series elements to be highlighted when a user points to a series.
     */
    hoverMode?: 'nearestPoint' | 'includePoints' | 'excludePoints' | 'none';
    /**
     * Configures point labels.
     */
    label?: dxChartSeriesTypesSplineAreaSeriesLabel;
    /**
     * Configures series points in scatter, line- and area-like series.
     */
    point?: dxChartSeriesTypesSplineAreaSeriesPoint;
    /**
     * Specifies series elements to be highlighted when a user selects a series.
     */
    selectionMode?: 'includePoints' | 'excludePoints' | 'none';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesSplineAreaSeriesAggregation
    extends dxChartSeriesTypesCommonSeriesAggregation {
    /**
     * Specifies how to aggregate series points.
     */
    method?: DevExpress.viz.dxChart.ChartSingleValueSeriesAggregationMethod;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesSplineAreaSeriesLabel
    extends dxChartSeriesTypesCommonSeriesLabel {
    /**
     * Customizes the text displayed by point labels.
     */
    customizeText?: (pointInfo: any) => string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesSplineAreaSeriesPoint
    extends dxChartSeriesTypesCommonSeriesPoint {
    /**
     * Makes the series points visible.
     */
    visible?: boolean;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesSplineSeries
    extends dxChartSeriesTypesCommonSeries {
    /**
     * Configures data aggregation for the series.
     */
    aggregation?: dxChartSeriesTypesSplineSeriesAggregation;
    /**
     * Specifies series elements to be highlighted when a user points to a series.
     */
    hoverMode?: 'nearestPoint' | 'includePoints' | 'excludePoints' | 'none';
    /**
     * Configures point labels.
     */
    label?: dxChartSeriesTypesSplineSeriesLabel;
    /**
     * Specifies series elements to be highlighted when a user selects a series.
     */
    selectionMode?: 'includePoints' | 'excludePoints' | 'none';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesSplineSeriesAggregation
    extends dxChartSeriesTypesCommonSeriesAggregation {
    /**
     * Specifies how to aggregate series points.
     */
    method?: DevExpress.viz.dxChart.ChartSingleValueSeriesAggregationMethod;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesSplineSeriesLabel
    extends dxChartSeriesTypesCommonSeriesLabel {
    /**
     * Customizes the text displayed by point labels.
     */
    customizeText?: (pointInfo: any) => string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesStackedAreaSeries
    extends dxChartSeriesTypesCommonSeries {
    /**
     * Configures data aggregation for the series.
     */
    aggregation?: dxChartSeriesTypesStackedAreaSeriesAggregation;
    /**
     * Specifies series elements to be highlighted when a user points to a series.
     */
    hoverMode?: 'nearestPoint' | 'includePoints' | 'excludePoints' | 'none';
    /**
     * Configures point labels.
     */
    label?: dxChartSeriesTypesStackedAreaSeriesLabel;
    /**
     * Configures series points in scatter, line- and area-like series.
     */
    point?: dxChartSeriesTypesStackedAreaSeriesPoint;
    /**
     * Specifies series elements to be highlighted when a user selects a series.
     */
    selectionMode?: 'includePoints' | 'excludePoints' | 'none';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesStackedAreaSeriesAggregation
    extends dxChartSeriesTypesCommonSeriesAggregation {
    /**
     * Specifies how to aggregate series points.
     */
    method?: DevExpress.viz.dxChart.ChartSingleValueSeriesAggregationMethod;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesStackedAreaSeriesLabel
    extends dxChartSeriesTypesCommonSeriesLabel {
    /**
     * Customizes the text displayed by point labels.
     */
    customizeText?: (pointInfo: any) => string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesStackedAreaSeriesPoint
    extends dxChartSeriesTypesCommonSeriesPoint {
    /**
     * Makes the series points visible.
     */
    visible?: boolean;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesStackedBarSeries
    extends dxChartSeriesTypesCommonSeries {
    /**
     * Configures data aggregation for the series.
     */
    aggregation?: dxChartSeriesTypesStackedBarSeriesAggregation;
    /**
     * Specifies series elements to be highlighted when a user points to a series.
     */
    hoverMode?: 'onlyPoint' | 'allSeriesPoints' | 'allArgumentPoints' | 'none';
    /**
     * Configures point labels.
     */
    label?: dxChartSeriesTypesStackedBarSeriesLabel;
    /**
     * Specifies series elements to be highlighted when a user selects a bar.
     */
    selectionMode?:
      | 'onlyPoint'
      | 'allSeriesPoints'
      | 'allArgumentPoints'
      | 'none';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesStackedBarSeriesAggregation
    extends dxChartSeriesTypesCommonSeriesAggregation {
    /**
     * Specifies how to aggregate series points.
     */
    method?: DevExpress.viz.dxChart.ChartSingleValueSeriesAggregationMethod;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesStackedBarSeriesLabel
    extends dxChartSeriesTypesCommonSeriesLabel {
    /**
     * Customizes the text displayed by point labels.
     */
    customizeText?: (pointInfo: any) => string;
    /**
     * Specifies whether to display point labels inside or outside of series points. Applies only to bubble, range-like and bar-like series.
     */
    position?: DevExpress.common.charts.RelativePosition;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesStackedLineSeries
    extends dxChartSeriesTypesCommonSeries {
    /**
     * Configures data aggregation for the series.
     */
    aggregation?: dxChartSeriesTypesStackedLineSeriesAggregation;
    /**
     * Specifies series elements to be highlighted when a user points to a series.
     */
    hoverMode?: 'nearestPoint' | 'includePoints' | 'excludePoints' | 'none';
    /**
     * Configures point labels.
     */
    label?: dxChartSeriesTypesStackedLineSeriesLabel;
    /**
     * Specifies series elements to be highlighted when a user selects a series.
     */
    selectionMode?: 'includePoints' | 'excludePoints' | 'none';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesStackedLineSeriesAggregation
    extends dxChartSeriesTypesCommonSeriesAggregation {
    /**
     * Specifies how to aggregate series points.
     */
    method?: DevExpress.viz.dxChart.ChartSingleValueSeriesAggregationMethod;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesStackedLineSeriesLabel
    extends dxChartSeriesTypesCommonSeriesLabel {
    /**
     * Customizes the text displayed by point labels.
     */
    customizeText?: (pointInfo: any) => string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesStackedSplineAreaSeries
    extends dxChartSeriesTypesCommonSeries {
    /**
     * Configures data aggregation for the series.
     */
    aggregation?: dxChartSeriesTypesStackedSplineAreaSeriesAggregation;
    /**
     * Specifies series elements to be highlighted when a user points to a series.
     */
    hoverMode?: 'nearestPoint' | 'includePoints' | 'excludePoints' | 'none';
    /**
     * Configures point labels.
     */
    label?: dxChartSeriesTypesStackedSplineAreaSeriesLabel;
    /**
     * Configures series points in scatter, line- and area-like series.
     */
    point?: dxChartSeriesTypesStackedSplineAreaSeriesPoint;
    /**
     * Specifies series elements to be highlighted when a user selects a series.
     */
    selectionMode?: 'includePoints' | 'excludePoints' | 'none';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesStackedSplineAreaSeriesAggregation
    extends dxChartSeriesTypesCommonSeriesAggregation {
    /**
     * Specifies how to aggregate series points.
     */
    method?: DevExpress.viz.dxChart.ChartSingleValueSeriesAggregationMethod;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesStackedSplineAreaSeriesLabel
    extends dxChartSeriesTypesCommonSeriesLabel {
    /**
     * Customizes the text displayed by point labels.
     */
    customizeText?: (pointInfo: any) => string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesStackedSplineAreaSeriesPoint
    extends dxChartSeriesTypesCommonSeriesPoint {
    /**
     * Makes the series points visible.
     */
    visible?: boolean;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesStackedSplineSeries
    extends dxChartSeriesTypesCommonSeries {
    /**
     * Configures data aggregation for the series.
     */
    aggregation?: dxChartSeriesTypesStackedSplineSeriesAggregation;
    /**
     * Specifies series elements to be highlighted when a user points to a series.
     */
    hoverMode?: 'nearestPoint' | 'includePoints' | 'excludePoints' | 'none';
    /**
     * Configures point labels.
     */
    label?: dxChartSeriesTypesStackedSplineSeriesLabel;
    /**
     * Specifies series elements to be highlighted when a user selects a series.
     */
    selectionMode?: 'includePoints' | 'excludePoints' | 'none';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesStackedSplineSeriesAggregation
    extends dxChartSeriesTypesCommonSeriesAggregation {
    /**
     * Specifies how to aggregate series points.
     */
    method?: DevExpress.viz.dxChart.ChartSingleValueSeriesAggregationMethod;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesStackedSplineSeriesLabel
    extends dxChartSeriesTypesCommonSeriesLabel {
    /**
     * Customizes the text displayed by point labels.
     */
    customizeText?: (pointInfo: any) => string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesStepAreaSeries
    extends dxChartSeriesTypesCommonSeries {
    /**
     * Configures data aggregation for the series.
     */
    aggregation?: dxChartSeriesTypesStepAreaSeriesAggregation;
    /**
     * Configures the series border (in area-like series) or the series point border (in bar-like and bubble series).
     */
    border?: dxChartSeriesTypesStepAreaSeriesBorder;
    /**
     * Specifies series elements to be highlighted when a user points to a series.
     */
    hoverMode?: 'nearestPoint' | 'includePoints' | 'excludePoints' | 'none';
    /**
     * Configures the appearance adopted by the series when a user points to it.
     */
    hoverStyle?: dxChartSeriesTypesStepAreaSeriesHoverStyle;
    /**
     * Configures point labels.
     */
    label?: dxChartSeriesTypesStepAreaSeriesLabel;
    /**
     * Configures series points in scatter, line- and area-like series.
     */
    point?: dxChartSeriesTypesStepAreaSeriesPoint;
    /**
     * Specifies series elements to be highlighted when a user selects a series.
     */
    selectionMode?: 'includePoints' | 'excludePoints' | 'none';
    /**
     * Configures the appearance adopted by the series when a user selects it.
     */
    selectionStyle?: dxChartSeriesTypesStepAreaSeriesSelectionStyle;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesStepAreaSeriesAggregation
    extends dxChartSeriesTypesCommonSeriesAggregation {
    /**
     * Specifies how to aggregate series points.
     */
    method?: DevExpress.viz.dxChart.ChartSingleValueSeriesAggregationMethod;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesStepAreaSeriesBorder
    extends dxChartSeriesTypesCommonSeriesBorder {
    /**
     * Shows the series border (in area-like series) or the series point border (in bar-like and bubble series).
     */
    visible?: boolean;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesStepAreaSeriesHoverStyle
    extends dxChartSeriesTypesCommonSeriesHoverStyle {
    /**
     * Configures the appearance adopted by the series border (in area-like series) or the series point border (in bar-like and bubble series) when a user points to the series.
     */
    border?: dxChartSeriesTypesStepAreaSeriesHoverStyleBorder;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesStepAreaSeriesHoverStyleBorder
    extends dxChartSeriesTypesCommonSeriesHoverStyleBorder {
    /**
     * Shows the series border (in area-like series) or the series point border (in bar-like and bubble series) when a user points to the series.
     */
    visible?: boolean;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesStepAreaSeriesLabel
    extends dxChartSeriesTypesCommonSeriesLabel {
    /**
     * Customizes the text displayed by point labels.
     */
    customizeText?: (pointInfo: any) => string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesStepAreaSeriesPoint
    extends dxChartSeriesTypesCommonSeriesPoint {
    /**
     * Makes the series points visible.
     */
    visible?: boolean;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesStepAreaSeriesSelectionStyle
    extends dxChartSeriesTypesCommonSeriesSelectionStyle {
    /**
     * Configures the appearance adopted by the series border (in area-like series) or the series point border (in bar-like and bubble series) when a user selects the series.
     */
    border?: dxChartSeriesTypesStepAreaSeriesSelectionStyleBorder;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesStepAreaSeriesSelectionStyleBorder
    extends dxChartSeriesTypesCommonSeriesSelectionStyleBorder {
    /**
     * Shows the series border (in area-like series) or the series point border (in bar-like and bubble series) when a user selects the series.
     */
    visible?: boolean;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesStepLineSeries
    extends dxChartSeriesTypesCommonSeries {
    /**
     * Configures data aggregation for the series.
     */
    aggregation?: dxChartSeriesTypesStepLineSeriesAggregation;
    /**
     * Specifies series elements to be highlighted when a user points to a series.
     */
    hoverMode?: 'nearestPoint' | 'includePoints' | 'excludePoints' | 'none';
    /**
     * Configures point labels.
     */
    label?: dxChartSeriesTypesStepLineSeriesLabel;
    /**
     * Specifies series elements to be highlighted when a user selects a series.
     */
    selectionMode?: 'includePoints' | 'excludePoints' | 'none';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesStepLineSeriesAggregation
    extends dxChartSeriesTypesCommonSeriesAggregation {
    /**
     * Specifies how to aggregate series points.
     */
    method?: DevExpress.viz.dxChart.ChartSingleValueSeriesAggregationMethod;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesStepLineSeriesLabel
    extends dxChartSeriesTypesCommonSeriesLabel {
    /**
     * Customizes the text displayed by point labels.
     */
    customizeText?: (pointInfo: any) => string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesStockSeries
    extends dxChartSeriesTypesCommonSeries {
    /**
     * Configures data aggregation for the series.
     */
    aggregation?: dxChartSeriesTypesStockSeriesAggregation;
    /**
     * Specifies which data source field provides arguments for series points.
     */
    argumentField?: string;
    /**
     * Specifies series elements to be highlighted when a user pauses on a series.
     */
    hoverMode?: 'onlyPoint' | 'allSeriesPoints' | 'allArgumentPoints' | 'none';
    /**
     * Configures point labels.
     */
    label?: dxChartSeriesTypesStockSeriesLabel;
    /**
     * Specifies series elements to be highlighted when a user selects a point.
     */
    selectionMode?:
      | 'onlyPoint'
      | 'allSeriesPoints'
      | 'allArgumentPoints'
      | 'none';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesStockSeriesAggregation
    extends dxChartSeriesTypesCommonSeriesAggregation {
    /**
     * Specifies how to aggregate series points.
     */
    method?: DevExpress.viz.dxChart.ChartFinancialSeriesAggregationMethod;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesStockSeriesLabel
    extends dxChartSeriesTypesCommonSeriesLabel {
    /**
     * Customizes the text displayed by point labels.
     */
    customizeText?: (pointInfo: any) => string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartTooltip extends BaseChartTooltip {
    /**
     * Specifies whether the tooltip must be located in the center of a series point or on its edge. Applies to bar-like and bubble series only.
     */
    location?: DevExpress.viz.dxChart.ChartTooltipLocation;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartValueAxis extends dxChartCommonAxisSettings {
    /**
     * Enables auto-calculated scale breaks. Applies only if the axis&apos; type is &apos;continuous&apos; or &apos;logarithmic&apos; and valueType is &apos;numeric&apos;.
     */
    autoBreaksEnabled?: boolean;
    /**
     * Specifies the minimum distance between two neighboring major ticks in pixels. Applies only to the axes of the &apos;continuous&apos; and &apos;logarithmic&apos; types.
     */
    axisDivisionFactor?: number;
    /**
     * Declares a custom scale break collection. Applies only if the axis&apos; type is &apos;continuous&apos; or &apos;logarithmic&apos;.
     */
    breaks?: Array<ScaleBreak>;
    /**
     * Specifies the order of categories on an axis of the &apos;discrete&apos; type.
     */
    categories?: Array<number | string | Date>;
    /**
     * Specifies the appearance of those constant lines that belong to the value axis.
     */
    constantLineStyle?: dxChartValueAxisConstantLineStyle;
    /**
     * Declares a collection of constant lines belonging to the value axis.
     */
    constantLines?: Array<dxChartValueAxisConstantLines>;
    /**
     * Specifies whether to force the axis to start and end on ticks.
     */
    endOnTick?: boolean;
    /**
     * Configures the labels of the value axis.
     */
    label?: dxChartValueAxisLabel;
    /**
     * Specifies a value used to calculate the range on a logarithmic axis within which the axis should be linear. Applies only if the data source contains negative values or zeroes.
     */
    linearThreshold?: number;
    /**
     * Specifies the value to be raised to a power when generating ticks for an axis of the &apos;logarithmic&apos; type.
     */
    logarithmBase?: number;
    /**
     * Sets a limit on auto-calculated scale breaks. Custom scale breaks are not counted.
     */
    maxAutoBreakCount?: number;
    /**
     * Specifies the minimum length of the visual range.
     */
    minVisualRangeLength?: VizTimeInterval;
    /**
     * Specifies how many minor ticks to place between two neighboring major ticks.
     */
    minorTickCount?: number;
    /**
     * Specifies the interval between minor ticks. Applies only to continuous axes.
     */
    minorTickInterval?: VizTimeInterval;
    /**
     * Adds a pixel-measured empty space between two side-by-side value axes. Applies if several value axes are located on one side of the chart.
     */
    multipleAxesSpacing?: number;
    /**
     * Specifies the name of the value axis.
     */
    name?: string;
    /**
     * Binds the value axis to a pane.
     */
    pane?: string;
    /**
     * Relocates the value axis.
     */
    position?: DevExpress.common.Position;
    /**
     * Specifies the position of the value axis on the argument axis.
     */
    customPosition?: number | Date | string;
    /**
     * Specifies the shift in pixels of the value axis.
     */
    offset?: number;
    /**
     * Specifies whether or not to show zero on the value axis.
     */
    showZero?: boolean;
    /**
     * Declares a collection of strips belonging to the value axis.
     */
    strips?: Array<dxChartValueAxisStrips>;
    /**
     * Synchronizes two or more value axes with each other at a specific value.
     */
    synchronizedValue?: number;
    /**
     * Specifies the interval between major ticks. Does not apply to discrete axes.
     */
    tickInterval?: VizTimeInterval;
    /**
     * Configures the axis title.
     */
    title?: dxChartValueAxisTitle;
    /**
     * Specifies the type of the value axis.
     */
    type?: DevExpress.common.charts.AxisScaleType;
    /**
     * Casts values to a specified data type.
     */
    valueType?: DevExpress.common.charts.ChartsDataType;
    /**
     * Defines the axis&apos; displayed range. Cannot be wider than the wholeRange.
     */
    visualRange?: VizRange | Array<number | string | Date>;
    /**
     * Specifies how the axis&apos;s visual range should behave when chart data is updated.
     */
    visualRangeUpdateMode?: DevExpress.common.charts.VisualRangeUpdateMode;
    /**
     * Defines the range where the axis can be zoomed and panned.
     */
    wholeRange?: VizRange | Array<number | string | Date>;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartValueAxisConstantLines
    extends dxChartCommonAxisSettingsConstantLineStyle {
    /**
     * Specifies whether to display the constant line behind or in front of the series.
     */
    displayBehindSeries?: boolean;
    /**
     * Specifies whether to extend the axis&apos;s default visual range to display the constant line.
     */
    extendAxis?: boolean;
    /**
     * Configures the constant line label.
     */
    label?: dxChartValueAxisConstantLinesLabel;
    /**
     * Specifies the value indicated by a constant line. Setting this property is necessary.
     */
    value?: number | Date | string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartValueAxisConstantLinesLabel
    extends dxChartCommonAxisSettingsConstantLineStyleLabel {
    /**
     * Aligns constant line labels in the horizontal direction.
     */
    horizontalAlignment?: DevExpress.common.HorizontalAlignment;
    /**
     * Specifies the text of a constant line label. By default, equals to the value of the constant line.
     */
    text?: string;
    /**
     * Aligns constant line labels in the vertical direction.
     */
    verticalAlignment?: DevExpress.common.VerticalAlignment;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartValueAxisConstantLineStyle
    extends dxChartCommonAxisSettingsConstantLineStyle {
    /**
     * Specifies the appearance of the labels of those constant lines that belong to the value axis.
     */
    label?: dxChartValueAxisConstantLineStyleLabel;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartValueAxisConstantLineStyleLabel
    extends dxChartCommonAxisSettingsConstantLineStyleLabel {
    /**
     * Aligns constant line labels in the horizontal direction.
     */
    horizontalAlignment?: DevExpress.common.HorizontalAlignment;
    /**
     * Aligns constant line labels in the vertical direction.
     */
    verticalAlignment?: DevExpress.common.VerticalAlignment;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartValueAxisLabel
    extends dxChartCommonAxisSettingsLabel {
    /**
     * Specifies the hint that appears when a user points to an axis label.
     */
    customizeHint?: (axisValue: {
      value?: Date | number | string;
      valueText?: string;
    }) => string;
    /**
     * Customizes the text displayed by axis labels.
     */
    customizeText?: (axisValue: {
      value?: Date | number | string;
      valueText?: string;
    }) => string;
    /**
     * Formats a value before it is displayed in an axis label.
     */
    format?: DevExpress.ui.Format;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartValueAxisStrips
    extends dxChartCommonAxisSettingsStripStyle {
    /**
     * Specifies the color of the strip.
     */
    color?: string;
    /**
     * Along with the startValue property, limits the strip.
     */
    endValue?: number | Date | string;
    /**
     * Configures the strip label.
     */
    label?: dxChartValueAxisStripsLabel;
    /**
     * Along with the endValue property, limits the strip.
     */
    startValue?: number | Date | string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartValueAxisStripsLabel
    extends dxChartCommonAxisSettingsStripStyleLabel {
    /**
     * Specifies the text of the strip label.
     */
    text?: string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartValueAxisTitle
    extends dxChartCommonAxisSettingsTitle {
    /**
     * Specifies the text of the axis title.
     */
    text?: string;
  }
  /**
   * The CircularGauge is a UI component that indicates values on a circular numeric scale.
   */
  export class dxCircularGauge extends BaseGauge<dxCircularGaugeOptions> {}
  module dxCircularGauge {
    export type CircularGaugeElementOrientation =
      | 'center'
      | 'inside'
      | 'outside';
    export type CircularGaugeLabelOverlap = 'first' | 'last';
    export type DisposingEvent = DevExpress.events.EventInfo<dxCircularGauge>;
    export type DrawnEvent = DevExpress.events.EventInfo<dxCircularGauge>;
    export type ExportedEvent = DevExpress.events.EventInfo<dxCircularGauge>;
    export type ExportingEvent = DevExpress.events.EventInfo<dxCircularGauge> &
      DevExpress.viz.BaseWidget.ExportInfo;
    export type FileSavingEvent =
      DevExpress.viz.BaseWidget.FileSavingEventInfo<dxCircularGauge>;
    export type IncidentOccurredEvent =
      DevExpress.events.EventInfo<dxCircularGauge> &
        DevExpress.viz.BaseWidget.IncidentInfo;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxCircularGauge>;
    export type OptionChangedEvent =
      DevExpress.events.EventInfo<dxCircularGauge> &
        DevExpress.events.ChangedOptionInfo;
    export type Properties = dxCircularGaugeOptions;
    export type TooltipHiddenEvent =
      DevExpress.events.EventInfo<dxCircularGauge> &
        DevExpress.viz.BaseGauge.TooltipInfo;
    export type TooltipShownEvent =
      DevExpress.events.EventInfo<dxCircularGauge> &
        DevExpress.viz.BaseGauge.TooltipInfo;
  }
  /**
   * @deprecated use Properties instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxCircularGaugeOptions
    extends BaseGaugeOptions<dxCircularGauge> {
    /**
     * Specifies the properties required to set the geometry of the CircularGauge UI component.
     */
    geometry?: {
      /**
       * Specifies the end angle of the circular gauge&apos;s arc.
       */
      endAngle?: number;
      /**
       * Specifies the start angle of the circular gauge&apos;s arc.
       */
      startAngle?: number;
    };
    /**
     * Specifies gauge range container properties.
     */
    rangeContainer?: dxCircularGaugeRangeContainer;
    /**
     * Specifies a gauge&apos;s scale properties.
     */
    scale?: dxCircularGaugeScale;
    /**
     * Specifies the appearance properties of subvalue indicators.
     */
    subvalueIndicator?: GaugeIndicator;
    /**
     * Specifies the appearance properties of the value indicator.
     */
    valueIndicator?: GaugeIndicator;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxCircularGaugeRangeContainer
    extends BaseGaugeRangeContainer {
    /**
     * Specifies the orientation of the range container in the CircularGauge UI component.
     */
    orientation?: DevExpress.viz.dxCircularGauge.CircularGaugeElementOrientation;
    /**
     * Specifies the range container&apos;s width in pixels.
     */
    width?: number;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxCircularGaugeScale extends BaseGaugeScale {
    /**
     * Specifies common properties for scale labels.
     */
    label?: dxCircularGaugeScaleLabel;
    /**
     * Specifies the orientation of scale ticks.
     */
    orientation?: DevExpress.viz.dxCircularGauge.CircularGaugeElementOrientation;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxCircularGaugeScaleLabel extends BaseGaugeScaleLabel {
    /**
     * Specifies which label to hide in case of overlapping.
     */
    hideFirstOrLast?: DevExpress.viz.dxCircularGauge.CircularGaugeLabelOverlap;
    /**
     * Specifies the spacing between scale labels and ticks.
     */
    indentFromTick?: number;
  }
  /**
   * The Funnel is a UI component that visualizes a value at different stages. It helps assess value changes throughout these stages and identify potential issues. The Funnel UI component conveys information using different interactive elements (tooltips, labels, legend) and enables you to create not only a funnel, but also a pyramid chart.
   */
  export class dxFunnel extends BaseWidget<dxFunnelOptions> {
    /**
     * Cancels the selection of all funnel items.
     */
    clearSelection(): void;
    /**
     * Provides access to all funnel items.
     */
    getAllItems(): Array<DevExpress.viz.dxFunnel.Item>;
    getDataSource(): DevExpress.data.DataSource;
    /**
     * Hides all UI component tooltips.
     */
    hideTooltip(): void;
  }
  module dxFunnel {
    export type DisposingEvent = DevExpress.events.EventInfo<dxFunnel>;
    export type DrawnEvent = DevExpress.events.EventInfo<dxFunnel>;
    export type ExportedEvent = DevExpress.events.EventInfo<dxFunnel>;
    export type ExportingEvent = DevExpress.events.EventInfo<dxFunnel> &
      DevExpress.viz.BaseWidget.ExportInfo;
    export type FileSavingEvent =
      DevExpress.viz.BaseWidget.FileSavingEventInfo<dxFunnel>;
    export type FunnelAlgorithm = 'dynamicHeight' | 'dynamicSlope';
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    interface FunnelItemInfo {
      readonly item: Item;
    }
    export type FunnelLabelOverlap = 'hide' | 'none' | 'shift';
    export type HoverChangedEvent = DevExpress.events.EventInfo<dxFunnel> &
      FunnelItemInfo;
    export type IncidentOccurredEvent = DevExpress.events.EventInfo<dxFunnel> &
      DevExpress.viz.BaseWidget.IncidentInfo;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxFunnel>;
    export type ItemClickEvent = DevExpress.events.NativeEventInfo<
      dxFunnel,
      MouseEvent | PointerEvent
    > &
      FunnelItemInfo;
    export type LegendClickEvent = DevExpress.events.NativeEventInfo<
      dxFunnel,
      MouseEvent | PointerEvent
    > &
      FunnelItemInfo;
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxFunnel> &
      DevExpress.events.ChangedOptionInfo;
    export type Properties = dxFunnelOptions;
    export type SelectionChangedEvent = DevExpress.events.EventInfo<dxFunnel> &
      FunnelItemInfo;
  }
  /**
   * @deprecated Use Item instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxFunnelItem {
    /**
     * The item&apos;s argument.
     */
    argument?: string | Date | number;
    /**
     * The item&apos;s original data object.
     */
    data?: any;
    /**
     * Gets the funnel item&apos;s color specified in the data source or palette.
     */
    getColor(): string;
    /**
     * Changes the funnel item&apos;s hover state.
     */
    hover(state: boolean): void;
    /**
     * Indicates whether the funnel item is in the hover state.
     */
    isHovered(): boolean;
    /**
     * Indicates whether the funnel item is selected.
     */
    isSelected(): boolean;
    /**
     * The item&apos;s calculated percentage value.
     */
    percent?: number;
    /**
     * Selects or cancels the funnel item&apos;s selection.
     */
    select(state: boolean): void;
    /**
     * Shows the funnel item&apos;s tooltip.
     */
    showTooltip(): void;
    /**
     * The item&apos;s value.
     */
    value?: number;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxFunnelLegend extends BaseLegend {
    /**
     * Specifies the hint that appears when a user hovers the mouse pointer over a legend item.
     */
    customizeHint?: (itemInfo: {
      item?: DevExpress.viz.dxFunnel.Item;
      text?: string;
    }) => string;
    /**
     * Allows you to change the order, text, and visibility of legend items.
     */
    customizeItems?: (
      items: Array<DevExpress.viz.dxFunnel.LegendItem>
    ) => Array<DevExpress.viz.dxFunnel.LegendItem>;
    /**
     * Customizes the text displayed by legend items.
     */
    customizeText?: (itemInfo: {
      item?: DevExpress.viz.dxFunnel.Item;
      text?: string;
    }) => string;
    /**
     * Specifies an SVG element that serves as a custom legend item marker.
     */
    markerTemplate?:
      | DevExpress.core.template
      | ((
          legendItem: DevExpress.viz.dxFunnel.LegendItem,
          element: SVGGElement
        ) => string | DevExpress.core.UserDefinedElement<SVGElement>);
    /**
     * Specifies the legend&apos;s visibility.
     */
    visible?: boolean;
  }
  /**
   * @deprecated use Properties instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxFunnelOptions extends BaseWidgetOptions<dxFunnel> {
    /**
     * Specifies adaptive layout properties.
     */
    adaptiveLayout?: {
      /**
       * Specifies the minimum container height at which the layout begins to adapt.
       */
      height?: number;
      /**
       * Specifies whether item labels should be kept when the UI component adapts the layout.
       */
      keepLabels?: boolean;
      /**
       * Specifies the minimum container width at which the layout begins to adapt.
       */
      width?: number;
    };
    /**
     * Specifies the algorithm for building the funnel.
     */
    algorithm?: DevExpress.viz.dxFunnel.FunnelAlgorithm;
    /**
     * Specifies which data source field provides arguments for funnel items. The argument identifies a funnel item and represents it on the legend.
     */
    argumentField?: string;
    /**
     * Specifies which data source field provides colors for funnel items. If this field is absent, the palette provides the colors.
     */
    colorField?: string;
    /**
     * Binds the UI component to data.
     */
    dataSource?: DevExpress.data.DataSource.DataSourceLike<any> | null;
    /**
     * Specifies whether funnel items change their style when a user pauses on them.
     */
    hoverEnabled?: boolean;
    /**
     * Turns the funnel upside down.
     */
    inverted?: boolean;
    /**
     * Configures funnel items&apos; appearance.
     */
    item?: {
      /**
       * Configures a funnel item&apos;s border.
       */
      border?: {
        /**
         * Colors a funnel item&apos;s border.
         */
        color?: string;
        /**
         * Makes a funnel item&apos;s border visible.
         */
        visible?: boolean;
        /**
         * Sets the width of a funnel item&apos;s border in pixels.
         */
        width?: number;
      };
      /**
       * Configures a funnel item&apos;s appearance when a user presses the item or hovers the mouse pointer over it.
       */
      hoverStyle?: {
        /**
         * Configures a funnel item&apos;s border appearance when a user presses the item or hovers the mouse pointer over it.
         */
        border?: {
          /**
           * Colors a funnel item&apos;s border when a user presses the item or hovers the mouse pointer over it.
           */
          color?: string;
          /**
           * Shows a funnel item&apos;s border when a user presses the item or hovers the mouse pointer over it.
           */
          visible?: boolean;
          /**
           * Thickens a funnel item&apos;s border when a user presses the item or hovers the mouse pointer over it.
           */
          width?: number;
        };
        /**
         * Applies hatching to a funnel item when a user presses the item or hovers the mouse pointer over it.
         */
        hatching?: {
          /**
           * Specifies hatching line direction.
           */
          direction?: DevExpress.common.charts.HatchDirection;
          /**
           * Specifies the transparency of hatching lines.
           */
          opacity?: number;
          /**
           * Specifies the distance between two side-by-side hatching lines in pixels.
           */
          step?: number;
          /**
           * Specifies hatching lines&apos; width in pixels.
           */
          width?: number;
        };
      };
      /**
       * Configures a funnel item&apos;s appearance when a user selects it.
       */
      selectionStyle?: {
        /**
         * Configures a funnel item&apos;s border appearance when a user selects this item.
         */
        border?: {
          /**
           * Colors the selected funnel item&apos;s border.
           */
          color?: string;
          /**
           * Shows the selected funnel item&apos;s border.
           */
          visible?: boolean;
          /**
           * Thickens the selected funnel item&apos;s border.
           */
          width?: number;
        };
        /**
         * Applies hatching to a selected funnel item.
         */
        hatching?: {
          /**
           * Specifies hatching line direction.
           */
          direction?: DevExpress.common.charts.HatchDirection;
          /**
           * Specifies hatching line transparency.
           */
          opacity?: number;
          /**
           * Specifies the distance between two side-by-side hatching lines in pixels.
           */
          step?: number;
          /**
           * Specifies hatching line width in pixels.
           */
          width?: number;
        };
      };
    };
    /**
     * Configures funnel item labels.
     */
    label?: {
      /**
       * Colors the labels&apos; background. The default color is inherited from the funnel items.
       */
      backgroundColor?: string;
      /**
       * Configures the label borders.
       */
      border?: {
        /**
         * Colors the label borders.
         */
        color?: string;
        /**
         * Sets the label border dash style.
         */
        dashStyle?: DevExpress.common.charts.DashStyle;
        /**
         * Shows the label borders.
         */
        visible?: boolean;
        /**
         * Specifies the label border width.
         */
        width?: number;
      };
      /**
       * Configures label connectors.
       */
      connector?: {
        /**
         * Colors label connectors.
         */
        color?: string;
        /**
         * Specifies the transparency of label connectors.
         */
        opacity?: number;
        /**
         * Shows label connectors.
         */
        visible?: boolean;
        /**
         * Specifies the label connector width in pixels.
         */
        width?: number;
      };
      /**
       * Customizes labels&apos; text.
       */
      customizeText?: (itemInfo: {
        item?: DevExpress.viz.dxFunnel.Item;
        value?: number;
        valueText?: string;
        percent?: number;
        percentText?: string;
      }) => string;
      /**
       * Specifies labels&apos; font properties.
       */
      font?: Font;
      /**
       * Formats the item value before displaying it in the label.
       */
      format?: DevExpress.ui.Format;
      /**
       * Specifies labels&apos; position in relation to the funnel items.
       */
      horizontalAlignment?: DevExpress.common.HorizontalEdge;
      /**
       * Moves labels from their initial positions.
       */
      horizontalOffset?: number;
      /**
       * Specifies whether to display labels inside or outside funnel items or arrange them in columns.
       */
      position?: DevExpress.common.charts.LabelPosition;
      /**
       * Specifies whether to show labels for items with zero value.
       */
      showForZeroValues?: boolean;
      /**
       * Specifies what to do with label texts that overflow the allocated space after applying wordWrap: hide, truncate them and display an ellipsis, or do nothing.
       */
      textOverflow?: DevExpress.common.charts.TextOverflow;
      /**
       * Controls the labels&apos; visibility.
       */
      visible?: boolean;
      /**
       * Specifies how to wrap label texts if they do not fit into a single line.
       */
      wordWrap?: DevExpress.common.charts.WordWrap;
    };
    /**
     * Configures the legend.
     */
    legend?: dxFunnelLegend;
    /**
     * Specifies the ratio between the height of the neck and that of the whole funnel. Accepts values from 0 to 1. Applies only if the algorithm is &apos;dynamicHeight&apos;.
     */
    neckHeight?: number;
    /**
     * Specifies the ratio between the width of the neck and that of the whole funnel. Accepts values from 0 to 1. Applies only if the algorithm is &apos;dynamicHeight&apos;.
     */
    neckWidth?: number;
    /**
     * A function that is executed after the pointer enters or leaves a funnel item.
     */
    onHoverChanged?: (e: DevExpress.viz.dxFunnel.HoverChangedEvent) => void;
    /**
     * A function that is executed when a funnel item is clicked or tapped.
     */
    onItemClick?:
      | ((e: DevExpress.viz.dxFunnel.ItemClickEvent) => void)
      | string;
    /**
     * A function that is executed when a legend item is clicked or tapped.
     */
    onLegendClick?:
      | ((e: DevExpress.viz.dxFunnel.LegendClickEvent) => void)
      | string;
    /**
     * A function that is executed when a funnel item is selected or selection is canceled.
     */
    onSelectionChanged?: (
      e: DevExpress.viz.dxFunnel.SelectionChangedEvent
    ) => void;
    /**
     * Sets the palette to be used to colorize funnel items.
     */
    palette?: Array<string> | DevExpress.common.charts.Palette;
    /**
     * Specifies what to do with colors in the palette when their number is less than the number of funnel items.
     */
    paletteExtensionMode?: DevExpress.common.charts.PaletteExtensionMode;
    /**
     * Specifies how item labels should behave when they overlap.
     */
    resolveLabelOverlapping?: DevExpress.viz.dxFunnel.FunnelLabelOverlap;
    /**
     * Specifies whether a single or multiple funnel items can be in the selected state at a time. Assigning &apos;none&apos; disables the selection feature.
     */
    selectionMode?: DevExpress.common.SingleMultipleOrNone;
    /**
     * Specifies whether to sort funnel items.
     */
    sortData?: boolean;
    /**
     * Configures tooltips - small pop-up rectangles that display information about a data-visualizing UI component element being pressed or hovered over with the mouse pointer.
     */
    tooltip?: dxFunnelTooltip;
    /**
     * Specifies which data source field provides values for funnel items. The value defines a funnel item&apos;s area.
     */
    valueField?: string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxFunnelTooltip extends BaseWidgetTooltip {
    /**
     * Specifies a custom template for a tooltip.
     */
    contentTemplate?:
      | DevExpress.core.template
      | ((
          info: {
            item?: DevExpress.viz.dxFunnel.Item;
            value?: number;
            valueText?: string;
            percent?: number;
            percentText?: string;
          },
          element: DevExpress.core.DxElement
        ) => string | DevExpress.core.UserDefinedElement);
    /**
     * Customizes a specific tooltip&apos;s appearance.
     */
    customizeTooltip?: (info: {
      item?: DevExpress.viz.dxFunnel.Item;
      value?: number;
      valueText?: string;
      percent?: number;
      percentText?: string;
    }) => any;
  }
  /**
   * The LinearGauge is a UI component that indicates values on a linear numeric scale.
   */
  export class dxLinearGauge extends BaseGauge<dxLinearGaugeOptions> {}
  module dxLinearGauge {
    export type DisposingEvent = DevExpress.events.EventInfo<dxLinearGauge>;
    export type DrawnEvent = DevExpress.events.EventInfo<dxLinearGauge>;
    export type ExportedEvent = DevExpress.events.EventInfo<dxLinearGauge>;
    export type ExportingEvent = DevExpress.events.EventInfo<dxLinearGauge> &
      DevExpress.viz.BaseWidget.ExportInfo;
    export type FileSavingEvent =
      DevExpress.viz.BaseWidget.FileSavingEventInfo<dxLinearGauge>;
    export type IncidentOccurredEvent =
      DevExpress.events.EventInfo<dxLinearGauge> &
        DevExpress.viz.BaseWidget.IncidentInfo;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxLinearGauge>;
    export type OptionChangedEvent =
      DevExpress.events.EventInfo<dxLinearGauge> &
        DevExpress.events.ChangedOptionInfo;
    export type Properties = dxLinearGaugeOptions;
    export type TooltipHiddenEvent =
      DevExpress.events.EventInfo<dxLinearGauge> &
        DevExpress.viz.BaseGauge.TooltipInfo;
    export type TooltipShownEvent = DevExpress.events.EventInfo<dxLinearGauge> &
      DevExpress.viz.BaseGauge.TooltipInfo;
  }
  /**
   * @deprecated use Properties instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxLinearGaugeOptions
    extends BaseGaugeOptions<dxLinearGauge> {
    /**
     * Specifies the properties required to set the geometry of the LinearGauge UI component.
     */
    geometry?: {
      /**
       * Indicates whether to display the LinearGauge UI component vertically or horizontally.
       */
      orientation?: DevExpress.common.Orientation;
    };
    /**
     * Specifies gauge range container properties.
     */
    rangeContainer?: dxLinearGaugeRangeContainer;
    /**
     * Specifies the gauge&apos;s scale properties.
     */
    scale?: dxLinearGaugeScale;
    /**
     * Specifies the appearance properties of subvalue indicators.
     */
    subvalueIndicator?: GaugeIndicator;
    /**
     * Specifies the appearance properties of the value indicator.
     */
    valueIndicator?: GaugeIndicator;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxLinearGaugeRangeContainer extends BaseGaugeRangeContainer {
    /**
     * Specifies the orientation of the range container. Applies only if the geometry.orientation property is &apos;vertical&apos;.
     */
    horizontalOrientation?: DevExpress.common.HorizontalAlignment;
    /**
     * Specifies the orientation of the range container. Applies only if the geometry.orientation property is &apos;horizontal&apos;.
     */
    verticalOrientation?: DevExpress.common.VerticalAlignment;
    /**
     * Specifies the width of the range container&apos;s start and end boundaries in the LinearGauge UI component.
     */
    width?:
      | {
          /**
           * Specifies a start width of a range container.
           */
          start?: number;
          /**
           * Specifies an end width of a range container.
           */
          end?: number;
        }
      | number;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxLinearGaugeScale extends BaseGaugeScale {
    /**
     * Specifies the orientation of scale ticks. Applies only if the geometry.orientation property is &apos;vertical&apos;.
     */
    horizontalOrientation?: DevExpress.common.HorizontalAlignment;
    /**
     * Specifies common properties for scale labels.
     */
    label?: dxLinearGaugeScaleLabel;
    /**
     * Specifies the minimum distance between two neighboring major ticks in pixels.
     */
    scaleDivisionFactor?: number;
    /**
     * Specifies the orientation of scale ticks. Applies only if the geometry.orientation property is &apos;horizontal&apos;.
     */
    verticalOrientation?: DevExpress.common.VerticalAlignment;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxLinearGaugeScaleLabel extends BaseGaugeScaleLabel {
    /**
     * Specifies the spacing between scale labels and ticks.
     */
    indentFromTick?: number;
  }
  /**
   * The PieChart is a UI component that visualizes data as a circle divided into sectors that each represents a portion of the whole.
   */
  export class dxPieChart extends BaseChart<dxPieChartOptions> {
    /**
     * Gets the radius of the doughnut hole in pixels. Applies only when the type is &apos;doughnut&apos; or &apos;donut&apos;.
     */
    getInnerRadius(): number;
  }
  module dxPieChart {
    export type DisposingEvent = DevExpress.events.EventInfo<dxPieChart>;
    export type DoneEvent = DevExpress.events.EventInfo<dxPieChart>;
    export type DrawnEvent = DevExpress.events.EventInfo<dxPieChart>;
    export type ExportedEvent = DevExpress.events.EventInfo<dxPieChart>;
    export type ExportingEvent = DevExpress.events.EventInfo<dxPieChart> &
      DevExpress.viz.BaseWidget.ExportInfo;
    export type FileSavingEvent =
      DevExpress.viz.BaseWidget.FileSavingEventInfo<dxPieChart>;
    export type IncidentOccurredEvent =
      DevExpress.events.EventInfo<dxPieChart> &
        DevExpress.viz.BaseWidget.IncidentInfo;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxPieChart>;
    export type LegendClickEvent = DevExpress.events.NativeEventInfo<
      dxPieChart,
      MouseEvent | PointerEvent
    > & {
      readonly target: string | number;
      readonly points: Array<piePointObject>;
    };
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxPieChart> &
      DevExpress.events.ChangedOptionInfo;
    export type PieChartAnnotationLocation = 'center' | 'edge';
    export type PieChartLabelOverlap = 'hide' | 'none' | 'shift';
    export type PieChartLegendHoverMode = 'none' | 'allArgumentPoints';
    export type PieChartSegmentDirection = 'anticlockwise' | 'clockwise';
    export type PieChartSeriesInteractionMode = 'none' | 'onlyPoint';
    export type PieChartType = 'donut' | 'doughnut' | 'pie';
    export type PointClickEvent = DevExpress.events.NativeEventInfo<
      dxPieChart,
      MouseEvent | PointerEvent
    > &
      DevExpress.viz.BaseChart.PointInteractionInfo;
    export type PointHoverChangedEvent =
      DevExpress.events.EventInfo<dxPieChart> &
        DevExpress.viz.BaseChart.PointInteractionInfo;
    export type PointSelectionChangedEvent =
      DevExpress.events.EventInfo<dxPieChart> &
        DevExpress.viz.BaseChart.PointInteractionInfo;
    export type Properties = dxPieChartOptions;
    export type SmallValuesGroupingMode =
      | 'none'
      | 'smallValueThreshold'
      | 'topN';
    export type TooltipHiddenEvent = DevExpress.events.EventInfo<dxPieChart> &
      DevExpress.viz.BaseChart.TooltipInfo;
    export type TooltipShownEvent = DevExpress.events.EventInfo<dxPieChart> &
      DevExpress.viz.BaseChart.TooltipInfo;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxPieChartAdaptiveLayout extends BaseChartAdaptiveLayout {
    /**
     * Specifies whether point labels should be kept when the UI component adapts the layout.
     */
    keepLabels?: boolean;
  }
  /**
   * 
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxPieChartAnnotationConfig
    extends dxPieChartCommonAnnotationConfig {
    /**
     * Specifies the annotation&apos;s name.
     */
    name?: string;
  }
  /**
   * 
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxPieChartCommonAnnotationConfig
    extends BaseWidgetAnnotationConfig {
    /**
     * Specifies an annotation&apos;s position on the surface of a specific argument.
     */
    location?: DevExpress.viz.dxPieChart.PieChartAnnotationLocation;
    /**
     * Positions the annotation relative to a specific argument.
     */
    argument?: number | Date | string;
    /**
     * Anchors the annotation to a series point. Accepts the name of the point&apos;s series.
     */
    series?: string;
    /**
     * Customizes the text and appearance of the annotation&apos;s tooltip.
     */
    customizeTooltip?: (annotation: dxPieChartAnnotationConfig | any) => any;
    /**
     * Specifies a custom template for the annotation. Applies only if the type is &apos;custom&apos;.
     */
    template?:
      | DevExpress.core.template
      | ((
          annotation: dxPieChartAnnotationConfig | any,
          element: SVGGElement
        ) => string | DevExpress.core.UserDefinedElement<SVGElement>);
    /**
     * Specifies a custom template for an annotation&apos;s tooltip.
     */
    tooltipTemplate?:
      | DevExpress.core.template
      | ((
          annotation: dxPieChartAnnotationConfig | any,
          element: DevExpress.core.DxElement
        ) => string | DevExpress.core.UserDefinedElement);
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxPieChartLegend extends BaseChartLegend {
    /**
     * Specifies the text for a hint that appears when a user hovers the mouse pointer over a legend item.
     */
    customizeHint?: (pointInfo: {
      pointName?: any;
      pointIndex?: number;
      pointColor?: string;
    }) => string;
    /**
     * Allows you to change the order, text, and visibility of legend items.
     */
    customizeItems?: (
      items: Array<DevExpress.viz.dxPieChart.LegendItem>
    ) => Array<DevExpress.viz.dxPieChart.LegendItem>;
    /**
     * Specifies a callback function that returns the text to be displayed by a legend item.
     */
    customizeText?: (pointInfo: {
      pointName?: any;
      pointIndex?: number;
      pointColor?: string;
    }) => string;
    /**
     * Specifies what chart elements to highlight when a corresponding item in the legend is hovered over.
     */
    hoverMode?: DevExpress.viz.dxPieChart.PieChartLegendHoverMode;
    /**
     * Specifies an SVG element that serves as a custom legend item marker.
     */
    markerTemplate?:
      | DevExpress.core.template
      | ((
          legendItem: DevExpress.viz.dxPieChart.LegendItem,
          element: SVGGElement
        ) => string | DevExpress.core.UserDefinedElement<SVGElement>);
  }
  /**
   * @deprecated use Properties instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxPieChartOptions extends BaseChartOptions<dxPieChart> {
    /**
     * Specifies adaptive layout properties.
     */
    adaptiveLayout?: dxPieChartAdaptiveLayout;
    /**
     * Specifies a custom template for content in the pie&apos;s center.
     */
    centerTemplate?:
      | DevExpress.core.template
      | ((
          component: dxPieChart,
          element: SVGGElement
        ) => string | DevExpress.core.UserDefinedElement<SVGElement>);
    /**
     * An object defining the configuration properties that are common for all series of the PieChart UI component.
     */
    commonSeriesSettings?: any;
    /**
     * Specifies the diameter of the pie.
     */
    diameter?: number;
    /**
     * Specifies the fraction of the inner radius relative to the total radius in the series of the &apos;doughnut&apos; type. The value should be between 0 and 1.
     */
    innerRadius?: number;
    /**
     * Specifies PieChart legend properties.
     */
    legend?: dxPieChartLegend;
    /**
     * Specifies the minimum diameter of the pie.
     */
    minDiameter?: number;
    /**
     * A function that is executed when a legend item is clicked or tapped.
     */
    onLegendClick?:
      | ((e: DevExpress.viz.dxPieChart.LegendClickEvent) => void)
      | string;
    /**
     * Sets the palette to be used to colorize series and their elements.
     */
    palette?: Array<string> | DevExpress.common.charts.Palette;
    /**
     * Specifies how a chart must behave when point labels overlap.
     */
    resolveLabelOverlapping?: DevExpress.viz.dxPieChart.PieChartLabelOverlap;
    /**
     * Specifies the direction that the pie chart segments will occupy.
     */
    segmentsDirection?: DevExpress.viz.dxPieChart.PieChartSegmentDirection;
    /**
     * Specifies properties for the series of the PieChart UI component.
     */
    series?: PieChartSeries | Array<PieChartSeries>;
    /**
     * Defines properties for the series template.
     */
    seriesTemplate?: {
      /**
       * Specifies a callback function that returns a series object with individual series settings.
       */
      customizeSeries?: (seriesName: any) => PieChartSeries;
      /**
       * Specifies a data source field that represents the series name.
       */
      nameField?: string;
    };
    /**
     * Allows you to display several adjoining pies in the same size.
     */
    sizeGroup?: string;
    /**
     * Specifies the angle in arc degrees from which the first segment of a pie chart should start.
     */
    startAngle?: number;
    /**
     * Specifies the type of the pie chart series.
     */
    type?: DevExpress.viz.dxPieChart.PieChartType;
    /**
     * Specifies the annotation collection.
     */
    annotations?: Array<dxPieChartAnnotationConfig | any>;
    /**
     * Specifies settings common for all annotations in the PieChart.
     */
    commonAnnotationSettings?: dxPieChartCommonAnnotationConfig;
    /**
     * Customizes an individual annotation.
     */
    customizeAnnotation?: (
      annotation: dxPieChartAnnotationConfig | any
    ) => dxPieChartAnnotationConfig;
  }
  /**
   * This section lists the objects that define properties to be used to configure series of particular types.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxPieChartSeriesTypes {
    /**
     * An object that defines configuration properties for chart series.
     */
    CommonPieChartSeries?: dxPieChartSeriesTypesCommonPieChartSeries;
    /**
     * An object defining a series of the doughnut type.
     */
    DoughnutSeries?: any;
    /**
     * An object defining a series of the pie type.
     */
    PieSeries?: any;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxPieChartSeriesTypesCommonPieChartSeries {
    /**
     * Specifies the data source field that provides arguments for series points.
     */
    argumentField?: string;
    /**
     * Specifies the required type for series arguments.
     */
    argumentType?: DevExpress.common.charts.ChartsDataType;
    /**
     * An object defining the series border configuration properties.
     */
    border?: {
      /**
       * Sets a border color for a series.
       */
      color?: string;
      /**
       * Specifies a dash style for the border of a series point.
       */
      dashStyle?: DevExpress.common.charts.DashStyle;
      /**
       * Sets border visibility for a series.
       */
      visible?: boolean;
      /**
       * Sets a border width for a series in pixels.
       */
      width?: number;
    };
    /**
     * Specifies a series color.
     */
    color?: string;
    /**
     * Specifies the chart elements to highlight when a series is hovered over.
     */
    hoverMode?: DevExpress.viz.dxPieChart.PieChartSeriesInteractionMode;
    /**
     * An object defining configuration properties for a hovered series.
     */
    hoverStyle?: {
      /**
       * An object defining the border properties for a hovered series.
       */
      border?: {
        /**
         * Sets a border color for the series when it is hovered over.
         */
        color?: string;
        /**
         * Specifies a dash style for the border of a series point when this point is hovered over.
         */
        dashStyle?: DevExpress.common.charts.DashStyle;
        /**
         * Sets border visibility for a hovered series.
         */
        visible?: boolean;
        /**
         * Sets a border width for a hovered series.
         */
        width?: number;
      };
      /**
       * Sets a color for the series when it is hovered over.
       */
      color?: string;
      /**
       * Specifies the hatching properties to be applied when a point is hovered over.
       */
      hatching?: {
        /**
         * Specifies how to apply hatching to highlight the hovered point.
         */
        direction?: DevExpress.common.charts.HatchDirection;
        /**
         * Specifies the opacity of hatching lines.
         */
        opacity?: number;
        /**
         * Specifies the distance between two hatching lines in pixels.
         */
        step?: number;
        /**
         * Specifies the width of hatching lines in pixels.
         */
        width?: number;
      };
    };
    /**
     * An object defining the label configuration properties.
     */
    label?: {
      /**
       * Formats the point argument before it is displayed in the point label. To format the point value, use the format property.
       */
      argumentFormat?: DevExpress.ui.Format;
      /**
       * Colors the point labels&apos; background. The default color is inherited from the points.
       */
      backgroundColor?: string;
      /**
       * Specifies border properties for point labels.
       */
      border?: {
        /**
         * Specifies a border color for point labels.
         */
        color?: string;
        /**
         * Specifies a dash style for the borders of point labels.
         */
        dashStyle?: DevExpress.common.charts.DashStyle;
        /**
         * Indicates whether or not borders are visible in point labels.
         */
        visible?: boolean;
        /**
         * Specifies the border width for point labels.
         */
        width?: number;
      };
      /**
       * Specifies connector properties for series point labels.
       */
      connector?: {
        /**
         * Specifies the color of label connectors.
         */
        color?: string;
        /**
         * Indicates whether or not label connectors are visible.
         */
        visible?: boolean;
        /**
         * Specifies the width of label connectors.
         */
        width?: number;
      };
      /**
       * Specifies a callback function that returns the text to be displayed by point labels.
       */
      customizeText?: (pointInfo: any) => string;
      /**
       * Specifies font properties for the text displayed in point labels.
       */
      font?: Font;
      /**
       * Formats a value before it is displayed in a point label.
       */
      format?: DevExpress.ui.Format;
      /**
       * Specifies a label position relative to the chart.
       */
      position?: DevExpress.common.charts.LabelPosition;
      /**
       * Specifies how to shift labels from their initial position in a radial direction in pixels.
       */
      radialOffset?: number;
      /**
       * Specifies the angle used to rotate point labels from their initial position.
       */
      rotationAngle?: number;
      /**
       * Specifies what to do with label texts that overflow the allocated space after applying wordWrap: hide, truncate them and display an ellipsis, or do nothing.
       */
      textOverflow?: DevExpress.common.charts.TextOverflow;
      /**
       * Specifies the visibility of point labels.
       */
      visible?: boolean;
      /**
       * Specifies how to wrap label texts if they do not fit into a single line.
       */
      wordWrap?: DevExpress.common.charts.WordWrap;
      /**
       * 
       */
      displayFormat?: string;
    };
    /**
     * Specifies how many points are acceptable to be in a series to display all labels for these points. Otherwise, the labels will not be displayed.
     */
    maxLabelCount?: number;
    /**
     * Specifies a minimal size of a displayed pie segment.
     */
    minSegmentSize?: number;
    /**
     * Specifies the chart elements to highlight when the series is selected.
     */
    selectionMode?: DevExpress.viz.dxPieChart.PieChartSeriesInteractionMode;
    /**
     * An object defining configuration properties for the series when it is selected.
     */
    selectionStyle?: {
      /**
       * An object defining the border properties for a selected series.
       */
      border?: {
        /**
         * Sets a border color for a selected series.
         */
        color?: string;
        /**
         * Specifies a dash style for the border of a selected series point.
         */
        dashStyle?: DevExpress.common.charts.DashStyle;
        /**
         * Sets a border visibility for a selected series.
         */
        visible?: boolean;
        /**
         * Sets a border width for a selected series.
         */
        width?: number;
      };
      /**
       * Sets a color for a series when it is selected.
       */
      color?: string;
      /**
       * Specifies the hatching properties to be applied when a point is selected.
       */
      hatching?: {
        /**
         * Specifies how to apply hatching to highlight the selected point.
         */
        direction?: DevExpress.common.charts.HatchDirection;
        /**
         * Specifies the opacity of hatching lines.
         */
        opacity?: number;
        /**
         * Specifies the distance between two hatching lines in pixels.
         */
        step?: number;
        /**
         * Specifies the width of hatching lines in pixels.
         */
        width?: number;
      };
    };
    /**
     * Specifies chart segment grouping properties.
     */
    smallValuesGrouping?: {
      /**
       * Specifies the name of the grouped chart segment. This name represents the segment in the chart legend.
       */
      groupName?: string;
      /**
       * Specifies the segment grouping mode.
       */
      mode?: DevExpress.viz.dxPieChart.SmallValuesGroupingMode;
      /**
       * Specifies a threshold for segment values.
       */
      threshold?: number;
      /**
       * Specifies how many segments must not be grouped.
       */
      topCount?: number;
    };
    /**
     * Specifies the name of the data source field that provides data about a point.
     */
    tagField?: string;
    /**
     * Specifies the data source field that provides values for series points.
     */
    valueField?: string;
  }
  /**
   * The PolarChart is a UI component that visualizes data in a polar coordinate system.
   */
  export class dxPolarChart extends BaseChart<dxPolarChartOptions> {
    /**
     * Gets a value axis.
     */
    getValueAxis(): chartAxisObject;
    /**
     * Resets the value axis&apos; visual range to the data range or to the whole range if it is within the data range.
     */
    resetVisualRange(): void;
  }
  module dxPolarChart {
    export type ArgumentAxisClickEvent = DevExpress.events.NativeEventInfo<
      dxPolarChart,
      MouseEvent | PointerEvent
    > & {
      readonly argument: Date | number | string;
    };
    export type DisposingEvent = DevExpress.events.EventInfo<dxPolarChart>;
    export type DoneEvent = DevExpress.events.EventInfo<dxPolarChart>;
    export type DrawnEvent = DevExpress.events.EventInfo<dxPolarChart>;
    export type ExportedEvent = DevExpress.events.EventInfo<dxPolarChart>;
    export type ExportingEvent = DevExpress.events.EventInfo<dxPolarChart> &
      DevExpress.viz.BaseWidget.ExportInfo;
    export type FileSavingEvent =
      DevExpress.viz.BaseWidget.FileSavingEventInfo<dxPolarChart>;
    export type IncidentOccurredEvent =
      DevExpress.events.EventInfo<dxPolarChart> &
        DevExpress.viz.BaseWidget.IncidentInfo;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxPolarChart>;
    export type LegendClickEvent = DevExpress.events.Cancelable &
      DevExpress.events.NativeEventInfo<
        dxPolarChart,
        MouseEvent | PointerEvent
      > & {
        readonly target: polarChartSeriesObject;
      };
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxPolarChart> &
      DevExpress.events.ChangedOptionInfo;
    export type PointClickEvent = DevExpress.events.Cancelable &
      DevExpress.events.NativeEventInfo<
        dxPolarChart,
        MouseEvent | PointerEvent
      > &
      DevExpress.viz.BaseChart.PointInteractionInfo;
    export type PointHoverChangedEvent =
      DevExpress.events.EventInfo<dxPolarChart> &
        DevExpress.viz.BaseChart.PointInteractionInfo;
    export type PointSelectionChangedEvent =
      DevExpress.events.EventInfo<dxPolarChart> &
        DevExpress.viz.BaseChart.PointInteractionInfo;
    export type PolarChartSeriesType =
      | 'area'
      | 'bar'
      | 'line'
      | 'scatter'
      | 'stackedbar';
    export type Properties = dxPolarChartOptions;
    export type SeriesClickEvent = DevExpress.events.NativeEventInfo<
      dxPolarChart,
      MouseEvent | PointerEvent
    > & {
      readonly target: polarChartSeriesObject;
    };
    export type SeriesHoverChangedEvent =
      DevExpress.events.EventInfo<dxPolarChart> & SeriesInteractionInfo;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    interface SeriesInteractionInfo {
      target: polarChartSeriesObject;
    }
    export type SeriesSelectionChangedEvent =
      DevExpress.events.EventInfo<dxPolarChart> & SeriesInteractionInfo;
    export type TooltipHiddenEvent = DevExpress.events.EventInfo<dxPolarChart> &
      DevExpress.viz.BaseChart.TooltipInfo;
    export type TooltipShownEvent = DevExpress.events.EventInfo<dxPolarChart> &
      DevExpress.viz.BaseChart.TooltipInfo;
    export type ValueAxisVisualRangeUpdateMode = 'auto' | 'keep' | 'reset';
    export type ZoomEndEvent = DevExpress.events.Cancelable &
      DevExpress.events.NativeEventInfo<
        dxPolarChart,
        MouseEvent | TouchEvent
      > & {
        readonly axis: chartAxisObject;
        readonly range: VizRange;
        readonly previousRange: VizRange;
        readonly actionType: DevExpress.common.charts.ZoomPanAction;
        readonly zoomFactor: number;
        readonly shift: number;
      };
    export type ZoomStartEvent = DevExpress.events.Cancelable &
      DevExpress.events.NativeEventInfo<
        dxPolarChart,
        MouseEvent | TouchEvent
      > & {
        readonly axis: chartAxisObject;
        readonly range: VizRange;
        readonly actionType: DevExpress.common.charts.ZoomPanAction;
      };
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxPolarChartAdaptiveLayout extends BaseChartAdaptiveLayout {
    /**
     * Specifies the minimum container height at which the layout begins to adapt.
     */
    height?: number;
    /**
     * Specifies the minimum container width at which the layout begins to adapt.
     */
    width?: number;
  }
  /**
   * 
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxPolarChartAnnotationConfig
    extends dxPolarChartCommonAnnotationConfig {
    /**
     * Specifies the annotation&apos;s name.
     */
    name?: string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxPolarChartArgumentAxis
    extends dxPolarChartCommonAxisSettings {
    /**
     * Specifies the desired type of axis values.
     */
    argumentType?: DevExpress.common.charts.ChartsDataType;
    /**
     * Specifies the minimum distance between two neighboring major ticks in pixels. Applies only to the axes of the &apos;continuous&apos; and &apos;logarithmic&apos; types.
     */
    axisDivisionFactor?: number;
    /**
     * Specifies the order of categories on an axis of the &apos;discrete&apos; type.
     */
    categories?: Array<number | string | Date>;
    /**
     * Defines an array of the argument axis constant lines.
     */
    constantLines?: Array<dxPolarChartArgumentAxisConstantLines>;
    /**
     * Specifies whether or not to display the first point at the angle specified by the startAngle property.
     */
    firstPointOnStartAngle?: boolean;
    /**
     * Specifies the elements that will be highlighted when the argument axis is hovered over.
     */
    hoverMode?: DevExpress.common.charts.ArgumentAxisHoverMode;
    /**
     * Specifies properties for argument axis labels.
     */
    label?: dxPolarChartArgumentAxisLabel;
    /**
     * Specifies a value used to calculate the range on a logarithmic axis within which the axis should be linear. Applies only if the data source contains negative values or zeroes.
     */
    linearThreshold?: number;
    /**
     * Specifies the value to be raised to a power when generating ticks for a logarithmic axis.
     */
    logarithmBase?: number;
    /**
     * Specifies the properties of the minor ticks.
     */
    minorTick?: dxPolarChartArgumentAxisMinorTick;
    /**
     * Specifies the number of minor ticks between two neighboring major ticks.
     */
    minorTickCount?: number;
    /**
     * Specifies the interval between minor ticks.
     */
    minorTickInterval?: VizTimeInterval;
    /**
     * Specifies the value to be used as the origin for the argument axis.
     */
    originValue?: number;
    /**
     * Specifies the period of the argument values in the data source.
     */
    period?: number;
    /**
     * Specifies the angle in arc degrees to which the argument axis should be rotated. The positive values rotate the axis clockwise.
     */
    startAngle?: number;
    /**
     * Specifies properties for argument axis strips.
     */
    strips?: Array<dxPolarChartArgumentAxisStrips>;
    /**
     * An object defining the configuration properties for axis ticks.
     */
    tick?: dxPolarChartArgumentAxisTick;
    /**
     * Specifies an interval between axis ticks/grid lines.
     */
    tickInterval?: VizTimeInterval;
    /**
     * Specifies the required type of the argument axis.
     */
    type?: DevExpress.common.charts.AxisScaleType;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxPolarChartArgumentAxisConstantLines
    extends dxPolarChartCommonAxisSettingsConstantLineStyle {
    /**
     * Specifies whether to display the constant line behind or in front of the series.
     */
    displayBehindSeries?: boolean;
    /**
     * Specifies whether to extend the axis to display the constant line.
     */
    extendAxis?: boolean;
    /**
     * An object defining constant line label properties.
     */
    label?: dxPolarChartArgumentAxisConstantLinesLabel;
    /**
     * Specifies a value to be displayed by a constant line.
     */
    value?: number | Date | string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxPolarChartArgumentAxisConstantLinesLabel
    extends dxPolarChartCommonAxisSettingsConstantLineStyleLabel {
    /**
     * Specifies the text to be displayed in a constant line label.
     */
    text?: string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxPolarChartArgumentAxisLabel
    extends dxPolarChartCommonAxisSettingsLabel {
    /**
     * Specifies the text for a hint that appears when a user hovers the mouse pointer over a label on the argument axis.
     */
    customizeHint?: (argument: {
      value?: Date | number | string;
      valueText?: string;
    }) => string;
    /**
     * Specifies a callback function that returns the text to be displayed by argument axis labels.
     */
    customizeText?: (argument: {
      value?: Date | number | string;
      valueText?: string;
    }) => string;
    /**
     * Formats a value before it is displayed in an axis label.
     */
    format?: DevExpress.ui.Format;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxPolarChartArgumentAxisMinorTick
    extends dxPolarChartCommonAxisSettingsMinorTick {
    /**
     * Shifts minor ticks from the reference position.
     */
    shift?: number;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxPolarChartArgumentAxisStrips
    extends dxPolarChartCommonAxisSettingsStripStyle {
    /**
     * Specifies a color for a strip.
     */
    color?: string;
    /**
     * Specifies an end value for a strip.
     */
    endValue?: number | Date | string;
    /**
     * An object that defines the label configuration properties of a strip.
     */
    label?: dxPolarChartArgumentAxisStripsLabel;
    /**
     * Specifies a start value for a strip.
     */
    startValue?: number | Date | string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxPolarChartArgumentAxisStripsLabel
    extends dxPolarChartCommonAxisSettingsStripStyleLabel {
    /**
     * Specifies the text displayed in a strip.
     */
    text?: string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxPolarChartArgumentAxisTick
    extends dxPolarChartCommonAxisSettingsTick {
    /**
     * Shifts ticks from the reference position.
     */
    shift?: number;
  }
  /**
   * 
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxPolarChartCommonAnnotationConfig
    extends BaseChartAnnotationConfig {
    /**
     * Specifies the angle between the startAngle and the radius.
     */
    angle?: number;
    /**
     * Places an annotation at the specified distance from the center of the UI component.
     */
    radius?: number;
    /**
     * Customizes the text and appearance of the annotation&apos;s tooltip.
     */
    customizeTooltip?: (annotation: dxPolarChartAnnotationConfig | any) => any;
    /**
     * Specifies a custom template for the annotation. Applies only if the type is &apos;custom&apos;.
     */
    template?:
      | DevExpress.core.template
      | ((
          annotation: dxPolarChartAnnotationConfig | any,
          element: SVGGElement
        ) => string | DevExpress.core.UserDefinedElement<SVGElement>);
    /**
     * Specifies a custom template for an annotation&apos;s tooltip.
     */
    tooltipTemplate?:
      | DevExpress.core.template
      | ((
          annotation: dxPolarChartAnnotationConfig | any,
          element: DevExpress.core.DxElement
        ) => string | DevExpress.core.UserDefinedElement);
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxPolarChartCommonAxisSettings {
    /**
     * Specifies whether to allow decimal values on the axis. When false, the axis contains integer values only.
     */
    allowDecimals?: boolean;
    /**
     * Specifies the color of the line that represents an axis.
     */
    color?: string;
    /**
     * Specifies the appearance of all the UI component&apos;s constant lines.
     */
    constantLineStyle?: dxPolarChartCommonAxisSettingsConstantLineStyle;
    /**
     * Specifies whether ticks/grid lines of a discrete axis are located between labels or cross the labels.
     */
    discreteAxisDivisionMode?: DevExpress.common.charts.DiscreteAxisDivisionMode;
    /**
     * Specifies whether to force the axis to start and end on ticks.
     */
    endOnTick?: boolean;
    /**
     * An object defining the configuration properties for the grid lines of an axis in the PolarChart UI component.
     */
    grid?: {
      /**
       * Specifies a color for grid lines.
       */
      color?: string;
      /**
       * Specifies an opacity for grid lines.
       */
      opacity?: number;
      /**
       * Indicates whether or not the grid lines of an axis are visible.
       */
      visible?: boolean;
      /**
       * Specifies the width of grid lines.
       */
      width?: number;
    };
    /**
     * Indicates whether or not an axis is inverted.
     */
    inverted?: boolean;
    /**
     * An object defining the label configuration properties that are common for all axes in the PolarChart UI component.
     */
    label?: dxPolarChartCommonAxisSettingsLabel;
    /**
     * Specifies the properties of the minor grid.
     */
    minorGrid?: {
      /**
       * Specifies a color for the lines of the minor grid.
       */
      color?: string;
      /**
       * Specifies an opacity for the lines of the minor grid.
       */
      opacity?: number;
      /**
       * Indicates whether the minor grid is visible or not.
       */
      visible?: boolean;
      /**
       * Specifies a width for the lines of the minor grid.
       */
      width?: number;
    };
    /**
     * Specifies the properties of the minor ticks.
     */
    minorTick?: dxPolarChartCommonAxisSettingsMinorTick;
    /**
     * Specifies the opacity of the line that represents an axis.
     */
    opacity?: number;
    /**
     * An object defining configuration properties for strip style.
     */
    stripStyle?: dxPolarChartCommonAxisSettingsStripStyle;
    /**
     * An object defining the configuration properties for axis ticks.
     */
    tick?: dxPolarChartCommonAxisSettingsTick;
    /**
     * Indicates whether or not the line that represents an axis in a chart is visible.
     */
    visible?: boolean;
    /**
     * Specifies the width of the line that represents an axis in the chart.
     */
    width?: number;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxPolarChartCommonAxisSettingsConstantLineStyle {
    /**
     * Specifies a color for a constant line.
     */
    color?: string;
    /**
     * Specifies a dash style for a constant line.
     */
    dashStyle?: DevExpress.common.charts.DashStyle;
    /**
     * An object defining constant line label properties.
     */
    label?: dxPolarChartCommonAxisSettingsConstantLineStyleLabel;
    /**
     * Specifies a constant line width in pixels.
     */
    width?: number;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxPolarChartCommonAxisSettingsConstantLineStyleLabel {
    /**
     * Specifies font properties for a constant line label.
     */
    font?: Font;
    /**
     * Indicates whether or not to display labels for the axis constant lines.
     */
    visible?: boolean;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxPolarChartCommonAxisSettingsLabel {
    /**
     * Specifies font properties for axis labels.
     */
    font?: Font;
    /**
     * Specifies the spacing between an axis and its labels in pixels.
     */
    indentFromAxis?: number;
    /**
     * Decides how to arrange axis labels when there is not enough space to keep all of them.
     */
    overlappingBehavior?: DevExpress.common.charts.LabelOverlap;
    /**
     * Indicates whether or not axis labels are visible.
     */
    visible?: boolean;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxPolarChartCommonAxisSettingsMinorTick {
    /**
     * Specifies a color for the minor ticks.
     */
    color?: string;
    /**
     * Specifies minor tick length.
     */
    length?: number;
    /**
     * Specifies an opacity for the minor ticks.
     */
    opacity?: number;
    /**
     * Indicates whether or not the minor ticks are displayed on an axis.
     */
    visible?: boolean;
    /**
     * Specifies minor tick width.
     */
    width?: number;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxPolarChartCommonAxisSettingsStripStyle {
    /**
     * An object defining the configuration properties for a strip label style.
     */
    label?: dxPolarChartCommonAxisSettingsStripStyleLabel;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxPolarChartCommonAxisSettingsStripStyleLabel {
    /**
     * Specifies font properties for a strip label.
     */
    font?: Font;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxPolarChartCommonAxisSettingsTick {
    /**
     * Specifies ticks color.
     */
    color?: string;
    /**
     * Specifies tick length.
     */
    length?: number;
    /**
     * Specifies tick opacity.
     */
    opacity?: number;
    /**
     * Indicates whether or not ticks are visible on an axis.
     */
    visible?: boolean;
    /**
     * Specifies tick width.
     */
    width?: number;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxPolarChartCommonSeriesSettings
    extends dxPolarChartSeriesTypesCommonPolarChartSeries {
    /**
     * An object that specifies configuration properties for all series of the area type in the chart.
     */
    area?: any;
    /**
     * An object that specifies configuration properties for all series of the &apos;bar&apos; type in the chart.
     */
    bar?: any;
    /**
     * An object that specifies configuration properties for all series of the &apos;line&apos; type in the chart.
     */
    line?: any;
    /**
     * An object that specifies configuration properties for all series of the &apos;scatter&apos; type in the chart.
     */
    scatter?: any;
    /**
     * An object that specifies configuration properties for all series of the &apos;stackedBar&apos; type in the chart.
     */
    stackedbar?: any;
    /**
     * Sets a series type.
     */
    type?: DevExpress.viz.dxPolarChart.PolarChartSeriesType;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxPolarChartLegend extends BaseChartLegend {
    /**
     * Specifies the text for a hint that appears when a user hovers the mouse pointer over a legend item.
     */
    customizeHint?: (seriesInfo: {
      seriesName?: any;
      seriesIndex?: number;
      seriesColor?: string;
    }) => string;
    /**
     * Specifies a callback function that returns the text to be displayed by legend items.
     */
    customizeText?: (seriesInfo: {
      seriesName?: any;
      seriesIndex?: number;
      seriesColor?: string;
    }) => string;
    /**
     * Specifies what series elements to highlight when a corresponding item in the legend is hovered over.
     */
    hoverMode?: DevExpress.common.charts.LegendHoverMode;
  }
  /**
   * @deprecated use Properties instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxPolarChartOptions extends BaseChartOptions<dxPolarChart> {
    /**
     * Specifies adaptive layout properties.
     */
    adaptiveLayout?: dxPolarChartAdaptiveLayout;
    /**
     * Specifies the annotation collection.
     */
    annotations?: Array<dxPolarChartAnnotationConfig | any>;
    /**
     * Specifies argument axis properties for the PolarChart UI component.
     */
    argumentAxis?: dxPolarChartArgumentAxis;
    /**
     * Controls the padding and consequently the angular width of a group of bars with the same argument using relative units. Ignored if the barGroupWidth property is set.
     */
    barGroupPadding?: number;
    /**
     * Specifies a fixed angular width for groups of bars with the same argument, measured in degrees. Takes precedence over the barGroupPadding property.
     */
    barGroupWidth?: number;
    /**
     * Specifies settings common for all annotations in the PolarChart.
     */
    commonAnnotationSettings?: dxPolarChartCommonAnnotationConfig;
    /**
     * An object defining the configuration properties that are common for all axes of the PolarChart UI component.
     */
    commonAxisSettings?: dxPolarChartCommonAxisSettings;
    /**
     * An object defining the configuration properties that are common for all series of the PolarChart UI component.
     */
    commonSeriesSettings?: dxPolarChartCommonSeriesSettings;
    /**
     * Specifies the color of the parent page element.
     */
    containerBackgroundColor?: string;
    /**
     * Customizes an individual annotation.
     */
    customizeAnnotation?: (
      annotation: dxPolarChartAnnotationConfig | any
    ) => dxPolarChartAnnotationConfig;
    /**
     * An object providing properties for managing data from a data source.
     */
    dataPrepareSettings?: {
      /**
       * Specifies whether or not to validate the values from a data source.
       */
      checkTypeForAllData?: boolean;
      /**
       * Specifies whether or not to convert the values from a data source into the data type of an axis.
       */
      convertToAxisDataType?: boolean;
      /**
       * Specifies how to sort the series points.
       */
      sortingMethod?:
        | boolean
        | ((
            a: { arg?: Date | number | string; val?: Date | number | string },
            b: { arg?: Date | number | string; val?: Date | number | string }
          ) => number);
    };
    /**
     * Specifies the properties of a chart&apos;s legend.
     */
    legend?: dxPolarChartLegend;
    /**
     * Forces the UI component to treat negative values as zeroes. Applies to stacked-like series only.
     */
    negativesAsZeroes?: boolean;
    /**
     * A function that is executed when a label on the argument axis is clicked or tapped.
     */
    onArgumentAxisClick?:
      | ((e: {
          component?: dxPolarChart;
          element?: DevExpress.core.DxElement;
          model?: any;
          event?: DevExpress.events.DxEvent;
          argument?: Date | number | string;
        }) => void)
      | string;
    /**
     * A function that is executed when a legend item is clicked or tapped.
     */
    onLegendClick?:
      | ((e: DevExpress.viz.dxPolarChart.LegendClickEvent) => void)
      | string;
    /**
     * A function that is executed when a series is clicked or tapped.
     */
    onSeriesClick?:
      | ((e: DevExpress.viz.dxPolarChart.SeriesClickEvent) => void)
      | string;
    /**
     * A function that is executed after the pointer enters or leaves a series.
     */
    onSeriesHoverChanged?: (
      e: DevExpress.viz.dxPolarChart.SeriesHoverChangedEvent
    ) => void;
    /**
     * A function that is executed when a series is selected or selection is canceled.
     */
    onSeriesSelectionChanged?: (
      e: DevExpress.viz.dxPolarChart.SeriesSelectionChangedEvent
    ) => void;
    /**
     * A function that is executed when zooming or panning ends.
     */
    onZoomEnd?: (e: DevExpress.viz.dxPolarChart.ZoomEndEvent) => void;
    /**
     * A function that is executed when zooming or panning begins.
     */
    onZoomStart?: (e: DevExpress.viz.dxPolarChart.ZoomStartEvent) => void;
    /**
     * Specifies how the chart must behave when series point labels overlap.
     */
    resolveLabelOverlapping?: DevExpress.common.charts.LabelOverlap;
    /**
     * Specifies properties for PolarChart UI component series.
     */
    series?: PolarChartSeries | Array<PolarChartSeries>;
    /**
     * Specifies whether a single series or multiple series can be selected in the chart.
     */
    seriesSelectionMode?: DevExpress.common.SingleOrMultiple;
    /**
     * Defines properties for the series template.
     */
    seriesTemplate?: {
      /**
       * Specifies a callback function that returns a series object with individual series settings.
       */
      customizeSeries?: (seriesName: any) => PolarChartSeries;
      /**
       * Specifies a data source field that represents the series name.
       */
      nameField?: string;
    };
    /**
     * Configures tooltips.
     */
    tooltip?: dxPolarChartTooltip;
    /**
     * Indicates whether or not to display a &apos;spider web&apos;.
     */
    useSpiderWeb?: boolean;
    /**
     * Specifies value axis properties for the PolarChart UI component.
     */
    valueAxis?: dxPolarChartValueAxis;
  }
  /**
   * This section lists objects that define properties used to configure series of specific types.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxPolarChartSeriesTypes {
    /**
     * An object that defines configuration properties for polar chart series.
     */
    CommonPolarChartSeries?: dxPolarChartSeriesTypesCommonPolarChartSeries;
    /**
     * An object defining a series of the area type.
     */
    areapolarseries?: dxPolarChartSeriesTypesAreapolarseries;
    /**
     * An object defining a series of the bar type.
     */
    barpolarseries?: dxPolarChartSeriesTypesBarpolarseries;
    /**
     * An object defining a series of the line type.
     */
    linepolarseries?: dxPolarChartSeriesTypesLinepolarseries;
    /**
     * An object defining a series of the scatter type.
     */
    scatterpolarseries?: any;
    /**
     * An object defining a series of the stackedBar type.
     */
    stackedbarpolarseries?: dxPolarChartSeriesTypesStackedbarpolarseries;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxPolarChartSeriesTypesAreapolarseries
    extends dxPolarChartSeriesTypesCommonPolarChartSeries {
    /**
     * Specifies series elements to be highlighted when a user points to the series.
     */
    hoverMode?: 'nearestPoint' | 'includePoints' | 'excludePoints' | 'none';
    /**
     * An object defining configuration properties for points in line and area series.
     */
    point?: dxPolarChartSeriesTypesAreapolarseriesPoint;
    /**
     * Specifies series elements to be highlighted when a user selects the series.
     */
    selectionMode?: 'includePoints' | 'excludePoints' | 'none';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxPolarChartSeriesTypesAreapolarseriesPoint
    extends dxPolarChartSeriesTypesCommonPolarChartSeriesPoint {
    /**
     * Specifies the points visibility for a line and area series.
     */
    visible?: boolean;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxPolarChartSeriesTypesBarpolarseries
    extends dxPolarChartSeriesTypesCommonPolarChartSeries {
    /**
     * Specifies series elements to be highlighted when a user points to the series.
     */
    hoverMode?: 'onlyPoint' | 'allSeriesPoints' | 'allArgumentPoints' | 'none';
    /**
     * Specifies series elements to be highlighted when a user selects the series.
     */
    selectionMode?:
      | 'onlyPoint'
      | 'allSeriesPoints'
      | 'allArgumentPoints'
      | 'none';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxPolarChartSeriesTypesCommonPolarChartSeries {
    /**
     * Specifies the data source field that provides arguments for series points.
     */
    argumentField?: string;
    /**
     * Controls the padding and consequently the angular width of all bars in a series using relative units. Ignored if the barWidth property is set.
     */
    barPadding?: number;
    /**
     * Specifies a fixed angular width for all bars in a series, measured in degrees. Takes precedence over the barPadding property.
     */
    barWidth?: number;
    /**
     * An object defining the series border configuration properties.
     */
    border?: {
      /**
       * Sets a border color for a series.
       */
      color?: string;
      /**
       * Specifies a dash style for the borders of series points.
       */
      dashStyle?: DevExpress.common.charts.DashStyle;
      /**
       * Sets border visibility for a series.
       */
      visible?: boolean;
      /**
       * Sets a border width for a series in pixels.
       */
      width?: number;
    };
    /**
     * Specifies whether or not to close the chart by joining the end point with the first point.
     */
    closed?: boolean;
    /**
     * Specifies a series color.
     */
    color?: string;
    /**
     * Specifies the dash style of the series&apos; line.
     */
    dashStyle?: DevExpress.common.charts.DashStyle;
    /**
     * Specifies the series elements to highlight when a series is hovered over.
     */
    hoverMode?: DevExpress.common.charts.SeriesHoverMode;
    /**
     * An object defining configuration properties for a hovered series.
     */
    hoverStyle?: {
      /**
       * An object defining the border properties for a hovered series.
       */
      border?: {
        /**
         * Sets a border color for a hovered series.
         */
        color?: string;
        /**
         * Specifies a dash style for the borders of point labels.
         */
        dashStyle?: DevExpress.common.charts.DashStyle;
        /**
         * Sets a border visibility for a hovered series.
         */
        visible?: boolean;
        /**
         * Sets a border width for a hovered series.
         */
        width?: number;
      };
      /**
       * Sets a color for a series when it is hovered over.
       */
      color?: string;
      /**
       * Specifies the dash style for the line in a hovered series.
       */
      dashStyle?: DevExpress.common.charts.DashStyle;
      /**
       * Specifies the hatching properties to be applied when a series is hovered over.
       */
      hatching?: {
        /**
         * Specifies how to apply hatching to highlight the hovered series.
         */
        direction?: DevExpress.common.charts.HatchDirection;
        /**
         * Specifies the opacity of hatching lines.
         */
        opacity?: number;
        /**
         * Specifies the distance between hatching lines in pixels.
         */
        step?: number;
        /**
         * Specifies the width of hatching lines in pixels.
         */
        width?: number;
      };
      /**
       * Specifies the width of a line in a hovered series.
       */
      width?: number;
    };
    /**
     * Specifies whether the series should ignore null data points.
     */
    ignoreEmptyPoints?: boolean;
    /**
     * An object defining the label configuration properties.
     */
    label?: dxPolarChartSeriesTypesCommonPolarChartSeriesLabel;
    /**
     * Specifies how many points are acceptable to be in a series to display all labels for these points. Otherwise, the labels will not be displayed.
     */
    maxLabelCount?: number;
    /**
     * Specifies the minimal length of a displayed bar in pixels.
     */
    minBarSize?: number;
    /**
     * Specifies opacity for a series.
     */
    opacity?: number;
    /**
     * An object defining configuration properties for points in line and area series.
     */
    point?: dxPolarChartSeriesTypesCommonPolarChartSeriesPoint;
    /**
     * Specifies the series elements to highlight when the series is selected.
     */
    selectionMode?: DevExpress.common.charts.SeriesSelectionMode;
    /**
     * An object defining configuration properties for a selected series.
     */
    selectionStyle?: {
      /**
       * An object defining the border properties for a selected series.
       */
      border?: {
        /**
         * Sets a border color for a selected series.
         */
        color?: string;
        /**
         * Specifies a dash style for the borders of point labels.
         */
        dashStyle?: DevExpress.common.charts.DashStyle;
        /**
         * Sets border visibility for a selected series.
         */
        visible?: boolean;
        /**
         * Sets a border width for a selected series.
         */
        width?: number;
      };
      /**
       * Sets a color for a series when it is selected.
       */
      color?: string;
      /**
       * Specifies the dash style for the line in a selected series.
       */
      dashStyle?: DevExpress.common.charts.DashStyle;
      /**
       * Specifies the hatching properties to be applied when a series is selected.
       */
      hatching?: {
        /**
         * Specifies how to apply hatching to highlight a selected series.
         */
        direction?: DevExpress.common.charts.HatchDirection;
        /**
         * Specifies the opacity of hatching lines.
         */
        opacity?: number;
        /**
         * Specifies the distance between hatching lines in pixels.
         */
        step?: number;
        /**
         * Specifies the width of hatching lines in pixels.
         */
        width?: number;
      };
      /**
       * Specifies the width of a line in a selected series.
       */
      width?: number;
    };
    /**
     * Specifies whether or not to show the series in the chart&apos;s legend.
     */
    showInLegend?: boolean;
    /**
     * Specifies the name of the stack where the values of the &apos;stackedBar&apos; series must be located.
     */
    stack?: string;
    /**
     * Specifies the name of the data source field that provides data about a point.
     */
    tagField?: string;
    /**
     * Configures error bars.
     */
    valueErrorBar?: {
      /**
       * Specifies the color of error bars.
       */
      color?: string;
      /**
       * Specifies whether error bars must be displayed in full or partially.
       */
      displayMode?: DevExpress.common.charts.ValueErrorBarDisplayMode;
      /**
       * Specifies the length of the lines that indicate error bar edges.
       */
      edgeLength?: number;
      /**
       * Specifies the data field that provides data for high error values.
       */
      highValueField?: string;
      /**
       * Specifies the width of the error bar line.
       */
      lineWidth?: number;
      /**
       * Specifies the data field that provides data for low error values.
       */
      lowValueField?: string;
      /**
       * Specifies the opacity of error bars.
       */
      opacity?: number;
      /**
       * Specifies how error bar values must be calculated.
       */
      type?: DevExpress.common.charts.ValueErrorBarType;
      /**
       * Specifies the value to be used for generating error bars.
       */
      value?: number;
    };
    /**
     * Specifies the data source field that provides values for series points.
     */
    valueField?: string;
    /**
     * Specifies the visibility of a series.
     */
    visible?: boolean;
    /**
     * Specifies a line width.
     */
    width?: number;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxPolarChartSeriesTypesCommonPolarChartSeriesLabel {
    /**
     * Formats the point argument before it is displayed in the point label. To format the point value, use the format property.
     */
    argumentFormat?: DevExpress.ui.Format;
    /**
     * Colors the point labels&apos; background. The default color is inherited from the points.
     */
    backgroundColor?: string;
    /**
     * Specifies border properties for point labels.
     */
    border?: {
      /**
       * Specifies a border color for point labels.
       */
      color?: string;
      /**
       * Specifies a dash style for the borders of point labels.
       */
      dashStyle?: DevExpress.common.charts.DashStyle;
      /**
       * Indicates whether borders are visible in point labels.
       */
      visible?: boolean;
      /**
       * Specifies the border width for point labels.
       */
      width?: number;
    };
    /**
     * Specifies connector properties for series point labels.
     */
    connector?: {
      /**
       * Specifies the color of label connectors.
       */
      color?: string;
      /**
       * Indicates whether or not label connectors are visible.
       */
      visible?: boolean;
      /**
       * Specifies the width of label connectors.
       */
      width?: number;
    };
    /**
     * Specifies a callback function that returns the text to be displayed by point labels.
     */
    customizeText?: (pointInfo: any) => string;
    /**
     * Specifies font properties for the text displayed in point labels.
     */
    font?: Font;
    /**
     * Formats a value before it is displayed in a point label.
     */
    format?: DevExpress.ui.Format;
    /**
     * Specifies a label position in bar-like series.
     */
    position?: DevExpress.common.charts.RelativePosition;
    /**
     * Specifies the angle used to rotate point labels from their initial position.
     */
    rotationAngle?: number;
    /**
     * Specifies whether or not to show a label when the point has a zero value.
     */
    showForZeroValues?: boolean;
    /**
     * Specifies the visibility of point labels.
     */
    visible?: boolean;
    /**
     * 
     */
    displayFormat?: string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxPolarChartSeriesTypesCommonPolarChartSeriesPoint {
    /**
     * Specifies border properties for points in the line and area series.
     */
    border?: {
      /**
       * Sets a border color for points in the line and area series.
       */
      color?: string;
      /**
       * Sets border visibility for points in the line and area series.
       */
      visible?: boolean;
      /**
       * Sets a border width for points in the line or area series.
       */
      width?: number;
    };
    /**
     * Specifies the points color.
     */
    color?: string;
    /**
     * Specifies what series points to highlight when a point is hovered over.
     */
    hoverMode?: DevExpress.common.charts.PointInteractionMode;
    /**
     * An object defining configuration properties for a hovered point.
     */
    hoverStyle?: {
      /**
       * An object defining the border properties for a hovered point.
       */
      border?: {
        /**
         * Sets a border color for a hovered point.
         */
        color?: string;
        /**
         * Sets border visibility for a hovered point.
         */
        visible?: boolean;
        /**
         * Sets a border width for a hovered point.
         */
        width?: number;
      };
      /**
       * Sets a color for a point when it is hovered over.
       */
      color?: string;
      /**
       * Specifies the diameter of a hovered point in the series that represents data points as symbols (not as bars for instance).
       */
      size?: number;
    };
    /**
     * An object specifying the parameters of an image that is used as a point marker.
     */
    image?:
      | string
      | {
          /**
           * Specifies the height of an image that is used as a point marker.
           */
          height?: number;
          /**
           * Specifies a URL leading to the image to be used as a point marker.
           */
          url?: string;
          /**
           * Specifies the width of an image that is used as a point marker.
           */
          width?: number;
        };
    /**
     * Specifies what series points to highlight when a point is selected.
     */
    selectionMode?: DevExpress.common.charts.PointInteractionMode;
    /**
     * An object defining configuration properties for a selected point.
     */
    selectionStyle?: {
      /**
       * An object defining the border properties for a selected point.
       */
      border?: {
        /**
         * Sets a border color for a selected point.
         */
        color?: string;
        /**
         * Sets border visibility for a selected point.
         */
        visible?: boolean;
        /**
         * Sets a border width for a selected point.
         */
        width?: number;
      };
      /**
       * Sets a color for a point when it is selected.
       */
      color?: string;
      /**
       * Specifies the diameter of a selected point in the series that represents data points as symbols (not as bars for instance).
       */
      size?: number;
    };
    /**
     * Specifies the point diameter in pixels for those series that represent data points as symbols (not as bars for instance).
     */
    size?: number;
    /**
     * Specifies a symbol for presenting points of the line and area series.
     */
    symbol?: DevExpress.common.charts.PointSymbol;
    /**
     * Specifies the points visibility for a line and area series.
     */
    visible?: boolean;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxPolarChartSeriesTypesLinepolarseries
    extends dxPolarChartSeriesTypesCommonPolarChartSeries {
    /**
     * Specifies series elements to be highlighted when a user points to the series.
     */
    hoverMode?: 'nearestPoint' | 'includePoints' | 'excludePoints' | 'none';
    /**
     * Specifies series elements to be highlighted when a user selects the series.
     */
    selectionMode?: 'includePoints' | 'excludePoints' | 'none';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxPolarChartSeriesTypesStackedbarpolarseries
    extends dxPolarChartSeriesTypesCommonPolarChartSeries {
    /**
     * Specifies series elements to be highlighted when a user points to the series.
     */
    hoverMode?: 'onlyPoint' | 'allSeriesPoints' | 'allArgumentPoints' | 'none';
    /**
     * An object defining the label configuration properties.
     */
    label?: dxPolarChartSeriesTypesStackedbarpolarseriesLabel;
    /**
     * Specifies series elements to be highlighted when a user selects the series.
     */
    selectionMode?:
      | 'onlyPoint'
      | 'allSeriesPoints'
      | 'allArgumentPoints'
      | 'none';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxPolarChartSeriesTypesStackedbarpolarseriesLabel
    extends dxPolarChartSeriesTypesCommonPolarChartSeriesLabel {
    /**
     * Specifies a label position in bar-like series.
     */
    position?: DevExpress.common.charts.RelativePosition;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxPolarChartTooltip extends BaseChartTooltip {
    /**
     * Specifies whether the tooltip is shared across all series points with the same argument.
     */
    shared?: boolean;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxPolarChartValueAxis
    extends dxPolarChartCommonAxisSettings {
    /**
     * Specifies a coefficient for dividing the value axis.
     */
    axisDivisionFactor?: number;
    /**
     * Specifies the order of categories on an axis of the &apos;discrete&apos; type.
     */
    categories?: Array<number | string | Date>;
    /**
     * Defines an array of the value axis constant lines.
     */
    constantLines?: Array<dxPolarChartValueAxisConstantLines>;
    /**
     * Specifies whether to force the axis to start and end on ticks.
     */
    endOnTick?: boolean;
    /**
     * Specifies properties for value axis labels.
     */
    label?: dxPolarChartValueAxisLabel;
    /**
     * Specifies a value used to calculate the range on a logarithmic axis within which the axis should be linear. Applies only if the data source contains negative values or zeroes.
     */
    linearThreshold?: number;
    /**
     * Specifies the value to be raised to a power when generating ticks for a logarithmic axis.
     */
    logarithmBase?: number;
    /**
     * Specifies a coefficient that determines the spacing between the maximum series point and the axis.
     */
    maxValueMargin?: number;
    /**
     * Specifies a coefficient that determines the spacing between the minimum series point and the axis.
     */
    minValueMargin?: number;
    /**
     * Specifies the minimum length of the visual range.
     */
    minVisualRangeLength?: VizTimeInterval;
    /**
     * Specifies the number of minor ticks between two neighboring major ticks.
     */
    minorTickCount?: number;
    /**
     * Specifies the interval between minor ticks.
     */
    minorTickInterval?: VizTimeInterval;
    /**
     * Specifies whether or not to indicate a zero value on the value axis.
     */
    showZero?: boolean;
    /**
     * Specifies properties for value axis strips.
     */
    strips?: Array<dxPolarChartValueAxisStrips>;
    /**
     * An object defining the configuration properties for axis ticks.
     */
    tick?: dxPolarChartValueAxisTick;
    /**
     * Specifies an interval between axis ticks/grid lines.
     */
    tickInterval?: VizTimeInterval;
    /**
     * Specifies the required type of the value axis.
     */
    type?: DevExpress.common.charts.AxisScaleType;
    /**
     * Indicates whether to display series with indents from axis boundaries.
     */
    valueMarginsEnabled?: boolean;
    /**
     * Specifies the desired type of axis values.
     */
    valueType?: DevExpress.common.charts.ChartsDataType;
    /**
     * Defines the axis&apos; displayed range. Cannot be wider than the wholeRange.
     */
    visualRange?: VizRange | Array<number | string | Date>;
    /**
     * Specifies how the axis&apos;s visual range should behave when the PolarChart data is updated.
     */
    visualRangeUpdateMode?: DevExpress.viz.dxPolarChart.ValueAxisVisualRangeUpdateMode;
    /**
     * Defines the range where the axis can be zoomed.
     */
    wholeRange?: VizRange | Array<number | string | Date>;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxPolarChartValueAxisConstantLines
    extends dxPolarChartCommonAxisSettingsConstantLineStyle {
    /**
     * Specifies whether to display the constant line behind or in front of the series.
     */
    displayBehindSeries?: boolean;
    /**
     * Specifies whether to extend the axis to display the constant line.
     */
    extendAxis?: boolean;
    /**
     * An object defining constant line label properties.
     */
    label?: dxPolarChartValueAxisConstantLinesLabel;
    /**
     * Specifies a value to be displayed by a constant line.
     */
    value?: number | Date | string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxPolarChartValueAxisConstantLinesLabel
    extends dxPolarChartCommonAxisSettingsConstantLineStyleLabel {
    /**
     * Specifies the text to be displayed in a constant line label.
     */
    text?: string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxPolarChartValueAxisLabel
    extends dxPolarChartCommonAxisSettingsLabel {
    /**
     * Specifies the text for a hint that appears when a user hovers the mouse pointer over a label on the value axis.
     */
    customizeHint?: (axisValue: {
      value?: Date | number | string;
      valueText?: string;
    }) => string;
    /**
     * Specifies a callback function that returns the text to be displayed in value axis labels.
     */
    customizeText?: (axisValue: {
      value?: Date | number | string;
      valueText?: string;
    }) => string;
    /**
     * Formats a value before it is displayed in an axis label.
     */
    format?: DevExpress.ui.Format;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxPolarChartValueAxisStrips
    extends dxPolarChartCommonAxisSettingsStripStyle {
    /**
     * Specifies a color for a strip.
     */
    color?: string;
    /**
     * Specifies an end value for a strip.
     */
    endValue?: number | Date | string;
    /**
     * An object that defines the label configuration properties of a strip.
     */
    label?: dxPolarChartValueAxisStripsLabel;
    /**
     * Specifies a start value for a strip.
     */
    startValue?: number | Date | string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxPolarChartValueAxisStripsLabel
    extends dxPolarChartCommonAxisSettingsStripStyleLabel {
    /**
     * Specifies the text displayed in a strip.
     */
    text?: string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxPolarChartValueAxisTick
    extends dxPolarChartCommonAxisSettingsTick {
    /**
     * Indicates whether or not ticks are visible on an axis.
     */
    visible?: boolean;
  }
  /**
   * The RangeSelector is a UI component that allows a user to select a range of values on a scale.
   */
  export class dxRangeSelector extends BaseWidget<dxRangeSelectorOptions> {
    getDataSource(): DevExpress.data.DataSource;
    /**
     * Gets the currently selected range.
     */
    getValue(): Array<number | string | Date>;
    render(): void;
    /**
     * Redraws the UI component.
     */
    render(skipChartAnimation: boolean): void;
    /**
     * Sets the selected range.
     */
    setValue(value: Array<number | string | Date> | VizRange): void;
  }
  module dxRangeSelector {
    export type AxisScale =
      | 'continuous'
      | 'discrete'
      | 'logarithmic'
      | 'semidiscrete';
    export type BackgroundImageLocation =
      | 'center'
      | 'centerBottom'
      | 'centerTop'
      | 'full'
      | 'leftBottom'
      | 'leftCenter'
      | 'leftTop'
      | 'rightBottom'
      | 'rightCenter'
      | 'rightTop';
    export type ChartAxisScale = 'continuous' | 'logarithmic';
    export type DisposingEvent = DevExpress.events.EventInfo<dxRangeSelector>;
    export type DrawnEvent = DevExpress.events.EventInfo<dxRangeSelector>;
    export type ExportedEvent = DevExpress.events.EventInfo<dxRangeSelector>;
    export type ExportingEvent = DevExpress.events.EventInfo<dxRangeSelector> &
      DevExpress.viz.BaseWidget.ExportInfo;
    export type FileSavingEvent =
      DevExpress.viz.BaseWidget.FileSavingEventInfo<dxRangeSelector>;
    export type IncidentOccurredEvent =
      DevExpress.events.EventInfo<dxRangeSelector> &
        DevExpress.viz.BaseWidget.IncidentInfo;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxRangeSelector>;
    export type OptionChangedEvent =
      DevExpress.events.EventInfo<dxRangeSelector> &
        DevExpress.events.ChangedOptionInfo;
    export type Properties = dxRangeSelectorOptions;
    export type ValueChangedCallMode = 'onMoving' | 'onMovingComplete';
    export type ValueChangedEvent = DevExpress.events.NativeEventInfo<
      dxRangeSelector,
      MouseEvent | TouchEvent
    > & {
      readonly value: Array<number | string | Date>;
      readonly previousValue: Array<number | string | Date>;
    };
  }
  /**
   * @deprecated use Properties instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxRangeSelectorOptions
    extends BaseWidgetOptions<dxRangeSelector> {
    /**
     * Specifies the properties for the range selector&apos;s background.
     */
    background?: {
      /**
       * Specifies the background color for the RangeSelector.
       */
      color?: string;
      /**
       * Specifies image properties.
       */
      image?: {
        /**
         * Specifies a location for the image in the background of a range selector.
         */
        location?: DevExpress.viz.dxRangeSelector.BackgroundImageLocation;
        /**
         * Specifies the image&apos;s URL.
         */
        url?: string;
      };
      /**
       * Indicates whether or not the background (background color and/or image) is visible.
       */
      visible?: boolean;
    };
    /**
     * Specifies the RangeSelector&apos;s behavior properties.
     */
    behavior?: {
      /**
       * Indicates whether or not you can swap sliders.
       */
      allowSlidersSwap?: boolean;
      /**
       * Indicates whether or not animation is enabled.
       */
      animationEnabled?: boolean;
      /**
       * Specifies when to call the onValueChanged function.
       */
      callValueChanged?: DevExpress.viz.dxRangeSelector.ValueChangedCallMode;
      /**
       * Indicates whether or not an end user can specify the range using a mouse, without the use of sliders.
       */
      manualRangeSelectionEnabled?: boolean;
      /**
       * Indicates whether or not an end user can shift the selected range to the required location on a scale by clicking.
       */
      moveSelectedRangeByClick?: boolean;
      /**
       * Indicates whether to snap a slider to ticks.
       */
      snapToTicks?: boolean;
    };
    /**
     * Specifies the properties required to display a chart as the range selector&apos;s background.
     */
    chart?: {
      /**
       * Controls the padding and consequently the width of a group of bars with the same argument using relative units. Ignored if the barGroupWidth property is set.
       */
      barGroupPadding?: number;
      /**
       * Specifies a fixed width for groups of bars with the same argument, measured in pixels. Takes precedence over the barGroupPadding property.
       */
      barGroupWidth?: number;
      /**
       * Specifies an indent from the background&apos;s bottom to the lowest chart point. Accepts values from 0 to 1.
       */
      bottomIndent?: number;
      /**
       * An object defining the common configuration properties for the chart&apos;s series.
       */
      commonSeriesSettings?: dxChartCommonSeriesSettings;
      /**
       * An object providing properties for managing data from a data source.
       */
      dataPrepareSettings?: {
        /**
         * Specifies whether or not to validate values from a data source.
         */
        checkTypeForAllData?: boolean;
        /**
         * Specifies whether or not to convert the values from a data source into the data type of an axis.
         */
        convertToAxisDataType?: boolean;
        /**
         * Specifies how to sort series points.
         */
        sortingMethod?:
          | boolean
          | ((
              a: { arg?: Date | number | string; val?: Date | number | string },
              b: { arg?: Date | number | string; val?: Date | number | string }
            ) => number);
      };
      /**
       * Specifies a coefficient that determines the diameter of the largest bubble.
       */
      maxBubbleSize?: number;
      /**
       * Specifies the diameter of the smallest bubble measured in pixels.
       */
      minBubbleSize?: number;
      /**
       * Forces the UI component to treat negative values as zeroes. Applies to stacked-like series only.
       */
      negativesAsZeroes?: boolean;
      /**
       * Sets the palette to be used to colorize series in the chart.
       */
      palette?: Array<string> | DevExpress.common.charts.Palette;
      /**
       * Specifies what to do with colors in the palette when their number is less than the number of series in the chart.
       */
      paletteExtensionMode?: DevExpress.common.charts.PaletteExtensionMode;
      /**
       * An object defining the chart&apos;s series.
       */
      series?: ChartSeries | Array<ChartSeries>;
      /**
       * Defines properties for the series template.
       */
      seriesTemplate?: {
        /**
         * Specifies a callback function that returns a series object with individual series settings.
         */
        customizeSeries?: (seriesName: any) => ChartSeries;
        /**
         * Specifies a data source field that represents the series name.
         */
        nameField?: string;
      };
      /**
       * Specifies an indent from the background&apos;s top to the topmost chart point. Accepts values from 0 to 1.
       */
      topIndent?: number;
      /**
       * Configures the chart value axis.
       */
      valueAxis?: {
        /**
         * Indicates whether or not the chart&apos;s value axis must be inverted.
         */
        inverted?: boolean;
        /**
         * Specifies the value to be raised to a power when generating ticks for a logarithmic value axis.
         */
        logarithmBase?: number;
        /**
         * Specifies the maximum value of the chart&apos;s value axis.
         */
        max?: number;
        /**
         * Specifies the minimum value of the chart&apos;s value axis.
         */
        min?: number;
        /**
         * Specifies the type of the value axis.
         */
        type?: DevExpress.viz.dxRangeSelector.ChartAxisScale;
        /**
         * Specifies the desired type of axis values.
         */
        valueType?: DevExpress.common.charts.ChartsDataType;
      };
    };
    /**
     * Specifies the color of the parent page element.
     */
    containerBackgroundColor?: string;
    /**
     * Specifies a data source for the scale values and for the chart at the background.
     */
    dataSource?: DevExpress.data.DataSource.DataSourceLike<any> | null;
    /**
     * Specifies the data source field that provides data for the scale.
     */
    dataSourceField?: string;
    /**
     * Range selector&apos;s indent properties.
     */
    indent?: {
      /**
       * Specifies range selector&apos;s left indent.
       */
      left?: number;
      /**
       * Specifies range selector&apos;s right indent.
       */
      right?: number;
    };
    /**
     * A function that is executed after the UI component&apos;s value is changed.
     */
    onValueChanged?: (
      e: DevExpress.viz.dxRangeSelector.ValueChangedEvent
    ) => void;
    /**
     * Specifies properties of the range selector&apos;s scale.
     */
    scale?: {
      /**
       * Aggregates series points that fall into the same category.
       */
      aggregateByCategory?: boolean;
      /**
       * Specifies the length of aggregation intervals in pixels. Does not apply if aggregateByCategory is true. May be ignored in favor of the aggregationInterval property.
       */
      aggregationGroupWidth?: number;
      /**
       * Specifies the length of aggregation intervals in scale units. Applies only to the scale of the continuous or logarithmic type.
       */
      aggregationInterval?: VizTimeInterval;
      /**
       * 
       */
      discreteAxisDivisionMode?: DevExpress.common.charts.DiscreteAxisDivisionMode;
      /**
       * Specifies whether to allow decimal values on the scale. When false, the scale contains integer values only.
       */
      allowDecimals?: boolean;
      /**
       * Configures the scale breaks&apos; appearance.
       */
      breakStyle?: {
        /**
         * Specifies the scale breaks&apos; color.
         */
        color?: string;
        /**
         * Specifies the scale breaks&apos; line style.
         */
        line?: DevExpress.common.charts.ScaleBreakLineStyle;
        /**
         * Specifies the scale breaks&apos; width in pixels.
         */
        width?: number;
      };
      /**
       * Declares a scale break collection. Applies only if the scale&apos;s type is &apos;continuous&apos; or &apos;logarithmic&apos;.
       */
      breaks?: Array<ScaleBreak>;
      /**
       * Specifies the order of arguments on a discrete scale.
       */
      categories?: Array<number | string | Date>;
      /**
       * Specifies whether to force the scale to start and end on ticks.
       */
      endOnTick?: boolean;
      /**
       * Specifies the scale&apos;s end value.
       */
      endValue?: number | Date | string;
      /**
       * Days to be excluded from the scale when workdaysOnly is true.
       */
      holidays?: Array<Date | string> | Array<number>;
      /**
       * Specifies common properties for scale labels.
       */
      label?: {
        /**
         * Specifies a callback function that returns the text to be displayed in scale labels.
         */
        customizeText?: (scaleValue: {
          value?: Date | number | string;
          valueText?: string;
        }) => string;
        /**
         * Specifies font properties for the text displayed in the range selector&apos;s scale labels.
         */
        font?: Font;
        /**
         * Formats a value before it is displayed in a scale label.
         */
        format?: DevExpress.ui.Format;
        /**
         * Decides how to arrange scale labels when there is not enough space to keep all of them.
         */
        overlappingBehavior?: DevExpress.common.charts.LabelOverlap;
        /**
         * Specifies a spacing between scale labels and the background bottom edge.
         */
        topIndent?: number;
        /**
         * Specifies whether or not the scale&apos;s labels are visible.
         */
        visible?: boolean;
      };
      /**
       * Specifies a value used to calculate the range on a logarithmic scale within which the scale should be linear. Applies only if the data source contains negative values or zeroes.
       */
      linearThreshold?: number;
      /**
       * Specifies the value to be raised to a power when generating ticks for a logarithmic scale.
       */
      logarithmBase?: number;
      /**
       * Specifies properties for the date-time scale&apos;s markers.
       */
      marker?: {
        /**
         * Defines the properties that can be set for the text that is displayed by the scale markers.
         */
        label?: {
          /**
           * Specifies a callback function that returns the text to be displayed in scale markers.
           */
          customizeText?: (markerValue: {
            value?: Date | number;
            valueText?: string;
          }) => string;
          /**
           * Formats a value before it is displayed in a scale marker.
           */
          format?: DevExpress.ui.Format;
        };
        /**
         * Specifies the height of the marker&apos;s separator.
         */
        separatorHeight?: number;
        /**
         * Specifies the space between the marker label and the marker separator.
         */
        textLeftIndent?: number;
        /**
         * Specifies the space between the marker&apos;s label and the top edge of the marker&apos;s separator.
         */
        textTopIndent?: number;
        /**
         * Specified the indent between the marker and the scale labels.
         */
        topIndent?: number;
        /**
         * Indicates whether scale markers are visible.
         */
        visible?: boolean;
      };
      /**
       * Specifies the maximum range that can be selected.
       */
      maxRange?: VizTimeInterval;
      /**
       * Specifies the minimum range that can be selected.
       */
      minRange?: VizTimeInterval;
      /**
       * Specifies properties of the range selector&apos;s minor ticks.
       */
      minorTick?: {
        /**
         * Specifies the color of the scale&apos;s minor ticks.
         */
        color?: string;
        /**
         * Specifies the opacity of the scale&apos;s minor ticks.
         */
        opacity?: number;
        /**
         * Indicates whether scale minor ticks are visible or not.
         */
        visible?: boolean;
        /**
         * Specifies the width of the scale&apos;s minor ticks.
         */
        width?: number;
      };
      /**
       * Specifies the number of minor ticks between neighboring major ticks.
       */
      minorTickCount?: number;
      /**
       * Specifies an interval between minor ticks.
       */
      minorTickInterval?: VizTimeInterval;
      /**
       * Specifies the height of the space reserved for the scale in pixels.
       */
      placeholderHeight?: number;
      /**
       * Specifies whether or not to show ticks for the boundary scale values, when neither major ticks nor minor ticks are created for these values.
       */
      showCustomBoundaryTicks?: boolean;
      /**
       * Days to be included in the scale when workdaysOnly is true.
       */
      singleWorkdays?: Array<Date | string> | Array<number>;
      /**
       * Specifies the scale&apos;s start value.
       */
      startValue?: number | Date | string;
      /**
       * Specifies properties defining the appearance of scale ticks.
       */
      tick?: {
        /**
         * Specifies the color of scale ticks (both major and minor ticks).
         */
        color?: string;
        /**
         * Specifies the opacity of scale ticks (both major and minor ticks).
         */
        opacity?: number;
        /**
         * Specifies the width of the scale&apos;s ticks (both major and minor ticks).
         */
        width?: number;
      };
      /**
       * Specifies an interval between axis ticks.
       */
      tickInterval?: VizTimeInterval;
      /**
       * Specifies the type of the scale.
       */
      type?: DevExpress.viz.dxRangeSelector.AxisScale;
      /**
       * Specifies the type of values on the scale.
       */
      valueType?: DevExpress.common.charts.ChartsDataType;
      /**
       * Specifies which days are workdays. The array can contain values from 0 (Sunday) to 6 (Saturday). Applies only if workdaysOnly is true.
       */
      workWeek?: Array<number>;
      /**
       * Leaves only workdays on the scale: the work week days plus single workdays minus holidays. Applies only if the scale&apos;s valueType is &apos;datetime&apos;.
       */
      workdaysOnly?: boolean;
    };
    /**
     * Specifies the color of the selected range.
     */
    selectedRangeColor?: string;
    /**
     * Specifies how the selected range should behave when data is updated. Applies only when the RangeSelector is bound to a data source.
     */
    selectedRangeUpdateMode?: DevExpress.common.charts.VisualRangeUpdateMode;
    /**
     * Specifies range selector shutter properties.
     */
    shutter?: {
      /**
       * Specifies shutter color.
       */
      color?: string;
      /**
       * Specifies the opacity of the color of shutters.
       */
      opacity?: number;
    };
    /**
     * Specifies the appearance of the range selector&apos;s slider handles.
     */
    sliderHandle?: {
      /**
       * Specifies the color of the slider handles.
       */
      color?: string;
      /**
       * Specifies the opacity of the slider handles.
       */
      opacity?: number;
      /**
       * Specifies the width of the slider handles.
       */
      width?: number;
    };
    /**
     * Defines the properties of the range selector slider markers.
     */
    sliderMarker?: {
      /**
       * Specifies the color of the slider markers.
       */
      color?: string;
      /**
       * Specifies a callback function that returns the text to be displayed by slider markers.
       */
      customizeText?: (scaleValue: {
        value?: Date | number | string;
        valueText?: string;
      }) => string;
      /**
       * Specifies font properties for the text displayed by the range selector slider markers.
       */
      font?: Font;
      /**
       * Formats a value before it is displayed in a slider marker.
       */
      format?: DevExpress.ui.Format;
      /**
       * Specifies the color used for the slider marker text when the currently selected range does not match the minRange and maxRange values.
       */
      invalidRangeColor?: string;
      /**
       * Specifies the empty space between the marker&apos;s left and right borders and the marker&apos;s text.
       */
      paddingLeftRight?: number;
      /**
       * Specifies the empty space between the marker&apos;s top and bottom borders and the marker&apos;s text.
       */
      paddingTopBottom?: number;
      /**
       * Specifies the placeholder height of the slider marker.
       */
      placeholderHeight?: number;
      /**
       * Indicates whether or not the slider markers are visible.
       */
      visible?: boolean;
    };
    /**
     * Configures tooltips - small pop-up rectangles that display information about a data-visualizing UI component element being pressed or hovered over with the mouse pointer.
     */
    tooltip?: BaseWidgetTooltip;
    /**
     * The selected range (initial or current). Equals the entire scale when not set.
     */
    value?: Array<number | string | Date> | VizRange;
  }
  /**
   * The Sankey is a UI component that visualizes the flow magnitude between value sets. The values being connected are called nodes; the connections - links. The higher the flow magnitude, the wider the link is.
   */
  export class dxSankey extends BaseWidget<dxSankeyOptions> {
    /**
     * Gets all sankey links.
     */
    getAllLinks(): Array<dxSankeyLink>;
    /**
     * Gets all sankey nodes.
     */
    getAllNodes(): Array<dxSankeyNode>;
    getDataSource(): DevExpress.data.DataSource;
    /**
     * Hides all UI component tooltips.
     */
    hideTooltip(): void;
  }
  module dxSankey {
    export type DisposingEvent = DevExpress.events.EventInfo<dxSankey>;
    export type DrawnEvent = DevExpress.events.EventInfo<dxSankey>;
    export type ExportedEvent = DevExpress.events.EventInfo<dxSankey>;
    export type ExportingEvent = DevExpress.events.EventInfo<dxSankey> &
      DevExpress.viz.BaseWidget.ExportInfo;
    export type FileSavingEvent =
      DevExpress.viz.BaseWidget.FileSavingEventInfo<dxSankey>;
    export type IncidentOccurredEvent = DevExpress.events.EventInfo<dxSankey> &
      DevExpress.viz.BaseWidget.IncidentInfo;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxSankey>;
    export type LinkClickEvent = DevExpress.events.NativeEventInfo<
      dxSankey,
      MouseEvent | PointerEvent
    > & {
      readonly target: dxSankeyLink;
    };
    export type LinkHoverEvent = DevExpress.events.EventInfo<dxSankey> & {
      readonly target: dxSankeyLink;
    };
    export type NodeClickEvent = DevExpress.events.NativeEventInfo<
      dxSankey,
      MouseEvent | PointerEvent
    > & {
      readonly target: dxSankeyNode;
    };
    export type NodeHoverEvent = DevExpress.events.EventInfo<dxSankey> & {
      readonly target: dxSankeyNode;
    };
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxSankey> &
      DevExpress.events.ChangedOptionInfo;
    export type Properties = dxSankeyOptions;
    export type SankeyColorMode = 'none' | 'source' | 'target' | 'gradient';
  }
  /**
   * 
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxSankeyConnectionInfoObject {
    /**
     * The title of the link&apos;s source node.
     */
    source?: string;
    /**
     * The title of the link&apos;s target node.
     */
    target?: string;
    /**
     * The link&apos;s weight.
     */
    weight?: number;
  }
  /**
   * A sankey link&apos;s structure.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxSankeyLink {
    /**
     * An object that describes the connection.
     */
    connection?: dxSankeyConnectionInfoObject;
    /**
     * Hides the sankey link&apos;s tooltip.
     */
    hideTooltip(): void;
    /**
     * Changes the sankey link&apos;s hover state.
     */
    hover(state: boolean): void;
    /**
     * Indicates whether the sankey link is in the hover state.
     */
    isHovered(): boolean;
    /**
     * Shows the sankey link&apos;s tooltip.
     */
    showTooltip(): void;
  }
  /**
   * A sankey node&apos;s structure.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxSankeyNode {
    /**
     * Hides the sankey node&apos;s tooltip.
     */
    hideTooltip(): void;
    /**
     * Changes the sankey node&apos;s hover state.
     */
    hover(state: boolean): void;
    /**
     * Indicates whether the sankey node is in the hover state.
     */
    isHovered(): boolean;
    /**
     * The node&apos;s label.
     */
    label?: string;
    /**
     * The node&apos;s incoming links.
     */
    linksIn?: Array<any>;
    /**
     * The node&apos;s outgoing links.
     */
    linksOut?: Array<any>;
    /**
     * Shows the sankey node&apos;s tooltip.
     */
    showTooltip(): void;
    /**
     * The node&apos;s label.
     * @deprecated Use label instead.
     */
    title?: string;
  }
  /**
   * @deprecated use Properties instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxSankeyOptions extends BaseWidgetOptions<dxSankey> {
    /**
     * Specifies adaptive layout properties.
     */
    adaptiveLayout?: {
      /**
       * Specifies the minimum container height at which the layout begins to adapt.
       */
      height?: number;
      /**
       * Specifies whether node labels should be kept when the UI component adapts the layout.
       */
      keepLabels?: boolean;
      /**
       * Specifies the minimum container width at which the layout begins to adapt.
       */
      width?: number;
    };
    /**
     * Aligns node columns vertically.
     */
    alignment?:
      | DevExpress.common.VerticalAlignment
      | Array<DevExpress.common.VerticalAlignment>;
    /**
     * Binds the UI component to data.
     */
    dataSource?: DevExpress.data.DataSource.DataSourceLike<any> | null;
    /**
     * Specifies whether nodes and links change their style when they are hovered over or pressed.
     */
    hoverEnabled?: boolean;
    /**
     * Configures sankey nodes&apos; labels.
     */
    label?: {
      /**
       * Configures the labels&apos; borders.
       */
      border?: {
        /**
         * Colors the labels&apos; borders.
         */
        color?: string;
        /**
         * Specifies whether the borders are visible.
         */
        visible?: boolean;
        /**
         * Sets the borders&apos; width in pixels.
         */
        width?: number;
      };
      /**
       * Customizes the labels&apos; texts.
       */
      customizeText?: (itemInfo: dxSankeyNode) => string;
      /**
       * Specifies the labels&apos; font properties.
       */
      font?: Font;
      /**
       * Moves the labels horizontally from their initial positions.
       */
      horizontalOffset?: number;
      /**
       * Specifies how to arrange labels when there is insufficient space to display them all.
       */
      overlappingBehavior?: DevExpress.common.charts.TextOverflow;
      /**
       * Configures the labels&apos; shadows.
       */
      shadow?: {
        /**
         * Specifies the shadows&apos; blur distance. A larger value increases the blur distance.
         */
        blur?: number;
        /**
         * Colors the labels&apos; shadows.
         */
        color?: string;
        /**
         * Moves the shadows horizontally from their initial positions.
         */
        offsetX?: number;
        /**
         * Moves the shadows vertically from their initial positions.
         */
        offsetY?: number;
        /**
         * Specifies the shadows&apos; transparency.
         */
        opacity?: number;
      };
      /**
       * Specifies whether to color labels in the nodes&apos; colors.
       */
      useNodeColors?: boolean;
      /**
       * Moves the labels vertically from their initial positions.
       */
      verticalOffset?: number;
      /**
       * Specifies whether the labels are visible.
       */
      visible?: boolean;
    };
    /**
     * Configures sankey links&apos; appearance.
     */
    link?: {
      /**
       * Configures the links&apos; borders.
       */
      border?: {
        /**
         * Colors the links&apos; borders.
         */
        color?: string;
        /**
         * Specifies whether the borders are visible.
         */
        visible?: boolean;
        /**
         * Sets the borders&apos; width in pixels.
         */
        width?: number;
      };
      /**
       * Colors the sankey links. Applies only if colorMode is &apos;none&apos;.
       */
      color?: string;
      /**
       * Specifies how to color links.
       */
      colorMode?: DevExpress.viz.dxSankey.SankeyColorMode;
      /**
       * Configures the appearance a link changes to when it is hovered over or pressed.
       */
      hoverStyle?: {
        /**
         * Configures the appearance a link&apos;s border changes to when the link is hovered over or pressed.
         */
        border?: {
          /**
           * Specifies the color a link&apos;s border changes to when the link is hovered over or pressed.
           */
          color?: string;
          /**
           * Specifies whether a link&apos;s border is visible when the link is hovered over or pressed.
           */
          visible?: boolean;
          /**
           * Specifies the width a link&apos;s border changes to when the link is hovered over or pressed.
           */
          width?: number;
        };
        /**
         * Specifies the color a link changes to when it is hovered over or pressed.
         */
        color?: string;
        /**
         * Applies hatching to a link when it is hovered over or pressed.
         */
        hatching?: {
          /**
           * Specifies hatching lines&apos; direction.
           */
          direction?: DevExpress.common.charts.HatchDirection;
          /**
           * Specifies hatching lines&apos; transparency.
           */
          opacity?: number;
          /**
           * Specifies the distance in pixels between two hatching lines.
           */
          step?: number;
          /**
           * Specifies hatching lines&apos; width.
           */
          width?: number;
        };
        /**
         * Specifies the transparency a link changes to when it is hovered over or pressed.
         */
        opacity?: number;
      };
      /**
       * Specifies the links&apos; transparency.
       */
      opacity?: number;
    };
    /**
     * Configures sankey nodes&apos; appearance.
     */
    node?: {
      /**
       * Configures the nodes&apos; borders.
       */
      border?: {
        /**
         * Colors the nodes&apos; borders.
         */
        color?: string;
        /**
         * Specifies whether the borders are visible.
         */
        visible?: boolean;
        /**
         * Sets the borders&apos; width in pixels.
         */
        width?: number;
      };
      /**
       * Colors the sankey nodes.
       */
      color?: string;
      /**
       * Configures the appearance a node changes to when it is hovered over or pressed.
       */
      hoverStyle?: {
        /**
         * Configures the appearance a node&apos;s border changes to when the node is hovered over or pressed.
         */
        border?: {
          /**
           * Specifies the color a node&apos;s border changes to when the node is hovered over or pressed.
           */
          color?: string;
          /**
           * Specifies whether a node&apos;s border is visible when the node is hovered over or pressed.
           */
          visible?: boolean;
          /**
           * Specifies the width a node&apos;s border changes to when the node is hovered over or pressed.
           */
          width?: number;
        };
        /**
         * Specifies the color a node changes to when it is hovered over or pressed.
         */
        color?: string;
        /**
         * Applies hatching to a node when it is hovered over or pressed.
         */
        hatching?: {
          /**
           * Specifies hatching lines&apos; direction.
           */
          direction?: DevExpress.common.charts.HatchDirection;
          /**
           * Specifies hatching lines&apos; transparency.
           */
          opacity?: number;
          /**
           * Specifies the distance in pixels between two hatching lines.
           */
          step?: number;
          /**
           * Specifies hatching lines&apos; width.
           */
          width?: number;
        };
        /**
         * Specifies the transparency a node changes to when it is hovered over or pressed.
         */
        opacity?: number;
      };
      /**
       * Specifies the nodes&apos; transparency.
       */
      opacity?: number;
      /**
       * Specifies the vertical distance, in pixels, between two nodes.
       */
      padding?: number;
      /**
       * Specifies the nodes&apos; width in pixels.
       */
      width?: number;
    };
    /**
     * A function that is executed when a sankey link is clicked or tapped.
     */
    onLinkClick?:
      | ((e: DevExpress.viz.dxSankey.LinkClickEvent) => void)
      | string;
    /**
     * A function that is executed after the pointer enters or leaves a sankey link.
     */
    onLinkHoverChanged?: (e: DevExpress.viz.dxSankey.LinkHoverEvent) => void;
    /**
     * A function that is executed when a sankey node is clicked or tapped.
     */
    onNodeClick?:
      | ((e: DevExpress.viz.dxSankey.NodeClickEvent) => void)
      | string;
    /**
     * A function that is executed after the pointer enters or leaves a sankey node.
     */
    onNodeHoverChanged?: (e: DevExpress.viz.dxSankey.NodeHoverEvent) => void;
    /**
     * Sets the palette to be used to colorize sankey nodes.
     */
    palette?: Array<string> | DevExpress.common.charts.Palette;
    /**
     * Specifies how to extend the palette when it contains less colors than the number of sankey nodes.
     */
    paletteExtensionMode?: DevExpress.common.charts.PaletteExtensionMode;
    /**
     * Specifies nodes&apos; sorting order in their columns.
     */
    sortData?: any;
    /**
     * Specifies which data source field provides links&apos; source nodes.
     */
    sourceField?: string;
    /**
     * Specifies which data source field provides links&apos; target nodes.
     */
    targetField?: string;
    /**
     * Configures tooltips - small pop-up rectangles that display information about a data-visualizing UI component element being pressed or hovered over with the mouse pointer.
     */
    tooltip?: dxSankeyTooltip;
    /**
     * Specifies which data source field provides links&apos; weights.
     */
    weightField?: string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxSankeyTooltip extends BaseWidgetTooltip {
    /**
     * Customizes link tooltips&apos; appearance.
     */
    customizeLinkTooltip?: (info: {
      source?: string;
      target?: string;
      weight?: number;
    }) => any;
    /**
     * Customizes node tooltips&apos; appearance.
     */
    customizeNodeTooltip?: (info: {
      title?: string;
      label?: string;
      weightIn?: number;
      weightOut?: number;
    }) => any;
    /**
     * Enables tooltips.
     */
    enabled?: boolean;
    /**
     * Specifies a custom template for a link&apos;s tooltip.
     */
    linkTooltipTemplate?:
      | DevExpress.core.template
      | ((
          info: { source?: string; target?: string; weight?: number },
          element: DevExpress.core.DxElement
        ) => string | DevExpress.core.UserDefinedElement);
    /**
     * Specifies a custom template for a node&apos;s tooltip.
     */
    nodeTooltipTemplate?:
      | DevExpress.core.template
      | ((
          info: { label?: string; weightIn?: number; weightOut?: number },
          element: DevExpress.core.DxElement
        ) => string | DevExpress.core.UserDefinedElement);
  }
  /**
   * The Sparkline UI component is a compact chart that contains only one series. Owing to their size, sparklines occupy very little space and can be easily collected in a table or embedded straight in text.
   */
  export class dxSparkline extends BaseSparkline<dxSparklineOptions> {
    getDataSource(): DevExpress.data.DataSource;
  }
  module dxSparkline {
    export type DisposingEvent = DevExpress.events.EventInfo<dxSparkline>;
    export type DrawnEvent = DevExpress.events.EventInfo<dxSparkline>;
    export type ExportedEvent = DevExpress.events.EventInfo<dxSparkline>;
    export type ExportingEvent = DevExpress.events.EventInfo<dxSparkline> &
      DevExpress.viz.BaseWidget.ExportInfo;
    export type FileSavingEvent =
      DevExpress.viz.BaseWidget.FileSavingEventInfo<dxSparkline>;
    export type IncidentOccurredEvent =
      DevExpress.events.EventInfo<dxSparkline> &
        DevExpress.viz.BaseWidget.IncidentInfo;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxSparkline>;
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxSparkline> &
      DevExpress.events.ChangedOptionInfo;
    export type Properties = dxSparklineOptions;
    export type SparklineType =
      | 'area'
      | 'bar'
      | 'line'
      | 'spline'
      | 'splinearea'
      | 'steparea'
      | 'stepline'
      | 'winloss';
    export type TooltipHiddenEvent = DevExpress.events.EventInfo<dxSparkline>;
    export type TooltipShownEvent = DevExpress.events.EventInfo<dxSparkline>;
  }
  /**
   * @deprecated use Properties instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxSparklineOptions
    extends BaseSparklineOptions<dxSparkline> {
    /**
     * Specifies the data source field that provides arguments for a sparkline.
     */
    argumentField?: string;
    /**
     * Sets a color for the bars indicating negative values. Available for a sparkline of the bar type only.
     */
    barNegativeColor?: string;
    /**
     * Sets a color for the bars indicating positive values. Available for a sparkline of the bar type only.
     */
    barPositiveColor?: string;
    /**
     * Binds the UI component to data.
     */
    dataSource?: DevExpress.data.DataSource.DataSourceLike<any> | null;
    /**
     * Sets a color for the boundary of both the first and last points on a sparkline.
     */
    firstLastColor?: string;
    /**
     * Specifies whether the sparkline should ignore null data points.
     */
    ignoreEmptyPoints?: boolean;
    /**
     * Sets a color for a line on a sparkline. Available for the sparklines of the line- and area-like types.
     */
    lineColor?: string;
    /**
     * Specifies a width for a line on a sparkline. Available for the sparklines of the line- and area-like types.
     */
    lineWidth?: number;
    /**
     * Sets a color for the bars indicating the values that are less than the winloss threshold. Available for a sparkline of the winloss type only.
     */
    lossColor?: string;
    /**
     * Sets a color for the boundary of the maximum point on a sparkline.
     */
    maxColor?: string;
    /**
     * Specifies the maximum value of the sparkline&apos;s value axis.
     */
    maxValue?: number;
    /**
     * Sets a color for the boundary of the minimum point on a sparkline.
     */
    minColor?: string;
    /**
     * Specifies the minimum value of the sparkline value axis.
     */
    minValue?: number;
    /**
     * Sets a color for points on a sparkline. Available for the sparklines of the line- and area-like types.
     */
    pointColor?: string;
    /**
     * Specifies the diameter of sparkline points in pixels. Available for the sparklines of line- and area-like types.
     */
    pointSize?: number;
    /**
     * Specifies a symbol to use as a point marker on a sparkline. Available for the sparklines of the line- and area-like types.
     */
    pointSymbol?: DevExpress.common.charts.PointSymbol;
    /**
     * Specifies whether or not to indicate both the first and last values on a sparkline.
     */
    showFirstLast?: boolean;
    /**
     * Specifies whether or not to indicate both the minimum and maximum values on a sparkline.
     */
    showMinMax?: boolean;
    /**
     * Determines the type of a sparkline.
     */
    type?: DevExpress.viz.dxSparkline.SparklineType;
    /**
     * Specifies the data source field that provides values for a sparkline.
     */
    valueField?: string;
    /**
     * Sets a color for the bars indicating the values greater than a winloss threshold. Available for a sparkline of the winloss type only.
     */
    winColor?: string;
    /**
     * Specifies a value that serves as a threshold for the sparkline of the winloss type.
     */
    winlossThreshold?: number;
  }
  /**
   * The TreeMap is a UI component that displays hierarchical data by using nested rectangles.
   */
  export class dxTreeMap extends BaseWidget<dxTreeMapOptions> {
    /**
     * Deselects all nodes in the UI component.
     */
    clearSelection(): void;
    /**
     * Drills one level up.
     */
    drillUp(): void;
    /**
     * Gets the current node.
     */
    getCurrentNode(): dxTreeMapNode;
    getDataSource(): DevExpress.data.DataSource;
    /**
     * Gets the root node.
     */
    getRootNode(): dxTreeMapNode;
    /**
     * Hides the tooltip.
     */
    hideTooltip(): void;
    /**
     * Resets the drill down level.
     */
    resetDrillDown(): void;
  }
  module dxTreeMap {
    export type ClickEvent = DevExpress.events.NativeEventInfo<
      dxTreeMap,
      MouseEvent | PointerEvent
    > & {
      readonly node: dxTreeMapNode;
    };
    export type DisposingEvent = DevExpress.events.EventInfo<dxTreeMap>;
    export type DrawnEvent = DevExpress.events.EventInfo<dxTreeMap>;
    export type DrillEvent = DevExpress.events.EventInfo<dxTreeMap> & {
      readonly node: dxTreeMapNode;
    };
    export type ExportedEvent = DevExpress.events.EventInfo<dxTreeMap>;
    export type ExportingEvent = DevExpress.events.EventInfo<dxTreeMap> &
      DevExpress.viz.BaseWidget.ExportInfo;
    export type FileSavingEvent =
      DevExpress.viz.BaseWidget.FileSavingEventInfo<dxTreeMap>;
    export type HoverChangedEvent = DevExpress.events.EventInfo<dxTreeMap> &
      InteractionInfo;
    export type IncidentOccurredEvent = DevExpress.events.EventInfo<dxTreeMap> &
      DevExpress.viz.BaseWidget.IncidentInfo;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxTreeMap>;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export interface InteractionInfo {
      readonly node: dxTreeMapNode;
    }
    export type NodesInitializedEvent =
      DevExpress.events.EventInfo<dxTreeMap> & {
        readonly root: dxTreeMapNode;
      };
    export type NodesRenderingEvent = DevExpress.events.EventInfo<dxTreeMap> & {
      readonly node: dxTreeMapNode;
    };
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxTreeMap> &
      DevExpress.events.ChangedOptionInfo;
    export type Properties = dxTreeMapOptions;
    export type SelectionChangedEvent = DevExpress.events.EventInfo<dxTreeMap> &
      InteractionInfo;
    export type TreeMapColorizerType =
      | 'discrete'
      | 'gradient'
      | 'none'
      | 'range';
    export type TreeMapLayoutAlgorithm =
      | 'sliceanddice'
      | 'squarified'
      | 'strip';
    export type TreeMapLayoutDirection =
      | 'leftBottomRightTop'
      | 'leftTopRightBottom'
      | 'rightBottomLeftTop'
      | 'rightTopLeftBottom';
  }
  /**
   * This section describes the Node object, which represents a treemap node.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxTreeMapNode {
    /**
     * Customizes the node.
     */
    customize(options: any): void;
    /**
     * The object from the data source visualized by the node.
     */
    data?: any;
    /**
     * Drills down into the node.
     */
    drillDown(): void;
    /**
     * Returns all nodes nested in the current node.
     */
    getAllChildren(): Array<dxTreeMapNode>;
    /**
     * Returns all descendant nodes.
     */
    getAllNodes(): Array<dxTreeMapNode>;
    /**
     * Gets a specific node from a collection of direct descendants.
     */
    getChild(index: number): dxTreeMapNode;
    /**
     * Indicates how many direct descendants the current node has.
     */
    getChildrenCount(): number;
    /**
     * Returns the parent node of the current node.
     */
    getParent(): dxTreeMapNode;
    /**
     * The index of the current node in the array of all nodes on the same level.
     */
    index?: number;
    /**
     * Indicates whether the current node is active.
     */
    isActive(): boolean;
    /**
     * Indicates whether the node is in the hover state or not.
     */
    isHovered(): boolean;
    /**
     * Indicates whether the node is visualized by a tile or a group of tiles.
     */
    isLeaf(): boolean;
    /**
     * Indicates whether the node is selected or not.
     */
    isSelected(): boolean;
    /**
     * Returns the label of the node.
     */
    label(): string;
    /**
     * Sets the label to the node.
     */
    label(label: string): void;
    /**
     * The level that the current node occupies in the hierarchy of nodes.
     */
    level?: number;
    /**
     * Reverts the appearance of the node to the initial state.
     */
    resetCustomization(): void;
    /**
     * Sets the selection state of a node.
     */
    select(state: boolean): void;
    /**
     * Shows the tooltip.
     */
    showTooltip(): void;
    /**
     * Gets the raw value of the node.
     */
    value(): number;
  }
  /**
   * @deprecated use Properties instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxTreeMapOptions extends BaseWidgetOptions<dxTreeMap> {
    /**
     * Specifies the name of the data source field that provides nested items for a group. Applies to hierarchical data sources only.
     */
    childrenField?: string;
    /**
     * Specifies the name of the data source field that provides colors for tiles.
     */
    colorField?: string;
    /**
     * Manages the color settings.
     */
    colorizer?: {
      /**
       * Specifies the name of the data source field whose values define the color of a tile. Applies only if the type property is &apos;gradient&apos; or &apos;range&apos;.
       */
      colorCodeField?: string;
      /**
       * Specifies whether or not all tiles in a group must be colored uniformly. Applies only if the type property is &apos;discrete&apos;.
       */
      colorizeGroups?: boolean;
      /**
       * Sets the palette to be used to colorize tiles.
       */
      palette?: Array<string> | DevExpress.common.charts.Palette;
      /**
       * Specifies what to do with colors in the palette when their number is less than the number of treemap tiles.
       */
      paletteExtensionMode?: DevExpress.common.charts.PaletteExtensionMode;
      /**
       * Allows you to paint tiles with similar values uniformly. Applies only if the type property is &apos;gradient&apos; or &apos;range&apos;.
       */
      range?: Array<number>;
      /**
       * Specifies the colorizing algorithm.
       */
      type?: DevExpress.viz.dxTreeMap.TreeMapColorizerType;
    };
    /**
     * Binds the UI component to data.
     */
    dataSource?: DevExpress.data.DataSource.DataSourceLike<any> | null;
    /**
     * Configures groups.
     */
    group?: {
      /**
       * Configures the group borders.
       */
      border?: {
        /**
         * Colors the group borders.
         */
        color?: string;
        /**
         * Specifies the width of the group borders in pixels.
         */
        width?: number;
      };
      /**
       * Colors the group headers.
       */
      color?: string;
      /**
       * Specifies the distance in pixels between group borders and content.
       */
      padding?: number;
      /**
       * Specifies the height of the group headers in pixels.
       */
      headerHeight?: number;
      /**
       * Specifies whether groups change their style when a user pauses on them.
       */
      hoverEnabled?: boolean;
      /**
       * Specifies the appearance of groups in the hover state.
       */
      hoverStyle?: {
        /**
         * Configures the appearance of the group borders in the hover state.
         */
        border?: {
          /**
           * Colors the group borders in the hover state.
           */
          color?: string;
          /**
           * Specifies the width of the group borders in pixels. Applies to a group in the hover state.
           */
          width?: number;
        };
        /**
         * Colors the group headers in the hover state.
         */
        color?: string;
      };
      /**
       * Configures the group labels.
       */
      label?: {
        /**
         * Specifies the font settings of the group labels.
         */
        font?: Font;
        /**
         * Specifies what to do with labels that overflow their group headers: hide, truncated them with ellipsis, or leave them as they are.
         */
        textOverflow?: DevExpress.common.charts.TextOverflow;
        /**
         * Changes the visibility of the group labels.
         */
        visible?: boolean;
      };
      /**
       * Specifies the appearance of groups in the selected state.
       */
      selectionStyle?: {
        /**
         * Configures the appearance of the group borders in the selected state.
         */
        border?: {
          /**
           * Colors the group borders in the selected state.
           */
          color?: string;
          /**
           * Specifies the width of the group borders in pixels. Applies to a group in the selected state.
           */
          width?: number;
        };
        /**
         * Colors the group headers in the selected state.
         */
        color?: string;
      };
    };
    /**
     * Specifies whether tiles and groups change their style when a user pauses on them.
     */
    hoverEnabled?: boolean;
    /**
     * Specifies the name of the data source field that provides IDs for items. Applies to plain data sources only.
     */
    idField?: string;
    /**
     * Specifies whether the user will interact with a single tile or its group.
     */
    interactWithGroup?: boolean;
    /**
     * Specifies the name of the data source field that provides texts for tile and group labels.
     */
    labelField?: string;
    /**
     * Specifies the layout algorithm.
     */
    layoutAlgorithm?:
      | DevExpress.viz.dxTreeMap.TreeMapLayoutAlgorithm
      | ((e: {
          rect?: Array<number>;
          sum?: number;
          items?: Array<any>;
        }) => any);
    /**
     * Specifies the direction in which the items will be laid out.
     */
    layoutDirection?: DevExpress.viz.dxTreeMap.TreeMapLayoutDirection;
    /**
     * Generates space around the UI component.
     */
    margin?: BaseWidgetMargin;
    /**
     * Specifies how many hierarchical levels must be visualized.
     */
    maxDepth?: number;
    /**
     * A function that is executed when a node is clicked or tapped.
     */
    onClick?: ((e: DevExpress.viz.dxTreeMap.ClickEvent) => void) | string;
    /**
     * A function that is executed when a user drills up or down.
     */
    onDrill?: (e: DevExpress.viz.dxTreeMap.DrillEvent) => void;
    /**
     * A function that is executed after the pointer enters or leaves a node.
     */
    onHoverChanged?: (e: DevExpress.viz.dxTreeMap.HoverChangedEvent) => void;
    /**
     * A function that is executed only once, after the nodes are initialized.
     */
    onNodesInitialized?: (
      e: DevExpress.viz.dxTreeMap.NodesInitializedEvent
    ) => void;
    /**
     * A function that is executed before the nodes are displayed and each time the collection of active nodes is changed.
     */
    onNodesRendering?: (
      e: DevExpress.viz.dxTreeMap.NodesRenderingEvent
    ) => void;
    /**
     * A function that is executed when a node is selected or selection is canceled.
     */
    onSelectionChanged?: (
      e: DevExpress.viz.dxTreeMap.SelectionChangedEvent
    ) => void;
    /**
     * Specifies the name of the data source field that provides parent IDs for items. Applies to plain data sources only.
     */
    parentField?: string;
    /**
     * Specifies whether a single or multiple nodes can be in the selected state simultaneously.
     */
    selectionMode?: DevExpress.common.SingleMultipleOrNone;
    /**
     * Configures tiles.
     */
    tile?: {
      /**
       * Configures the tile borders.
       */
      border?: {
        /**
         * Colors the tile borders.
         */
        color?: string;
        /**
         * Specifies the width of the tile borders in pixels.
         */
        width?: number;
      };
      /**
       * Specifies a single color for all tiles.
       */
      color?: string;
      /**
       * Specifies the appearance of tiles in the hover state.
       */
      hoverStyle?: {
        /**
         * Configures the appearance of the tile borders in the hover state.
         */
        border?: {
          /**
           * Colors the tile borders in the hover state.
           */
          color?: string;
          /**
           * Specifies the width of the tile borders in pixels. Applies to a tile in the hover state.
           */
          width?: number;
        };
        /**
         * Colors tiles in the hover state.
         */
        color?: string;
      };
      /**
       * Configures the tile labels.
       */
      label?: {
        /**
         * Specifies the font settings of the tile labels.
         */
        font?: Font;
        /**
         * Specifies what to do with labels that overflow their tiles after applying wordWrap: hide, truncate them and display an ellipsis, or do nothing.
         */
        textOverflow?: DevExpress.common.charts.TextOverflow;
        /**
         * Changes the visibility of the tile labels.
         */
        visible?: boolean;
        /**
         * Specifies how to wrap texts that do not fit into a single line.
         */
        wordWrap?: DevExpress.common.charts.WordWrap;
      };
      /**
       * Specifies the appearance of tiles in the selected state.
       */
      selectionStyle?: {
        /**
         * Configures the appearance of the tile borders in the selected state.
         */
        border?: {
          /**
           * Colors the tile borders in the selected state.
           */
          color?: string;
          /**
           * Specifies the width of the tile borders in pixels. Applies to a tile in the selected state.
           */
          width?: number;
        };
        /**
         * Colors tiles in the selected state.
         */
        color?: string;
      };
    };
    /**
     * Configures tooltips - small pop-up rectangles that display information about a data-visualizing UI component element being pressed or hovered over with the mouse pointer.
     */
    tooltip?: dxTreeMapTooltip;
    /**
     * Specifies the name of the data source field that provides values for tiles.
     */
    valueField?: string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxTreeMapTooltip extends BaseWidgetTooltip {
    /**
     * Specifies a custom template for a tooltip.
     */
    contentTemplate?:
      | DevExpress.core.template
      | ((
          info: { value?: number; valueText?: string; node?: dxTreeMapNode },
          element: DevExpress.core.DxElement
        ) => string | DevExpress.core.UserDefinedElement);
    /**
     * Allows you to change tooltip appearance.
     */
    customizeTooltip?: (info: {
      value?: number;
      valueText?: string;
      node?: dxTreeMapNode;
    }) => any;
  }
  /**
   * The VectorMap is a UI component that visualizes geographical locations. This UI component represents a geographical map that contains areas and markers. Areas embody continents and countries. Markers flag specific points on the map, for example, towns, cities or capitals.
   */
  export class dxVectorMap extends BaseWidget<dxVectorMapOptions> {
    /**
     * Gets the current map center coordinates.
     */
    center(): Array<number>;
    /**
     * Sets the map center coordinates.
     */
    center(centerCoordinates: Array<number>): void;
    /**
     * Deselects all the selected area and markers on a map at once. The areas and markers are displayed in their initial style after.
     */
    clearSelection(): void;
    /**
     * Converts client area coordinates into map coordinates.
     * @deprecated Use convertToGeo instead.
     */
    convertCoordinates(x: number, y: number): Array<number>;
    /**
     * Converts coordinates from pixels to the dataSource coordinate system.
     */
    convertToGeo(x: number, y: number): Array<number>;
    /**
     * Converts coordinates from the dataSource coordinate system to pixels.
     */
    convertToXY(longitude: number, latitude: number): Array<number>;
    /**
     * Gets a layer with a specific index.
     */
    getLayerByIndex(index: number): MapLayer;
    /**
     * Gets a layer with a specific name.
     */
    getLayerByName(name: string): MapLayer;
    /**
     * Gets all layers.
     */
    getLayers(): Array<MapLayer>;
    /**
     * Gets the current map viewport coordinates.
     */
    viewport(): Array<number>;
    /**
     * Sets the map viewport coordinates.
     */
    viewport(viewportCoordinates: Array<number>): void;
    /**
     * Gets the current zoom factor value.
     */
    zoomFactor(): number;
    /**
     * Sets the zoom factor value.
     */
    zoomFactor(zoomFactor: number): void;
  }
  module dxVectorMap {
    export type CenterChangedEvent =
      DevExpress.events.EventInfo<dxVectorMap> & {
        readonly center: Array<number>;
      };
    export type ClickEvent = DevExpress.events.NativeEventInfo<
      dxVectorMap,
      MouseEvent | PointerEvent
    > & {
      readonly target: MapLayerElement;
    };
    export type DisposingEvent = DevExpress.events.EventInfo<dxVectorMap>;
    export type DrawnEvent = DevExpress.events.EventInfo<dxVectorMap>;
    export type ExportedEvent = DevExpress.events.EventInfo<dxVectorMap>;
    export type ExportingEvent = DevExpress.events.EventInfo<dxVectorMap> &
      DevExpress.viz.BaseWidget.ExportInfo;
    export type FileSavingEvent =
      DevExpress.viz.BaseWidget.FileSavingEventInfo<dxVectorMap>;
    export type IncidentOccurredEvent =
      DevExpress.events.EventInfo<dxVectorMap> &
        DevExpress.viz.BaseWidget.IncidentInfo;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxVectorMap>;
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxVectorMap> &
      DevExpress.events.ChangedOptionInfo;
    export type Properties = dxVectorMapOptions;
    export type SelectionChangedEvent =
      DevExpress.events.EventInfo<dxVectorMap> & {
        readonly target: MapLayerElement;
      };
    export type TooltipHiddenEvent = DevExpress.events.EventInfo<dxVectorMap> &
      TooltipInfo;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export interface TooltipInfo {
      target?: MapLayerElement | dxVectorMapAnnotationConfig;
    }
    export type TooltipShownEvent = DevExpress.events.EventInfo<dxVectorMap> &
      TooltipInfo;
    export type VectorMapLayerType = 'area' | 'line' | 'marker';
    export type VectorMapMarkerShape = 'circle' | 'square';
    export type VectorMapMarkerType = 'bubble' | 'dot' | 'image' | 'pie';
    export type ZoomFactorChangedEvent =
      DevExpress.events.EventInfo<dxVectorMap> & {
        readonly zoomFactor: number;
      };
  }
  /**
   * 
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxVectorMapAnnotationConfig
    extends dxVectorMapCommonAnnotationConfig {
    /**
     * Specifies the annotation&apos;s name.
     */
    name?: string;
  }
  /**
   * 
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxVectorMapCommonAnnotationConfig
    extends BaseWidgetAnnotationConfig {
    /**
     * Positions the annotation&apos;s center at specified geographic coordinates: [longitude, latitude].
     */
    coordinates?: Array<number>;
    /**
     * Customizes the text and appearance of the annotation&apos;s tooltip.
     */
    customizeTooltip?: (annotation: dxVectorMapAnnotationConfig | any) => any;
    /**
     * Specifies a custom template for the annotation. Applies only if the type is &apos;custom&apos;.
     */
    template?:
      | DevExpress.core.template
      | ((
          annotation: dxVectorMapAnnotationConfig | any,
          element: SVGGElement
        ) => string | DevExpress.core.UserDefinedElement<SVGElement>);
    /**
     * Specifies a custom template for an annotation&apos;s tooltip.
     */
    tooltipTemplate?:
      | DevExpress.core.template
      | ((
          annotation: dxVectorMapAnnotationConfig | any,
          element: DevExpress.core.DxElement
        ) => string | DevExpress.core.UserDefinedElement);
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxVectorMapLegends extends BaseLegend {
    /**
     * Specifies text for a hint that appears when a user hovers the mouse pointer over the text of a legend item.
     */
    customizeHint?: (itemInfo: {
      start?: number;
      end?: number;
      index?: number;
      color?: string;
      size?: number;
    }) => string;
    /**
     * Allows you to change the order and visibility of legend items.
     */
    customizeItems?: (
      items: Array<DevExpress.viz.dxVectorMap.LegendItem>
    ) => Array<DevExpress.viz.dxVectorMap.LegendItem>;
    /**
     * Specifies text for legend items.
     */
    customizeText?: (itemInfo: {
      start?: number;
      end?: number;
      index?: number;
      color?: string;
      size?: number;
    }) => string;
    /**
     * Specifies the legend items&apos; font properties.
     */
    font?: Font;
    /**
     * Specifies the color of item markers in the legend. The specified color applied only when the legend uses &apos;size&apos; source.
     */
    markerColor?: string;
    /**
     * Specifies the shape of item markers.
     */
    markerShape?: DevExpress.viz.dxVectorMap.VectorMapMarkerShape;
    /**
     * Specifies the marker&apos;s size in a legend item in pixels.
     */
    markerSize?: number;
    /**
     * Specifies an SVG element that serves as a custom legend item marker.
     */
    markerTemplate?:
      | DevExpress.core.template
      | ((
          legendItem: DevExpress.viz.dxVectorMap.LegendItem,
          element: SVGGElement
        ) => string | DevExpress.core.UserDefinedElement<SVGElement>);
    /**
     * Specifies the source of data for the legend.
     */
    source?: {
      /**
       * Specifies the type of the legend grouping.
       */
      grouping?: string;
      /**
       * Specifies a layer to which the legend belongs.
       */
      layer?: string;
    };
  }
  /**
   * @deprecated use Properties instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxVectorMapOptions extends BaseWidgetOptions<dxVectorMap> {
    /**
     * Specifies the properties for the map background.
     */
    background?: {
      /**
       * Specifies a color for the background border.
       */
      borderColor?: string;
      /**
       * Specifies a color for the background.
       */
      color?: string;
    };
    /**
     * Specifies the positioning of a map in geographical coordinates.
     */
    bounds?: Array<number>;
    /**
     * Specifies the geographical coordinates of the center for a map.
     */
    center?: Array<number>;
    /**
     * Configures the control bar.
     */
    controlBar?: {
      /**
       * Specifies a color for the outline of the control bar elements.
       */
      borderColor?: string;
      /**
       * Specifies a color for the inner area of the control bar elements.
       */
      color?: string;
      /**
       * Specifies whether or not to display the control bar.
       */
      enabled?: boolean;
      /**
       * Specifies the position of the control bar.
       */
      horizontalAlignment?: DevExpress.common.HorizontalAlignment;
      /**
       * Specifies the margin of the control bar in pixels.
       */
      margin?: number;
      /**
       * Specifies the opacity of the control bar.
       */
      opacity?: number;
      /**
       * Specifies the position of the control bar.
       */
      verticalAlignment?: DevExpress.common.VerticalEdge;
    };
    /**
     * Specifies properties for VectorMap UI component layers.
     */
    layers?:
      | Array<{
          /**
           * Specifies a color for the border of the layer elements.
           */
          borderColor?: string;
          /**
           * Specifies the line width (for layers of a line type) or width of the layer elements border in pixels.
           */
          borderWidth?: number;
          /**
           * Specifies a color for layer elements.
           */
          color?: string;
          /**
           * Specifies the field that provides data to be used for coloring of layer elements.
           */
          colorGroupingField?: string;
          /**
           * Allows you to paint layer elements with similar attributes in the same color.
           */
          colorGroups?: Array<number>;
          /**
           * A function that customizes each layer element individually.
           */
          customize?: (elements: Array<MapLayerElement>) => void;
          /**
           * Specifies the name of the attribute containing marker data. Setting this property makes sense only if the layer type is &apos;marker&apos; and the elementType is &apos;bubble&apos;, &apos;pie&apos; or &apos;image&apos;.
           */
          dataField?: string;
          /**
           * Specifies a data source for the layer.
           */
          dataSource?:
            | object
            | DevExpress.data.DataSource.DataSourceLike<any>
            | null;
          /**
           * Specifies the type of a marker element. Setting this property makes sense only if the layer type is &apos;marker&apos;.
           */
          elementType?: DevExpress.viz.dxVectorMap.VectorMapMarkerType;
          /**
           * Specifies whether or not to change the appearance of a layer element when it is hovered over.
           */
          hoverEnabled?: boolean;
          /**
           * Specifies a color for the border of the layer element when it is hovered over.
           */
          hoveredBorderColor?: string;
          /**
           * Specifies the pixel-measured line width (for layers of a line type) or width for the border of the layer element when it is hovered over.
           */
          hoveredBorderWidth?: number;
          /**
           * Specifies a color for a layer element when it is hovered over.
           */
          hoveredColor?: string;
          /**
           * Specifies marker label properties.
           */
          label?: {
            /**
             * The name of the data source attribute containing marker texts.
             */
            dataField?: string;
            /**
             * Enables marker labels.
             */
            enabled?: boolean;
            /**
             * Specifies font properties for marker labels.
             */
            font?: Font;
          };
          /**
           * Specifies the pixel-measured diameter of the marker that represents the biggest value. Setting this property makes sense only if the layer type is &apos;marker&apos;.
           */
          maxSize?: number;
          /**
           * Specifies the pixel-measured diameter of the marker that represents the smallest value. Setting this property makes sense only if the layer type is &apos;marker&apos;.
           */
          minSize?: number;
          /**
           * Specifies the layer name.
           */
          name?: string;
          /**
           * Specifies the layer opacity (from 0 to 1).
           */
          opacity?: number;
          /**
           * The name of a predefined palette or a custom range of colors to be used as a palette.
           */
          palette?: Array<string> | DevExpress.common.charts.Palette;
          /**
           * Specifies the number of colors in a palette.
           */
          paletteSize?: number;
          /**
           * The position of a color in the palette[] array. Should not exceed the value of the paletteSize property.
           */
          paletteIndex?: number;
          /**
           * Specifies a color for the border of the layer element when it is selected.
           */
          selectedBorderColor?: string;
          /**
           * Specifies a pixel-measured line width (for layers of a line type) or width for the border of the layer element when it is selected.
           */
          selectedBorderWidth?: number;
          /**
           * Specifies a color for the layer element when it is selected.
           */
          selectedColor?: string;
          /**
           * Specifies whether single or multiple map elements can be selected on a vector map.
           */
          selectionMode?: DevExpress.common.SingleMultipleOrNone;
          /**
           * Specifies the size of markers. Setting this property makes sense only if the layer type is &apos;marker&apos; and the elementType is &apos;dot&apos;, &apos;pie&apos; or &apos;image&apos;.
           */
          size?: number;
          /**
           * Specifies the field that provides data to be used for sizing bubble markers. Setting this property makes sense only if the layer type is &apos;marker&apos; and the elementType is &apos;bubble&apos;.
           */
          sizeGroupingField?: string;
          /**
           * Allows you to display bubbles with similar attributes in the same size. Setting this property makes sense only if the layer type is &apos;marker&apos; and the elementType is &apos;bubble&apos;.
           */
          sizeGroups?: Array<number>;
          /**
           * Specifies layer type.
           */
          type?: DevExpress.viz.dxVectorMap.VectorMapLayerType;
        }>
      | {
          borderColor?: string;
          borderWidth?: number;
          color?: string;
          colorGroupingField?: string;
          colorGroups?: Array<number>;
          customize?: (elements: Array<MapLayerElement>) => any;
          dataField?: string;
          dataSource?:
            | object
            | DevExpress.data.DataSource.DataSourceLike<any>
            | null;
          elementType?: 'bubble' | 'dot' | 'image' | 'pie';
          hoverEnabled?: boolean;
          hoveredBorderColor?: string;
          hoveredBorderWidth?: number;
          hoveredColor?: string;
          label?: { dataField?: string; enabled?: boolean; font?: Font };
          maxSize?: number;
          minSize?: number;
          name?: string;
          opacity?: number;
          palette?: Array<string> | DevExpress.common.charts.Palette;
          paletteSize?: number;
          selectedBorderColor?: string;
          selectedBorderWidth?: number;
          selectedColor?: string;
          selectionMode?: DevExpress.common.SingleMultipleOrNone;
          size?: number;
          sizeGroupingField?: string;
          sizeGroups?: Array<number>;
          type?: 'area' | 'line' | 'marker';
        };
    /**
     * Configures map legends.
     */
    legends?: Array<dxVectorMapLegends>;
    /**
     * Generates space around the UI component.
     */
    margin?: BaseWidgetMargin;
    /**
     * Specifies a map&apos;s maximum zoom factor.
     */
    maxZoomFactor?: number;
    /**
     * A function that is executed each time the center coordinates are changed.
     */
    onCenterChanged?: (
      e: DevExpress.viz.dxVectorMap.CenterChangedEvent
    ) => void;
    /**
     * A function that is executed when any location on the map is clicked or tapped.
     */
    onClick?: ((e: DevExpress.viz.dxVectorMap.ClickEvent) => void) | string;
    /**
     * A function that is executed when a layer element is selected or selection is canceled.
     */
    onSelectionChanged?: (
      e: DevExpress.viz.dxVectorMap.SelectionChangedEvent
    ) => void;
    /**
     * A function that is executed when a tooltip becomes hidden.
     */
    onTooltipHidden?: (
      e: DevExpress.viz.dxVectorMap.TooltipHiddenEvent
    ) => void;
    /**
     * A function that is executed when a tooltip appears.
     */
    onTooltipShown?: (e: DevExpress.viz.dxVectorMap.TooltipShownEvent) => void;
    /**
     * A function that is executed each time the zoom factor is changed.
     */
    onZoomFactorChanged?: (
      e: DevExpress.viz.dxVectorMap.ZoomFactorChangedEvent
    ) => void;
    /**
     * Disables the panning capability.
     */
    panningEnabled?: boolean;
    /**
     * Specifies the map projection.
     */
    projection?: VectorMapProjection | VectorMapProjectionConfig | string | any;
    /**
     * Configures tooltips.
     */
    tooltip?: dxVectorMapTooltip;
    /**
     * Specifies whether the map should respond to touch gestures.
     */
    touchEnabled?: boolean;
    /**
     * Specifies whether or not the map should respond when a user rolls the mouse wheel.
     */
    wheelEnabled?: boolean;
    /**
     * Specifies a number that is used to zoom a map initially.
     */
    zoomFactor?: number;
    /**
     * Disables the zooming capability.
     */
    zoomingEnabled?: boolean;
    /**
     * Specifies settings common for all annotations in the VectorMap.
     */
    commonAnnotationSettings?: dxVectorMapCommonAnnotationConfig;
    /**
     * Specifies the annotation collection.
     */
    annotations?: Array<dxVectorMapAnnotationConfig | any>;
    /**
     * Customizes an individual annotation.
     */
    customizeAnnotation?: (
      annotation: dxVectorMapAnnotationConfig | any
    ) => dxVectorMapAnnotationConfig;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxVectorMapTooltip extends BaseWidgetTooltip {
    /**
     * Specifies a custom template for a tooltip.
     */
    contentTemplate?:
      | DevExpress.core.template
      | ((
          info: MapLayerElement,
          element: DevExpress.core.DxElement
        ) => string | DevExpress.core.UserDefinedElement);
    /**
     * Specifies text and appearance of a set of tooltips.
     */
    customizeTooltip?: (info: MapLayerElement) => any;
    /**
     * Formats a value before it is displayed it in a tooltip.
     */
    format?: DevExpress.ui.Format;
  }
  /**
   * Allows you to export UI components using their SVG markup.
   */
  export function exportFromMarkup(
    markup: string,
    options: {
      fileName?: string;
      format?: string;
      backgroundColor?: string;
      proxyUrl?: string;
      width?: number;
      height?: number;
      onExporting?: Function;
      onExported?: Function;
      onFileSaving?: Function;
      margin?: number;
      svgToCanvas?: Function;
    }
  ): void;
  /**
   * Exports one or several UI components to PNG.
   */
  export function exportWidgets(
    widgetInstances: VizWidget | Array<VizWidget> | Array<Array<VizWidget>>
  ): void;
  /**
   * Exports one or several UI components.
   */
  export function exportWidgets(
    widgetInstances: VizWidget | Array<VizWidget> | Array<Array<VizWidget>>,
    options: {
      fileName?: string;
      format?: DevExpress.common.ExportFormat;
      backgroundColor?: string;
      margin?: number;
      gridLayout?: boolean;
      verticalAlignment?: DevExpress.common.VerticalAlignment;
      horizontalAlignment?: DevExpress.common.HorizontalAlignment;
      proxyUrl?: string;
      onExporting?: Function;
      onExported?: Function;
      onFileSaving?: Function;
      svgToCanvas?: Function;
    }
  ): void;
  /**
   * Font properties.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface Font {
    /**
     * Specifies font color.
     */
    color?: string;
    /**
     * Specifies font family.
     */
    family?: string;
    /**
     * Specifies font opacity.
     */
    opacity?: number;
    /**
     * Specifies font size.
     */
    size?: string | number;
    /**
     * Specifies font weight. Accepts values from 100 to 900 in increments of 100. Higher values increase boldness.
     */
    weight?: number;
  }
  /**
   * @deprecated Use LegendItem instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface FunnelLegendItem extends BaseLegendItem {
    /**
     * The funnel item that the legend item represents.
     */
    item?: DevExpress.viz.dxFunnel.Item;
  }
  /**
   * 
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface GaugeIndicator extends CommonIndicator {
    /**
     * Specifies the type of gauge indicators.
     */
    type?: DevExpress.viz.BaseGauge.GaugeIndicatorType;
  }
  /**
   * Returns a subset of palette colors.
   */
  export function generateColors(
    palette: DevExpress.common.charts.Palette | Array<string>,
    count: number,
    options: {
      paletteExtensionMode?: DevExpress.common.charts.PaletteExtensionMode;
      baseColorSet?: DevExpress.common.charts.PaletteColorSet;
    }
  ): Array<string>;
  /**
   * Gets the SVG markup of specific UI components for their subsequent export.
   */
  export function getMarkup(
    widgetInstances: VizWidget | Array<VizWidget> | Array<Array<VizWidget>>
  ): string;
  /**
   * Gets the color sets of a predefined or registered palette.
   */
  export function getPalette(paletteName: string): any;
  /**
   * Gets a predefined or registered theme&apos;s settings.
   */
  export function getTheme(theme: string): any;
  /**
   * This section describes the Layer object, which represents a vector map layer.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface MapLayer {
    /**
     * Deselects all layer elements.
     */
    clearSelection(): void;
    /**
     * The type of the layer elements.
     */
    elementType?: string;
    /**
     * Returns the DataSource instance.
     */
    getDataSource(): DevExpress.data.DataSource;
    /**
     * Gets all layer elements.
     */
    getElements(): Array<MapLayerElement>;
    /**
     * The layer index in the layers array.
     */
    index?: number;
    /**
     * The name of the layer.
     */
    name?: string;
    /**
     * The layer type. Can be &apos;area&apos;, &apos;line&apos; or &apos;marker&apos;.
     */
    type?: string;
  }
  /**
   * This section describes the Layer Element object, which represents a vector map layer element.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface MapLayerElement {
    /**
     * Applies the layer element settings and updates element appearance.
     */
    applySettings(settings: any): void;
    /**
     * Gets the value of an attribute.
     */
    attribute(name: string): any;
    /**
     * Sets the value of an attribute.
     */
    attribute(name: string, value: any): void;
    /**
     * Gets the layer element coordinates.
     */
    coordinates(): any;
    /**
     * The parent layer of the layer element.
     */
    layer?: any;
    /**
     * Gets the selection state of the layer element.
     */
    selected(): boolean;
    /**
     * Sets the selection state of the layer element.
     */
    selected(state: boolean): void;
  }
  /**
   * @deprecated Use LegendItem instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface PieChartLegendItem extends BaseLegendItem {
    /**
     * The argument of the point(s) that the legend item represents.
     */
    argument?: string | Date | number;
    /**
     * The zero-based index of the legend item used to identify the item among other legend items with the same argument.
     */
    argumentIndex?: number;
    /**
     * An array of points that the legend item represents. Can contain more than one point only in a multi-series PieChart.
     */
    points?: Array<piePointObject>;
    /**
     * The text that the legend item displays.
     */
    text?: any;
  }
  /**
   * Specifies properties for the series of the PieChart UI component.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface PieChartSeries
    extends dxPieChartSeriesTypesCommonPieChartSeries {
    /**
     * Specifies the name that identifies the series.
     */
    name?: string;
    /**
     * Specifies data about a series.
     */
    tag?: any;
  }
  /**
   * This section describes the Series object, which represents a series.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface pieChartSeriesObject extends baseSeriesObject {
    /**
     * 
     */
    hover(): void;
    /**
     * 
     */
    clearHover(): void;
    /**
     * 
     */
    isHovered(): boolean;
  }
  /**
   * This section describes the Point object, which represents a series point.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface piePointObject extends basePointObject {
    /**
     * Hides a specific point.
     */
    hide(): void;
    /**
     * Provides information about the visibility state of a point.
     */
    isVisible(): boolean;
    /**
     * Gets the percentage value of the specific point.
     */
    percent?: string | number | Date;
    /**
     * Makes a specific point visible.
     */
    show(): void;
  }
  /**
   * Specifies properties for PolarChart UI component series.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface PolarChartSeries
    extends dxPolarChartSeriesTypesCommonPolarChartSeries {
    /**
     * Specifies the name that identifies the series.
     */
    name?: string;
    /**
     * Specifies data about a series.
     */
    tag?: any;
    /**
     * Sets the series type.
     */
    type?: DevExpress.viz.dxPolarChart.PolarChartSeriesType;
  }
  /**
   * This section describes the Series object, which represents a series.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface polarChartSeriesObject extends baseSeriesObject {}
  /**
   * This section describes the Point object, which represents a series point.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface polarPointObject extends basePointObject {}
  /**
   * The method to be called every time the active entry in the browser history is modified without reloading the current page.
   */
  export function refreshPaths(): void;
  /**
   * Refreshes the current theme and palette in all data visualization UI components on the page.
   */
  export function refreshTheme(): void;
  /**
   * Registers a new palette.
   */
  export function registerPalette(paletteName: string, palette: any): void;
  /**
   * Registers a new theme based on the existing one.
   */
  export function registerTheme(customTheme: any, baseTheme: string): void;
  /**
   * A class describing a scale break range. Inherited by scale breaks in the Chart and RangeSelector.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface ScaleBreak {
    /**
     * Along with the startValue property, limits the scale break.
     */
    endValue?: number | Date | string;
    /**
     * Along with the endValue property, limits the scale break.
     */
    startValue?: number | Date | string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export type SeriesType =
    | 'area'
    | 'bar'
    | 'bubble'
    | 'candlestick'
    | 'fullstackedarea'
    | 'fullstackedbar'
    | 'fullstackedline'
    | 'fullstackedspline'
    | 'fullstackedsplinearea'
    | 'line'
    | 'rangearea'
    | 'rangebar'
    | 'scatter'
    | 'spline'
    | 'splinearea'
    | 'stackedarea'
    | 'stackedbar'
    | 'stackedline'
    | 'stackedspline'
    | 'stackedsplinearea'
    | 'steparea'
    | 'stepline'
    | 'stock';
  /**
   * @deprecated Use LegendItem instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface VectorMapLegendItem extends BaseLegendItem {
    /**
     * The color of the legend item&apos;s marker.
     */
    color?: string;
    /**
     * The end value of the group that the legend item indicates.
     */
    end?: number;
    /**
     * The diameter of the legend item&apos;s marker in pixels.
     */
    size?: number;
    /**
     * The start value of the group that the legend item indicates.
     */
    start?: number;
  }
  export type VectorMapProjection =
    | 'equirectangular'
    | 'lambert'
    | 'mercator'
    | 'miller';
  /**
   * 
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface VectorMapProjectionConfig {
    /**
     * Specifies the projection&apos;s ratio of the width to the height.
     */
    aspectRatio?: number;
    /**
     * Converts coordinates from [x, y] to [lon, lat].
     */
    from?: (coordinates: Array<number>) => Array<number>;
    /**
     * Converts coordinates from [lon, lat] to [x, y].
     */
    to?: (coordinates: Array<number>) => Array<number>;
  }
  /**
   * 
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface VizRange {
    /**
     * The range&apos;s end value.
     */
    endValue?: number | Date | string;
    /**
     * The range&apos;s length.
     */
    length?: VizTimeInterval;
    /**
     * The range&apos;s start value.
     */
    startValue?: number | Date | string;
  }
  /**
   * A class describing various time intervals. Inherited by tick intervals in Chart and RangeSelector.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export type VizTimeInterval =
    | number
    | {
        /**
         * Specifies the time interval measured in days. Accepts integer values. Available only for an axis/scale that displays date-time values.
         */
        days?: number;
        /**
         * Specifies the time interval measured in hours. Accepts integer values. Available only for an axis/scale that displays date-time values.
         */
        hours?: number;
        /**
         * Specifies the time interval measured in milliseconds. Accepts integer values. Available only for an axis/scale that displays date-time values.
         */
        milliseconds?: number;
        /**
         * Specifies the time interval measured in minutes. Accepts integer values. Available only for an axis/scale that displays date-time values.
         */
        minutes?: number;
        /**
         * Specifies the time interval measured in months. Accepts integer values. Available only for an axis/scale that displays date-time values.
         */
        months?: number;
        /**
         * Specifies the time interval measured in quarters. Accepts integer values. Available only for an axis/scale that displays date-time values.
         */
        quarters?: number;
        /**
         * Specifies the time interval measured in seconds. Accepts integer values. Available only for an axis/scale that displays date-time values.
         */
        seconds?: number;
        /**
         * Specifies the time interval measured in weeks. Accepts integer values. Available only for an axis/scale that displays date-time values.
         */
        weeks?: number;
        /**
         * Specifies the time interval measured in years. Accepts integer values. Available only for an axis/scale that displays date-time values.
         */
        years?: number;
      }
    | DevExpress.common.charts.TimeInterval;
  export type VizWidget =
    | dxChart
    | dxPieChart
    | dxFunnel
    | dxSankey
    | dxTreeMap
    | dxVectorMap
    | dxSparkline
    | dxBullet
    | dxBarGauge;
}
declare module DevExpress.viz.dxBarGauge {
  export type LegendItem = BarGaugeLegendItem;
}
declare module DevExpress.viz.dxFunnel {
  export type Item = dxFunnelItem;
  export type LegendItem = FunnelLegendItem;
}
declare module DevExpress.viz.dxPieChart {
  export type LegendItem = PieChartLegendItem;
}
declare module DevExpress.viz.dxVectorMap {
  export type LegendItem = VectorMapLegendItem;
}
declare module DevExpress.viz.map {
  /**
   * Creates a new projection.
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export const projection: {
    /**
     * Adds a new projection to the internal projection storage.
     */
    add(name: string, projection: VectorMapProjectionConfig | any): void;

    /**
     * Gets a predefined or custom projection from the projection storage.
     */
    get(name: VectorMapProjection | string): any;

    (data: VectorMapProjectionConfig): any;
  };
}

declare module DevExpress {
    /** @deprecated Use DevExpress.events.EventObject instead */
    export type dxEvent = DevExpress.events.EventObject
    /** @deprecated Use DevExpress.events.event instead */
    export type event = DevExpress.events.event
}

declare module DevExpress.viz {
    /** @deprecated Use DevExpress.viz.ChartSeries instead */
    export type dxChartSeries =  DevExpress.viz.ChartSeries;
    /** @deprecated Use DevExpress.viz.PieChartSeries instead */
    export type dxPieChartSeries =  DevExpress.viz.PieChartSeries;
    /** @deprecated Use DevExpress.viz.PolarChartSeries instead */
    export type dxPolarChartSeries =  DevExpress.viz.PolarChartSeries;

    /** @deprecated Use DevExpress.viz instead */
    export module charts {
        export type dxChartOptions = DevExpress.viz.dxChartOptions;
        export type dxChartArgumentAxis = DevExpress.viz.dxChartArgumentAxis;
        export type dxChartArgumentAxisConstantLines  = DevExpress.viz.dxChartArgumentAxisConstantLines;
        export type dxChartArgumentAxisConstantLinesLabel = DevExpress.viz.dxChartArgumentAxisConstantLinesLabel;
        export type dxChartArgumentAxisConstantLineStyle = DevExpress.viz.dxChartArgumentAxisConstantLineStyle;
        export type dxChartArgumentAxisConstantLineStyleLabel = DevExpress.viz.dxChartArgumentAxisConstantLineStyleLabel;
        export type dxChartArgumentAxisLabel = DevExpress.viz.dxChartArgumentAxisLabel;
        export type dxChartArgumentAxisStrips = DevExpress.viz.dxChartArgumentAxisStrips;
        export type dxChartArgumentAxisStripsLabel = DevExpress.viz.dxChartArgumentAxisStripsLabel;
        export type dxChartArgumentAxisTitle = DevExpress.viz.dxChartArgumentAxisTitle;
        export type dxChartCommonAxisSettings = DevExpress.viz.dxChartCommonAxisSettings;
        export type dxChartCommonAxisSettingsConstantLineStyle = DevExpress.viz.dxChartCommonAxisSettingsConstantLineStyle;
        export type dxChartCommonAxisSettingsConstantLineStyleLabel = DevExpress.viz.dxChartCommonAxisSettingsConstantLineStyleLabel;
        export type dxChartCommonAxisSettingsLabel = DevExpress.viz.dxChartCommonAxisSettingsLabel;
        export type dxChartCommonAxisSettingsStripStyle = DevExpress.viz.dxChartCommonAxisSettingsStripStyle;
        export type dxChartCommonAxisSettingsStripStyleLabel = DevExpress.viz.dxChartCommonAxisSettingsStripStyleLabel;
        export type dxChartCommonAxisSettingsTitle = DevExpress.viz.dxChartCommonAxisSettingsTitle;
        export type dxChartCommonPaneSettings = DevExpress.viz.dxChartCommonPaneSettings;
        export type dxChartCommonSeriesSettings = DevExpress.viz.dxChartCommonSeriesSettings;
        export type dxChartLegend = DevExpress.viz.dxChartLegend;
        export type dxChartPanes = DevExpress.viz.dxChartPanes;
        export type dxChartSeries = DevExpress.viz.dxChartSeries;
        export type dxChartTooltip = DevExpress.viz.dxChartTooltip;
        export type dxChartValueAxis = DevExpress.viz.dxChartValueAxis;
        export type dxChartValueAxisConstantLines = DevExpress.viz.dxChartValueAxisConstantLines;
        export type dxChartValueAxisConstantLinesLabel = DevExpress.viz.dxChartValueAxisConstantLinesLabel;
        export type dxChartValueAxisConstantLineStyle = DevExpress.viz.dxChartValueAxisConstantLineStyle;
        export type dxChartValueAxisConstantLineStyleLabel = DevExpress.viz.dxChartValueAxisConstantLineStyleLabel;
        export type dxChartValueAxisLabel = DevExpress.viz.dxChartValueAxisLabel;
        export type dxChartValueAxisStrips = DevExpress.viz.dxChartValueAxisStrips;
        export type dxChartValueAxisStripsLabel = DevExpress.viz.dxChartValueAxisStripsLabel;
        export type dxChartValueAxisTitle = DevExpress.viz.dxChartValueAxisTitle;

        export type dxPieChartOptions = DevExpress.viz.dxPieChartOptions;
        export type dxPieChartAdaptiveLayout = DevExpress.viz.dxPieChartAdaptiveLayout;
        export type dxPieChartLegend = DevExpress.viz.dxPieChartLegend;
        export type dxPieChartSeries = DevExpress.viz.dxPieChartSeries;

        export type dxPolarChartOptions = DevExpress.viz.dxPolarChartOptions;
        export type dxPolarChartAdaptiveLayout = DevExpress.viz.dxPolarChartAdaptiveLayout;
        export type dxPolarChartArgumentAxis = DevExpress.viz.dxPolarChartArgumentAxis;
        export type dxPolarChartArgumentAxisConstantLines = DevExpress.viz.dxPolarChartArgumentAxisConstantLines;
        export type dxPolarChartArgumentAxisConstantLinesLabel = DevExpress.viz.dxPolarChartArgumentAxisConstantLinesLabel;
        export type dxPolarChartArgumentAxisLabel = DevExpress.viz.dxPolarChartArgumentAxisLabel;
        export type dxPolarChartArgumentAxisStrips = DevExpress.viz.dxPolarChartArgumentAxisStrips;
        export type dxPolarChartArgumentAxisStripsLabel = DevExpress.viz.dxPolarChartArgumentAxisStripsLabel;
        export type dxPolarChartCommonAxisSettings = DevExpress.viz.dxPolarChartCommonAxisSettings;
        export type dxPolarChartCommonAxisSettingsConstantLineStyle = DevExpress.viz.dxPolarChartCommonAxisSettingsConstantLineStyle;
        export type dxPolarChartCommonAxisSettingsConstantLineStyleLabel = DevExpress.viz.dxPolarChartCommonAxisSettingsConstantLineStyleLabel;
        export type dxPolarChartCommonAxisSettingsLabel = DevExpress.viz.dxPolarChartCommonAxisSettingsLabel;
        export type dxPolarChartCommonAxisSettingsStripStyle = DevExpress.viz.dxPolarChartCommonAxisSettingsStripStyle;
        export type dxPolarChartCommonAxisSettingsStripStyleLabel = DevExpress.viz.dxPolarChartCommonAxisSettingsStripStyleLabel;
        export type dxPolarChartCommonAxisSettingsTick = DevExpress.viz.dxPolarChartCommonAxisSettingsTick;
        export type dxPolarChartCommonSeriesSettings = DevExpress.viz.dxPolarChartCommonSeriesSettings;
        export type dxPolarChartLegend = DevExpress.viz.dxPolarChartLegend;
        export type dxPolarChartSeries = DevExpress.viz.dxPolarChartSeries;
        export type dxPolarChartTooltip = DevExpress.viz.dxPolarChartTooltip;
        export type dxPolarChartValueAxis = DevExpress.viz.dxPolarChartValueAxis;
        export type dxPolarChartValueAxisConstantLines = DevExpress.viz.dxPolarChartValueAxisConstantLines;
        export type dxPolarChartValueAxisConstantLinesLabel = DevExpress.viz.dxPolarChartValueAxisConstantLinesLabel;
        export type dxPolarChartValueAxisLabel = DevExpress.viz.dxPolarChartValueAxisLabel;
        export type dxPolarChartValueAxisStrips = DevExpress.viz.dxPolarChartValueAxisStrips;
        export type dxPolarChartValueAxisStripsLabel = DevExpress.viz.dxPolarChartValueAxisStripsLabel;
        export type dxPolarChartValueAxisTick = DevExpress.viz.dxPolarChartValueAxisTick;
    }

    /** @deprecated Use DevExpress.viz instead */
    export module funnel {
        export type dxFunnelOptions = DevExpress.viz.dxFunnelOptions;
        export type dxFunnelTooltip = DevExpress.viz.dxFunnelTooltip;
    }

    /** @deprecated Use DevExpress.viz instead */
    export module gauges {
        export type dxCircularGaugeOptions = DevExpress.viz.dxCircularGaugeOptions;
        export type dxCircularGaugeRangeContainer = DevExpress.viz.dxCircularGaugeRangeContainer;
        export type dxCircularGaugeScale = DevExpress.viz.dxCircularGaugeScale;
        export type dxCircularGaugeScaleLabel = DevExpress.viz.dxCircularGaugeScaleLabel;

        export type dxLinearGaugeOptions = DevExpress.viz.dxLinearGaugeOptions;
        export type dxLinearGaugeRangeContainer = DevExpress.viz.dxLinearGaugeRangeContainer;
        export type dxLinearGaugeScale = DevExpress.viz.dxLinearGaugeScale;
        export type dxLinearGaugeScaleLabel = DevExpress.viz.dxLinearGaugeScaleLabel;

        export type dxBarGaugeOptions = DevExpress.viz.dxBarGaugeOptions;
        export type dxBarGaugeTooltip = DevExpress.viz.dxBarGaugeTooltip;
    }

    /** @deprecated Use DevExpress.viz instead */
    export module rangeSelector {
        export type dxRangeSelectorOptions = DevExpress.viz.dxRangeSelectorOptions;
    }

    /** @deprecated Use DevExpress.viz instead */
    export module sparklines {
        export type dxSparklineOptions = DevExpress.viz.dxSparklineOptions;
        export type dxBulletOptions = DevExpress.viz.dxBulletOptions;
    }

    /** @deprecated Use DevExpress.viz instead */
    export module map {
        export type dxVectorMapOptions = DevExpress.viz.dxVectorMapOptions;
        export type dxVectorMapTooltip = DevExpress.viz.dxVectorMapTooltip;
    }

    /** @deprecated Use DevExpress.viz instead */
    export module treeMap {
        export type dxTreeMapOptions = DevExpress.viz.dxTreeMapOptions;
        export type dxTreeMapTooltip = DevExpress.viz.dxTreeMapTooltip;
    }
}

declare module DevExpress.ui {
    /** @deprecated Use DevExpress.ui.dxAccordionItem */
    export type dxAccordionItemTemplate = DevExpress.ui.dxAccordionItem;

    /** @deprecated Use DevExpress.ui.dxActionSheetItem */
    export type dxActionSheetItemTemplate = DevExpress.ui.dxActionSheetItem;

    /** @deprecated Use DevExpress.ui.dxBoxItem */
    export type dxBoxItemTemplate = DevExpress.ui.dxBoxItem;

    /** @deprecated Use DevExpress.ui.dxGalleryItem */
    export type dxGalleryItemTemplate = DevExpress.ui.dxGalleryItem;

    /** @deprecated Use DevExpress.ui.dxMultiViewItem */
    export type dxMultiViewItemTemplate = DevExpress.ui.dxMultiViewItem;

    /** @deprecated Use DevExpress.ui.dxNavBarItem */
    export type dxNavBarItemTemplate = DevExpress.ui.dxNavBarItem;

    /** @deprecated Use DevExpress.ui.dxResponsiveBoxItem */
    export type dxResponsiveBoxItemTemplate = DevExpress.ui.dxResponsiveBoxItem;

    /** @deprecated Use DevExpress.ui.dxSchedulerAppointment */
    export type dxSchedulerAppointmentTemplate = DevExpress.ui.dxSchedulerAppointment;

    /** @deprecated Use DevExpress.ui.dxSlideOutItem */
    export type dxSlideOutItemTemplate = DevExpress.ui.dxSlideOutItem;

    /** @deprecated Use DevExpress.ui.dxTabsItem */
    export type dxTabsItemTemplate = DevExpress.ui.dxTabsItem;

    /** @deprecated Use DevExpress.ui.dxTabPanelItem */
    export type dxTabPanelItemTemplate = DevExpress.ui.dxTabPanelItem;

    /** @deprecated Use DevExpress.ui.dxTileViewItem */
    export type dxTileViewItemTemplate = DevExpress.ui.dxTileViewItem;

    /** @deprecated Use DevExpress.ui.dxToolbarItem */
    export type dxToolbarItemTemplate = DevExpress.ui.dxToolbarItem;

    /** @deprecated Use DevExpress.ui.CollectionWidgetItem */
    export type CollectionWidgetItemTemplate = DevExpress.ui.CollectionWidgetItem;

    /** @deprecated Use DevExpress.ui.dxContextMenuItem */
    export type dxContextMenuItemTemplate = DevExpress.ui.dxContextMenuItem;

    /** @deprecated Use DevExpress.ui.dxMenuBaseItem */
    export type dxMenuBaseItemTemplate = DevExpress.ui.dxMenuBaseItem;

    /** @deprecated Use DevExpress.ui.CollectionWidgetItem */
    export type DataExpressionMixinItemTemplate = DevExpress.ui.CollectionWidgetItem;

    /** @deprecated Use DevExpress.ui.dxListItem */
    export type dxListItemTemplate = DevExpress.ui.dxListItem;

    /** @deprecated Use DevExpress.ui.dxMenuItem */
    export type dxMenuItemTemplate = DevExpress.ui.dxMenuItem;

    /** @deprecated Use DevExpress.ui.dxTreeViewItem */
    export type dxTreeViewItemTemplate = DevExpress.ui.dxTreeViewItem;

    export module dxDataGrid {

        /** @deprecated Use DevExpress.common.grids.ColumnChooser instead */
        export type ColumnChooser = DevExpress.common.grids.ColumnChooser;

        /** @deprecated Use DevExpress.common.grids.ColumnCustomizeTextArg instead */
        export type ColumnCustomizeTextArg = DevExpress.common.grids.ColumnCustomizeTextArg;

        /** @deprecated Use DevExpress.common.grids.ColumnFixing instead */
        export type ColumnFixing = DevExpress.common.grids.ColumnFixing;

        /** @deprecated Use DevExpress.common.grids.ColumnFixingTexts instead */
        export type ColumnFixingTexts = DevExpress.common.grids.ColumnFixingTexts;

        /** @deprecated Use DevExpress.common.grids.ColumnHeaderFilter instead */
        export type ColumnHeaderFilter = DevExpress.common.grids.ColumnHeaderFilter;

        /** @deprecated Use DevExpress.common.grids.ColumnLookup instead */
        export type ColumnLookup = DevExpress.common.grids.ColumnLookup;

        /** @deprecated Use DevExpress.common.grids.DataChange instead */
        export type DataChange = DevExpress.common.grids.DataChange;

        /** @deprecated Use DevExpress.common.grids.FilterPanelTexts instead */
        export type FilterPanelTexts = DevExpress.common.grids.FilterPanelTexts;

        /** @deprecated Use DevExpress.common.grids.FilterRow instead */
        export type FilterRow = DevExpress.common.grids.FilterRow;

        /** @deprecated Use DevExpress.common.grids.FilterRowOperationDescriptions instead */
        export type FilterRowOperationDescriptions = DevExpress.common.grids.FilterRowOperationDescriptions;

        /** @deprecated Use DevExpress.common.grids.HeaderFilter instead */
        export type HeaderFilter = DevExpress.common.grids.HeaderFilter;

        /** @deprecated Use DevExpress.common.grids.HeaderFilterTexts instead */
        export type HeaderFilterTexts = DevExpress.common.grids.HeaderFilterTexts;

        /** @deprecated Use DevExpress.common.grids.KeyboardNavigation instead */
        export type KeyboardNavigation = DevExpress.common.grids.KeyboardNavigation;

        /** @deprecated Use DevExpress.common.grids.LoadPanel instead */
        export type LoadPanel = DevExpress.common.grids.LoadPanel;

        /** @deprecated Use DevExpress.common.grids.Pager instead */
        export type Pager = DevExpress.common.grids.Pager;

        /** @deprecated Use DevExpress.common.grids.SearchPanel instead */
        export type SearchPanel = DevExpress.common.grids.SearchPanel;

        /** @deprecated Use DevExpress.common.grids.Sorting instead */
        export type Sorting = DevExpress.common.grids.Sorting;

        /** @deprecated Use DevExpress.common.grids.StateStoring instead */
        export type StateStoring = DevExpress.common.grids.StateStoring;
    }
}
